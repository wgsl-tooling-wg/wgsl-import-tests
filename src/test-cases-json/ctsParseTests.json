[
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"align\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(32)  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"binding\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(32) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"group\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(32)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"id\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(32) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"location\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(32) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(32) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"val\";attribute=\"workgroup_size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(32, 32, 32)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"align\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(30 + 2)  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"binding\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(30 + 2) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"group\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(30 + 2)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"id\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(30 + 2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"location\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(30 + 2) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(30 + 2) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"expr\";attribute=\"workgroup_size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(30 + 2, 30 + 2, 30 + 2)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"align\"",
    "result": "Error while parsing WGSL: :12:10 error: @align requires a const-expression, but expression is an override-expression\n @align(a_override) a: i32,\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(a_override)  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"binding\"",
    "result": "Error while parsing WGSL: :15:10 error: @binding requires a const-expression, but expression is an override-expression\n@binding(a_override) @group(0)\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(a_override) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"group\"",
    "result": "Error while parsing WGSL: :18:20 error: @group requires a const-expression, but expression is an override-expression\n@binding(1) @group(a_override)\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(a_override)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"id\"",
    "result": "Error while parsing WGSL: :9:5 error: @id requires a const-expression, but expression is an override-expression\n@id(a_override) override my_id: i32 = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(a_override) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"location\"",
    "result": "Error while parsing WGSL: :22:24 error: @location value requires a const-expression, but expression is an override-expression\nfn main() -> @location(a_override) vec4<f32> {\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(a_override) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"size\"",
    "result": "Error while parsing WGSL: :12:10 error: @size requires a const-expression, but expression is an override-expression\n @size(a_override) a: i32,\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(a_override) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"override\";attribute=\"workgroup_size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(a_override, a_override, a_override)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"align\"",
    "result": "Error while parsing WGSL: :12:10 error: functions cannot be called at module-scope\n @align(a_func()) a: i32,\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(a_func())  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"binding\"",
    "result": "Error while parsing WGSL: :15:10 error: functions cannot be called at module-scope\n@binding(a_func()) @group(0)\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(a_func()) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"group\"",
    "result": "Error while parsing WGSL: :18:20 error: functions cannot be called at module-scope\n@binding(1) @group(a_func())\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(a_func())\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"id\"",
    "result": "Error while parsing WGSL: :9:5 error: functions cannot be called at module-scope\n@id(a_func()) override my_id: i32 = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(a_func()) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"location\"",
    "result": "Error while parsing WGSL: :22:24 error: functions cannot be called at module-scope\nfn main() -> @location(a_func()) vec4<f32> {\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(a_func()) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"size\"",
    "result": "Error while parsing WGSL: :12:10 error: functions cannot be called at module-scope\n @size(a_func()) a: i32,\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(a_func()) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"user_func\";attribute=\"workgroup_size\"",
    "result": "Error while parsing WGSL: :27:17 error: functions cannot be called at module-scope\n@workgroup_size(a_func(), a_func(), a_func())\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(a_func(), a_func(), a_func())\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"align\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(min(4, 8))  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"binding\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(min(4, 8)) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"group\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(min(4, 8))\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"id\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(min(4, 8)) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"location\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(min(4, 8)) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(min(4, 8)) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const_func\";attribute=\"workgroup_size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(min(4, 8), min(4, 8), min(4, 8))\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"align\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n  @align(a_const)  a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"binding\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(a_const) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"group\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(a_const)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"id\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(a_const) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"location\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(a_const) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n   @size(a_const) a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(1)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,attribute:expressions:value=\"const\";attribute=\"workgroup_size\"",
    "result": "OK",
    "src": "\nfn a_func() -> i32 {\n    return 4;\n}\n\nconst a_const = -2 + 10;\noverride a_override: i32 = 2;\n\n@id(2) override my_id: i32 = 4;\n\nstruct B {\n    a: i32,\n}\n\n@binding(0) @group(0)\nvar<uniform> uniform_buffer_1: B;\n\n@binding(1) @group(1)\nvar<uniform> uniform_buffer_2: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n\n@compute\n@workgroup_size(a_const, a_const, a_const)\nfn compute_main() {}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=true;placement=\"comment\"",
    "result": "Error in calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n at APICreateErrorShaderModule2 (../../third_party/dawn/src/dawn/native/Device.cpp:1612)\n",
    "fails": true,
    "src": "// Here is a \u0000 character"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=true;placement=\"delimiter\"",
    "result": "Error in calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n at APICreateErrorShaderModule2 (../../third_party/dawn/src/dawn/native/Device.cpp:1612)\n",
    "fails": true,
    "src": "const\u0000name : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=true;placement=\"eol\"",
    "result": "Error in calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n at APICreateErrorShaderModule2 (../../third_party/dawn/src/dawn/native/Device.cpp:1612)\n",
    "fails": true,
    "src": "const name : i32 = 0;\u0000"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=false;placement=\"comment\"",
    "result": "OK",
    "src": "// Here is a Z character"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=false;placement=\"delimiter\"",
    "result": "OK",
    "src": "const name : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:null_characters:contains_null=false;placement=\"eol\"",
    "result": "OK",
    "src": "const name : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%20\",\"space\"]",
    "result": "OK",
    "src": "const ident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%5Ct\",\"horizontal_tab\"]",
    "result": "OK",
    "src": "const\tident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%5Cn\",\"line_feed\"]",
    "result": "OK",
    "src": "const\nident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%5Cu000b\",\"vertical_tab\"]",
    "result": "OK",
    "src": "const\u000bident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%5Cf\",\"form_feed\"]",
    "result": "OK",
    "src": "const\fident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%5Cr\",\"carriage_return\"]",
    "result": "OK",
    "src": "const\rident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%C2%85\",\"next_line\"]",
    "result": "OK",
    "src": "constident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%E2%80%8E\",\"left_to_right_mark\"]",
    "result": "OK",
    "src": "const‎ident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%E2%80%8F\",\"right_to_left_mark\"]",
    "result": "OK",
    "src": "const‏ident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%E2%80%A8\",\"line_separator\"]",
    "result": "OK",
    "src": "const ident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:blankspace:blankspace=[\"%E2%80%A9\",\"paragraph_separator\"]",
    "result": "OK",
    "src": "const ident : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:bom:include_bom=true",
    "result": "Error while parsing WGSL: :1:1 error: invalid character found\n﻿const name : i32 = 0;\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "﻿const name : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,blankspace:bom:include_bom=false",
    "result": "OK",
    "src": "const name : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:comments:",
    "result": "OK",
    "src": "\n/**\n * Here is my shader.\n *\n * /* I can nest /**/ comments. */\n * // I can nest line comments too.\n **/\n@fragment // This is the stage\nfn main(/*\nno\nparameters\n*/) -> @location(0) vec4<f32> {\n  return/*block_comments_delimit_tokens*/vec4<f32>(.4, .2, .3, .1);\n}/* terminated block comments are OK at EOF...*/"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_eof:",
    "result": "OK",
    "src": "\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n// line comments are OK at EOF..."
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%20\",\"space\"]",
    "result": "OK",
    "src": "// Line comment const invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Ct\",\"tab\"]",
    "result": "OK",
    "src": "// Line comment\tconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Cn\",\"line_feed\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment\nconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Cu000b\",\"vertical_tab\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment\u000bconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Cf\",\"form_feed\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment\fconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Cr\",\"carriage_return\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment\rconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%5Cr%5Cn\",\"carriage_return_line_feed\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment\r\nconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%C2%85\",\"next_line\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line commentconst invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%E2%80%A8\",\"line_separator\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment const invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:line_comment_terminators:blankspace=[\"%E2%80%A9\",\"paragraph_separator\"]",
    "result": "Error while parsing WGSL: :2:44 error: expected ';' for 'const' declaration\nconst invalid_outside_comment = should_fail\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "// Line comment const invalid_outside_comment = should_fail"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:unterminated_block_comment:terminated=true",
    "result": "OK",
    "src": "\n/**\n * Unterminated block comment.\n *\n */"
  },
  {
    "name": "webgpu:shader,validation,parse,comments:unterminated_block_comment:terminated=false",
    "result": "Error while parsing WGSL: :2:1 error: unterminated block comment\n/**\n^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n/**\n * Unterminated block comment.\n *\n "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"off\";rule=\"derivative_uniformity\";type=\"attribute\"",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"off\";rule=\"derivative_uniformity\";type=\"directive\"",
    "result": "OK",
    "src": "diagnostic(off, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"info\";rule=\"derivative_uniformity\";type=\"attribute\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"info\";rule=\"derivative_uniformity\";type=\"directive\"",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"warning\";rule=\"derivative_uniformity\";type=\"attribute\"",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"warning\";rule=\"derivative_uniformity\";type=\"directive\"",
    "result": "OK",
    "src": "diagnostic(warning, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"error\";rule=\"derivative_uniformity\";type=\"attribute\"",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_params:severity=\"error\";rule=\"derivative_uniformity\";type=\"directive\"",
    "result": "OK",
    "src": "diagnostic(error, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"none\";type=\"attribute\"",
    "result": "Error while parsing WGSL: :1:13 error: expected severity control\nDid you mean 'off'?\nPossible values: 'error', 'info', 'off', 'warning'\n@diagnostic(none, derivative_uniformity) fn foo() { }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(none, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"none\";type=\"directive\"",
    "result": "Error while parsing WGSL: :1:12 error: expected severity control\nDid you mean 'off'?\nPossible values: 'error', 'info', 'off', 'warning'\ndiagnostic(none, derivative_uniformity);\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(none, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"warn\";type=\"attribute\"",
    "result": "Error while parsing WGSL: :1:13 error: expected severity control\nDid you mean 'warning'?\nPossible values: 'error', 'info', 'off', 'warning'\n@diagnostic(warn, derivative_uniformity) fn foo() { }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(warn, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"warn\";type=\"directive\"",
    "result": "Error while parsing WGSL: :1:12 error: expected severity control\nDid you mean 'warning'?\nPossible values: 'error', 'info', 'off', 'warning'\ndiagnostic(warn, derivative_uniformity);\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(warn, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"goose\";type=\"attribute\"",
    "result": "Error while parsing WGSL: :1:13 error: expected severity control\nDid you mean 'off'?\nPossible values: 'error', 'info', 'off', 'warning'\n@diagnostic(goose, derivative_uniformity) fn foo() { }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(goose, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"goose\";type=\"directive\"",
    "result": "Error while parsing WGSL: :1:12 error: expected severity control\nDid you mean 'off'?\nPossible values: 'error', 'info', 'off', 'warning'\ndiagnostic(goose, derivative_uniformity);\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(goose, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"fatal\";type=\"attribute\"",
    "result": "Error while parsing WGSL: :1:13 error: expected severity control\nPossible values: 'error', 'info', 'off', 'warning'\n@diagnostic(fatal, derivative_uniformity) fn foo() { }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(fatal, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"fatal\";type=\"directive\"",
    "result": "Error while parsing WGSL: :1:12 error: expected severity control\nPossible values: 'error', 'info', 'off', 'warning'\ndiagnostic(fatal, derivative_uniformity);\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(fatal, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"severe\";type=\"attribute\"",
    "result": "Error while parsing WGSL: :1:13 error: expected severity control\nPossible values: 'error', 'info', 'off', 'warning'\n@diagnostic(severe, derivative_uniformity) fn foo() { }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(severe, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_severity:severity=\"severe\";type=\"directive\"",
    "result": "Error while parsing WGSL: :1:12 error: expected severity control\nPossible values: 'error', 'info', 'off', 'warning'\ndiagnostic(severe, derivative_uniformity);\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(severe, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"attribute\";rule=\"unknown\"",
    "result": "OK",
    "src": "@diagnostic(info, unknown) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"attribute\";rule=\"blahblahblah\"",
    "result": "OK",
    "src": "@diagnostic(info, blahblahblah) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"attribute\";rule=\"derivative_uniform\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniform) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"directive\";rule=\"unknown\"",
    "result": "OK",
    "src": "diagnostic(info, unknown);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"directive\";rule=\"blahblahblah\"",
    "result": "OK",
    "src": "diagnostic(info, blahblahblah);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:warning_unknown_rule:type=\"directive\";rule=\"derivative_uniform\"",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniform);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"module\" (2)",
    "result": "OK",
    "src": ";"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"module\"",
    "result": "Error while parsing WGSL: :1:41 error: expected declaration after attributes\n@diagnostic(info, derivative_uniformity);\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"function\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"compound\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"if_stmt\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"if_then\"",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"if_else\"",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"switch_stmt\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"switch_body\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"switch_default\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"switch_case\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"loop_stmt\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"loop_body\"",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"loop_continuing\"",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"while_stmt\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"while_body\"",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"for_stmt\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"attribute\";location=\"for_body\"",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"module\"",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"function\" (2)",
    "result": "OK",
    "src": " fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"function\"",
    "result": "Error while parsing WGSL: :1:41 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity) fn foo() { }\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"compound\" (2)",
    "result": "OK",
    "src": "fn foo() {  { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"compound\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_stmt\" (2)",
    "result": "OK",
    "src": "fn foo() {  if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_stmt\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_then\" (2)",
    "result": "OK",
    "src": "fn foo() { if true  { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_then\"",
    "result": "Error while parsing WGSL: :1:20 error: expected '{' for if statement\nfn foo() { if true diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_else\" (2)",
    "result": "OK",
    "src": "fn foo() { if true { } else  { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"if_else\"",
    "result": "Error while parsing WGSL: :1:29 error: expected '{' for else statement\nfn foo() { if true { } else diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_stmt\" (2)",
    "result": "OK",
    "src": "fn foo() {  switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_stmt\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_body\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0  { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_body\"",
    "result": "Error while parsing WGSL: :1:21 error: expected '{' for switch statement\nfn foo() { switch 0 diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_default\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default  { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_default\"",
    "result": "Error while parsing WGSL: :1:31 error: expected '{' for case statement\nfn foo() { switch 0 { default diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_case\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0  { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"switch_case\"",
    "result": "Error while parsing WGSL: :1:30 error: expected '{' for case statement\nfn foo() { switch 0 { case 0 diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_stmt\" (2)",
    "result": "OK",
    "src": "fn foo() {  loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_stmt\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_body\" (2)",
    "result": "OK",
    "src": "fn foo() { loop  { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_body\"",
    "result": "Error while parsing WGSL: :1:17 error: expected '{' for loop\nfn foo() { loop diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_continuing\" (2)",
    "result": "OK",
    "src": "fn foo() { loop { continuing  { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"loop_continuing\"",
    "result": "Error while parsing WGSL: :1:30 error: expected '{'\nfn foo() { loop { continuing diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"while_stmt\" (2)",
    "result": "OK",
    "src": "fn foo() {  while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"while_stmt\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"while_body\" (2)",
    "result": "OK",
    "src": "fn foo() { while true  { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"while_body\"",
    "result": "Error while parsing WGSL: :1:23 error: expected '{' for while loop\nfn foo() { while true diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"for_stmt\" (2)",
    "result": "OK",
    "src": "fn foo() {  for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"for_stmt\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"for_body\" (2)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++)  { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:valid_locations:type=\"directive\";location=\"for_body\"",
    "result": "Error while parsing WGSL: :1:41 error: expected '{' for for loop\nfn foo() { for (var i = 0; i < 10; i++) diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_var\" (2)",
    "result": "OK",
    "src": " var<private> x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_var\"",
    "result": "Error while parsing WGSL: :1:2 error: '@diagnostic' is not valid for module-scope 'var'\n@diagnostic(info, derivative_uniformity) var<private> x : u32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) var<private> x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_const\" (2)",
    "result": "OK",
    "src": " const x = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_const\"",
    "result": "Error while parsing WGSL: :1:2 error: '@diagnostic' is not valid for 'const' declaration\n@diagnostic(info, derivative_uniformity) const x = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) const x = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_override\" (2)",
    "result": "OK",
    "src": " override x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"module_override\"",
    "result": "Error while parsing WGSL: :1:2 error: '@diagnostic' is not valid for 'override' declaration\n@diagnostic(info, derivative_uniformity) override x : u32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) override x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"struct\" (2)",
    "result": "OK",
    "src": " struct S { x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"struct\"",
    "result": "Error while parsing WGSL: :1:2 error: unexpected attributes\n@diagnostic(info, derivative_uniformity) struct S { x : u32 }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) struct S { x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"struct_member\" (2)",
    "result": "OK",
    "src": " struct S {  x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"struct_member\"",
    "result": "Error while parsing WGSL: :1:14 error: '@diagnostic' is not valid for 'struct' members\n struct S { @diagnostic(info, derivative_uniformity) x : u32 }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": " struct S { @diagnostic(info, derivative_uniformity) x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_params\" (2)",
    "result": "OK",
    "src": "fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_params\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo@diagnostic(info, derivative_uniformity)() { }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo@diagnostic(info, derivative_uniformity)() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_var\" (2)",
    "result": "OK",
    "src": "fn foo() {  var x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_var\"",
    "result": "Error while parsing WGSL: :1:13 error: unexpected attributes\nfn foo() { @diagnostic(info, derivative_uniformity) var x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) var x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_let\" (2)",
    "result": "OK",
    "src": "fn foo() {  let x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_let\"",
    "result": "Error while parsing WGSL: :1:13 error: unexpected attributes\nfn foo() { @diagnostic(info, derivative_uniformity) let x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) let x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_const\" (2)",
    "result": "OK",
    "src": "fn foo() {  const x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"function_const\"",
    "result": "Error while parsing WGSL: :1:13 error: unexpected attributes\nfn foo() { @diagnostic(info, derivative_uniformity) const x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) const x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_else\" (2)",
    "result": "OK",
    "src": "fn foo() { if true { }  else { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_else\"",
    "result": "Error while parsing WGSL: :1:25 error: unexpected attributes\nfn foo() { if true { } @diagnostic(info, derivative_uniformity) else { } }\n ^^^^^^^^^^\n\n:1:65 error: expected '}' for function body\nfn foo() { if true { } @diagnostic(info, derivative_uniformity) else { } }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } @diagnostic(info, derivative_uniformity) else { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_default\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 {  default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_default\"",
    "result": "Error while parsing WGSL: :1:23 error: expected '}' for switch statement\nfn foo() { switch 0 { @diagnostic(info, derivative_uniformity) default { } } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { @diagnostic(info, derivative_uniformity) default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_case\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 {  case 0 { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_case\"",
    "result": "Error while parsing WGSL: :1:23 error: expected '}' for switch statement\nfn foo() { switch 0 { @diagnostic(info, derivative_uniformity) case 0 { } default { } } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { @diagnostic(info, derivative_uniformity) case 0 { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_continuing\" (2)",
    "result": "OK",
    "src": "fn foo() { loop {  continuing { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_continuing\"",
    "result": "Error while parsing WGSL: :1:20 error: unexpected attributes\nfn foo() { loop { @diagnostic(info, derivative_uniformity) continuing { break if true; } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { @diagnostic(info, derivative_uniformity) continuing { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_for_params\" (2)",
    "result": "OK",
    "src": "fn foo() { for  (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"attribute\";location=\"pre_for_params\"",
    "result": "Error while parsing WGSL: :1:16 error: expected '(' for for loop\nfn foo() { for @diagnostic(info, derivative_uniformity) (var i = 0; i < 10; i++) { } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for @diagnostic(info, derivative_uniformity) (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_var\" (2)",
    "result": "OK",
    "src": " var<private> x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_var\"",
    "result": "Error while parsing WGSL: :1:41 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity) var<private> x : u32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity) var<private> x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_const\" (2)",
    "result": "OK",
    "src": " const x = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_const\"",
    "result": "Error while parsing WGSL: :1:41 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity) const x = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity) const x = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_override\" (2)",
    "result": "OK",
    "src": " override x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"module_override\"",
    "result": "Error while parsing WGSL: :1:41 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity) override x : u32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity) override x : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"struct\" (2)",
    "result": "OK",
    "src": " struct S { x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"struct\"",
    "result": "Error while parsing WGSL: :1:41 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity) struct S { x : u32 }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity) struct S { x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"struct_member\" (2)",
    "result": "OK",
    "src": " struct S {  x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"struct_member\"",
    "result": "Error while parsing WGSL: :1:13 error: expected '}' for struct declaration\n struct S { diagnostic(info, derivative_uniformity) x : u32 }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": " struct S { diagnostic(info, derivative_uniformity) x : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_params\" (2)",
    "result": "OK",
    "src": "fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_params\"",
    "result": "Error while parsing WGSL: :1:22 error: expected ':' for parameter\nfn foodiagnostic(info, derivative_uniformity)() { }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foodiagnostic(info, derivative_uniformity)() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_var\" (2)",
    "result": "OK",
    "src": "fn foo() {  var x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_var\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) var x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) var x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_let\" (2)",
    "result": "OK",
    "src": "fn foo() {  let x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_let\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) let x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) let x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_const\" (2)",
    "result": "OK",
    "src": "fn foo() {  const x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"function_const\"",
    "result": "Error while parsing WGSL: :1:12 error: expected '}' for function body\nfn foo() { diagnostic(info, derivative_uniformity) const x = 0; }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { diagnostic(info, derivative_uniformity) const x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_else\" (2)",
    "result": "OK",
    "src": "fn foo() { if true { }  else { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_else\"",
    "result": "Error while parsing WGSL: :1:24 error: expected '}' for function body\nfn foo() { if true { } diagnostic(info, derivative_uniformity) else { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } diagnostic(info, derivative_uniformity) else { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_default\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 {  default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_default\"",
    "result": "Error while parsing WGSL: :1:23 error: expected '}' for switch statement\nfn foo() { switch 0 { diagnostic(info, derivative_uniformity) default { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { diagnostic(info, derivative_uniformity) default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_case\" (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 {  case 0 { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_case\"",
    "result": "Error while parsing WGSL: :1:23 error: expected '}' for switch statement\nfn foo() { switch 0 { diagnostic(info, derivative_uniformity) case 0 { } default { } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { diagnostic(info, derivative_uniformity) case 0 { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_continuing\" (2)",
    "result": "OK",
    "src": "fn foo() { loop {  continuing { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_continuing\"",
    "result": "Error while parsing WGSL: :1:19 error: expected '}' for loop\nfn foo() { loop { diagnostic(info, derivative_uniformity) continuing { break if true; } } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { diagnostic(info, derivative_uniformity) continuing { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_for_params\" (2)",
    "result": "OK",
    "src": "fn foo() { for  (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:invalid_locations:type=\"directive\";location=\"pre_for_params\"",
    "result": "Error while parsing WGSL: :1:16 error: expected '(' for for loop\nfn foo() { for diagnostic(info, derivative_uniformity) (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for diagnostic(info, derivative_uniformity) (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"off\";s2=\"off\"",
    "result": "OK",
    "src": "diagnostic(off, derivative_uniformity);\ndiagnostic(off, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"off\";s2=\"info\"",
    "result": "Error while parsing WGSL: :2:18 error: conflicting diagnostic directive\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:17 note: severity of 'derivative_uniformity' set to 'info' here\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(off, derivative_uniformity);\ndiagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"off\";s2=\"warning\"",
    "result": "Error while parsing WGSL: :2:21 error: conflicting diagnostic directive\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:17 note: severity of 'derivative_uniformity' set to 'warning' here\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(off, derivative_uniformity);\ndiagnostic(warning, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"off\";s2=\"error\"",
    "result": "Error while parsing WGSL: :2:19 error: conflicting diagnostic directive\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:17 note: severity of 'derivative_uniformity' set to 'error' here\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(off, derivative_uniformity);\ndiagnostic(error, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"info\";s2=\"off\"",
    "result": "Error while parsing WGSL: :2:17 error: conflicting diagnostic directive\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'off' here\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity);\ndiagnostic(off, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"info\";s2=\"info\"",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniformity);\ndiagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"info\";s2=\"warning\"",
    "result": "Error while parsing WGSL: :2:21 error: conflicting diagnostic directive\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'warning' here\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity);\ndiagnostic(warning, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"info\";s2=\"error\"",
    "result": "Error while parsing WGSL: :2:19 error: conflicting diagnostic directive\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'error' here\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity);\ndiagnostic(error, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"warning\";s2=\"off\"",
    "result": "Error while parsing WGSL: :2:17 error: conflicting diagnostic directive\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:21 note: severity of 'derivative_uniformity' set to 'off' here\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(warning, derivative_uniformity);\ndiagnostic(off, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"warning\";s2=\"info\"",
    "result": "Error while parsing WGSL: :2:18 error: conflicting diagnostic directive\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:21 note: severity of 'derivative_uniformity' set to 'info' here\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(warning, derivative_uniformity);\ndiagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"warning\";s2=\"warning\"",
    "result": "OK",
    "src": "diagnostic(warning, derivative_uniformity);\ndiagnostic(warning, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"warning\";s2=\"error\"",
    "result": "Error while parsing WGSL: :2:19 error: conflicting diagnostic directive\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:21 note: severity of 'derivative_uniformity' set to 'error' here\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(warning, derivative_uniformity);\ndiagnostic(error, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"error\";s2=\"off\"",
    "result": "Error while parsing WGSL: :2:17 error: conflicting diagnostic directive\ndiagnostic(off, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'off' here\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(error, derivative_uniformity);\ndiagnostic(off, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"error\";s2=\"info\"",
    "result": "Error while parsing WGSL: :2:18 error: conflicting diagnostic directive\ndiagnostic(info, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'info' here\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(error, derivative_uniformity);\ndiagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"error\";s2=\"warning\"",
    "result": "Error while parsing WGSL: :2:21 error: conflicting diagnostic directive\ndiagnostic(warning, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'warning' here\ndiagnostic(error, derivative_uniformity);\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(error, derivative_uniformity);\ndiagnostic(warning, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_directive:s1=\"error\";s2=\"error\"",
    "result": "OK",
    "src": "diagnostic(error, derivative_uniformity);\ndiagnostic(error, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:58 error: duplicate diagnostic attribute\n@diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: first attribute declared here\n@diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:59 error: conflicting diagnostic attribute\n@diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'info' here\n@diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:62 error: conflicting diagnostic attribute\n@diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'warning' here\n@diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:60 error: conflicting diagnostic attribute\n@diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:18 note: severity of 'derivative_uniformity' set to 'error' here\n@diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:59 error: conflicting diagnostic attribute\n@diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'off' here\n@diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:60 error: duplicate diagnostic attribute\n@diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: first attribute declared here\n@diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:63 error: conflicting diagnostic attribute\n@diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'warning' here\n@diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:61 error: conflicting diagnostic attribute\n@diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:19 note: severity of 'derivative_uniformity' set to 'error' here\n@diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:62 error: conflicting diagnostic attribute\n@diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:22 note: severity of 'derivative_uniformity' set to 'off' here\n@diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:63 error: conflicting diagnostic attribute\n@diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:22 note: severity of 'derivative_uniformity' set to 'info' here\n@diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:66 error: duplicate diagnostic attribute\n@diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:22 note: first attribute declared here\n@diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:64 error: conflicting diagnostic attribute\n@diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:22 note: severity of 'derivative_uniformity' set to 'error' here\n@diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:60 error: conflicting diagnostic attribute\n@diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:20 note: severity of 'derivative_uniformity' set to 'off' here\n@diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:61 error: conflicting diagnostic attribute\n@diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:20 note: severity of 'derivative_uniformity' set to 'info' here\n@diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:64 error: conflicting diagnostic attribute\n@diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:20 note: severity of 'derivative_uniformity' set to 'warning' here\n@diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=true",
    "result": "Error while parsing WGSL: :1:62 error: duplicate diagnostic attribute\n@diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:20 note: first attribute declared here\n@diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (2)",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (3)",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (4)",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (5)",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (6)",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (7)",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (8)",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (9)",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (10)",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (11)",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (12)",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (13)",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (14)",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (15)",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false (16)",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"function\";same_rule=false",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"compound\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_stmt\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) if true { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:37 note: first attribute declared here\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:78 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:37 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:37 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:37 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:78 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:79 error: duplicate diagnostic attribute\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: first attribute declared here\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:85 error: duplicate diagnostic attribute\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: first attribute declared here\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=true",
    "result": "Error while parsing WGSL: :1:81 error: duplicate diagnostic attribute\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: first attribute declared here\nfn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_then\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { if true @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:86 error: duplicate diagnostic attribute\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:46 note: first attribute declared here\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:87 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:46 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:46 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:46 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:87 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:88 error: duplicate diagnostic attribute\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: first attribute declared here\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:94 error: duplicate diagnostic attribute\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: first attribute declared here\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=true",
    "result": "Error while parsing WGSL: :1:90 error: duplicate diagnostic attribute\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: first attribute declared here\nfn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"if_else\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { if true { } else @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_stmt\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) switch 0 { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:78 error: duplicate diagnostic attribute\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: first attribute declared here\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:80 error: duplicate diagnostic attribute\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: first attribute declared here\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:39 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:86 error: duplicate diagnostic attribute\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: first attribute declared here\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:84 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:84 error: conflicting diagnostic attribute\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=true",
    "result": "Error while parsing WGSL: :1:82 error: duplicate diagnostic attribute\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: first attribute declared here\nfn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_body\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:88 error: duplicate diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: first attribute declared here\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:90 error: duplicate diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: first attribute declared here\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:52 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:52 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:96 error: duplicate diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:52 note: first attribute declared here\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:94 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:52 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:94 error: conflicting diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=true",
    "result": "Error while parsing WGSL: :1:92 error: duplicate diagnostic attribute\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:50 note: first attribute declared here\nfn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_default\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { switch 0 { default @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:87 error: duplicate diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: first attribute declared here\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:89 error: duplicate diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: first attribute declared here\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:95 error: duplicate diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: first attribute declared here\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=true",
    "result": "Error while parsing WGSL: :1:91 error: duplicate diagnostic attribute\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: first attribute declared here\nfn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"switch_case\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_stmt\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) loop { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:74 error: duplicate diagnostic attribute\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:34 note: first attribute declared here\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:34 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:78 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:34 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:76 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:34 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:35 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:76 error: duplicate diagnostic attribute\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:35 note: first attribute declared here\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:35 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:77 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:35 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:78 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:79 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:82 error: duplicate diagnostic attribute\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: first attribute declared here\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:38 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:76 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:36 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:77 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:36 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:80 error: conflicting diagnostic attribute\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:36 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=true",
    "result": "Error while parsing WGSL: :1:78 error: duplicate diagnostic attribute\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:36 note: first attribute declared here\nfn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_body\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { loop @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:87 error: duplicate diagnostic attribute\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: first attribute declared here\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:47 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:88 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:89 error: duplicate diagnostic attribute\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: first attribute declared here\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:48 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:91 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:92 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:95 error: duplicate diagnostic attribute\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: first attribute declared here\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:51 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:89 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:90 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:93 error: conflicting diagnostic attribute\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=true",
    "result": "Error while parsing WGSL: :1:91 error: duplicate diagnostic attribute\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:49 note: first attribute declared here\nfn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"loop_continuing\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { loop { continuing @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break if true; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_stmt\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) while true { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:80 error: duplicate diagnostic attribute\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: first attribute declared here\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:84 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:40 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:81 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:82 error: duplicate diagnostic attribute\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: first attribute declared here\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:85 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:41 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:84 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:44 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:85 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:44 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:88 error: duplicate diagnostic attribute\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:44 note: first attribute declared here\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:86 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:44 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:82 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:83 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:86 error: conflicting diagnostic attribute\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=true",
    "result": "Error while parsing WGSL: :1:84 error: duplicate diagnostic attribute\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:42 note: first attribute declared here\nfn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"while_body\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { while true @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:69 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: first attribute declared here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:29 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:70 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:71 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: first attribute declared here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:30 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:73 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:74 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:77 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: first attribute declared here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:33 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:71 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:72 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:75 error: conflicting diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=true",
    "result": "Error while parsing WGSL: :1:73 error: duplicate diagnostic attribute\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:31 note: first attribute declared here\nfn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_stmt\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) for (var i = 0; i < 10; i++) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (2)",
    "result": "Error while parsing WGSL: :1:98 error: duplicate diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:58 note: first attribute declared here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (3)",
    "result": "Error while parsing WGSL: :1:99 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:58 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (4)",
    "result": "Error while parsing WGSL: :1:102 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:58 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (5)",
    "result": "Error while parsing WGSL: :1:100 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:58 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (6)",
    "result": "Error while parsing WGSL: :1:99 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:59 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (7)",
    "result": "Error while parsing WGSL: :1:100 error: duplicate diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:59 note: first attribute declared here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (8)",
    "result": "Error while parsing WGSL: :1:103 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:59 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (9)",
    "result": "Error while parsing WGSL: :1:101 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:59 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (10)",
    "result": "Error while parsing WGSL: :1:102 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:62 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (11)",
    "result": "Error while parsing WGSL: :1:103 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:62 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (12)",
    "result": "Error while parsing WGSL: :1:106 error: duplicate diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:62 note: first attribute declared here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (13)",
    "result": "Error while parsing WGSL: :1:104 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:62 note: severity of 'derivative_uniformity' set to 'error' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (14)",
    "result": "Error while parsing WGSL: :1:100 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:60 note: severity of 'derivative_uniformity' set to 'off' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (15)",
    "result": "Error while parsing WGSL: :1:101 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:60 note: severity of 'derivative_uniformity' set to 'info' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true (16)",
    "result": "Error while parsing WGSL: :1:104 error: conflicting diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:60 note: severity of 'derivative_uniformity' set to 'warning' here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=true",
    "result": "Error while parsing WGSL: :1:102 error: duplicate diagnostic attribute\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n:1:60 note: first attribute declared here\nfn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }\n ^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (2)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (3)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (4)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (5)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (6)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (7)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (8)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (9)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (10)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (11)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (12)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (13)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (14)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(off, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (15)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(info, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false (16)",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(warning, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:duplicate_attribute_same_location:loc=\"for_body\";same_rule=false",
    "result": "OK",
    "src": "fn foo() { for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) @diagnostic(error, another_diagnostic_rule) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) fn foo() { @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) fn foo() { @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "@diagnostic(off, derivative_uniformity) fn foo() { @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) fn foo() { @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) fn foo() { @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "@diagnostic(info, derivative_uniformity) fn foo() { @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) fn foo() { @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) fn foo() { @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "@diagnostic(warning, derivative_uniformity) fn foo() { @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) fn foo() { @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) fn foo() { @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"compound\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "@diagnostic(error, derivative_uniformity) fn foo() { @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) if true @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) if true @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"info\";s2=\"off\" (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) if true @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) if true @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) if true @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) if true @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) if true @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) if true @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) if true @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"error\";s2=\"info\" (2)",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) if true @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) if true @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"if_stmt\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) if true @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) switch 0 @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) switch 0 @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) switch 0 @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) switch 0 @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) switch 0 @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) switch 0 @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) switch 0 @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) switch 0 @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) switch 0 @diagnostic(error, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) switch 0 @diagnostic(off, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) switch 0 @diagnostic(info, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_stmt\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) switch 0 @diagnostic(warning, derivative_uniformity) { default { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) { default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) { default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(off, derivative_uniformity) { default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) { default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) { default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(info, derivative_uniformity) { default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) { default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) { default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(warning, derivative_uniformity) { default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) { default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) { default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_body\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 @diagnostic(error, derivative_uniformity) { default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) { } default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) { } default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(off, derivative_uniformity) { } default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) { } default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) { } default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(info, derivative_uniformity) { } default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) { } default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) { } default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(warning, derivative_uniformity) { } default @diagnostic(error, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) { } default @diagnostic(off, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) { } default @diagnostic(info, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"switch_case\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { switch 0 { case 0 @diagnostic(error, derivative_uniformity) { } default @diagnostic(warning, derivative_uniformity) { } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) loop @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) loop @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) loop @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) loop @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) loop @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) loop @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) loop @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) loop @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) loop @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) loop @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) loop @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"loop_stmt\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) loop @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) while true @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) while true @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) while true @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) while true @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) while true @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) while true @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) while true @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) while true @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) while true @diagnostic(error, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) while true @diagnostic(off, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) while true @diagnostic(info, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"while_stmt\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) while true @diagnostic(warning, derivative_uniformity) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"off\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"off\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"off\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(off, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"info\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"info\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"info\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(info, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"warning\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"warning\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"warning\";s2=\"error\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(warning, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(error, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"error\";s2=\"off\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(off, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"error\";s2=\"info\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(info, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:conflicting_attribute_different_location:loc=\"for_stmt\";s1=\"error\";s2=\"warning\"",
    "result": "OK",
    "src": "fn foo() { @diagnostic(error, derivative_uniformity) for (var i = 0; i < 10; i++) @diagnostic(warning, derivative_uniformity) { } }"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:after_other_directives:directive=\"enable%20f16\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;diagnostic(info, derivative_uniformity);\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:after_other_directives:directive=\"requires%20readonly_and_readwrite_storage_textures\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"override_global_off\"",
    "result": "OK",
    "src": "\n    diagnostic(error, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(off, derivative_uniformity)\n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n}\n;\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"override_global_on\"",
    "result": "Error while parsing WGSL: :13:13 error: 'textureSample' must only be called from uniform control flow\n _ = textureSample(t,s,0.0);\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:12:7 note: control flow depends on possibly non-uniform value\n if non_uniform_cond {\n ^^\n\n:12:10 note: reading from module-scope private variable 'non_uniform_cond' may result in a non-uniform value\n if non_uniform_cond {\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    diagnostic(off, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(error, derivative_uniformity)\n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"override_global_warn\"",
    "result": "OK",
    "src": "\n    diagnostic(error, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(warning, derivative_uniformity)\n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"global_if_nothing_else_warn\"",
    "result": "OK",
    "src": "\n    diagnostic(warning, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"deepest_nesting_warn\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(error, derivative_uniformity)\n      if non_uniform_cond {\n        @diagnostic(warning, derivative_uniformity)\n        if non_uniform_cond {\n          _ = textureSample(t,s,0.0);\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"deepest_nesting_off\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(error, derivative_uniformity)\n      if non_uniform_cond {\n        @diagnostic(off, derivative_uniformity)\n        if non_uniform_cond {\n          _ = textureSample(t,s,0.0);\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"deepest_nesting_error\"",
    "result": "Error while parsing WGSL: :13:15 error: 'textureSample' must only be called from uniform control flow\n _ = textureSample(t,s,0.0);\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:12:9 note: control flow depends on possibly non-uniform value\n if non_uniform_cond {\n ^^\n\n:12:12 note: reading from module-scope private variable 'non_uniform_cond' may result in a non-uniform value\n if non_uniform_cond {\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(off, derivative_uniformity)\n      if non_uniform_cond {\n        @diagnostic(error, derivative_uniformity)\n        if non_uniform_cond {\n          _ = textureSample(t,s,0.0);\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"other_nest_unaffected\"",
    "result": "OK",
    "src": "\n    diagnostic(warning, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(off, derivative_uniformity)\n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n      if non_uniform_cond {\n        _ = textureSample(t,s,0.0);\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"deeper_nest_no_effect\"",
    "result": "Error while parsing WGSL: :15:13 error: 'textureSample' must only be called from uniform control flow\n _ = textureSample(t,s,0.0);\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:11:7 note: control flow depends on possibly non-uniform value\n if non_uniform_cond {\n ^^\n\n:11:10 note: reading from module-scope private variable 'non_uniform_cond' may result in a non-uniform value\n if non_uniform_cond {\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    diagnostic(error, derivative_uniformity);\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      if non_uniform_cond {\n        @diagnostic(off, derivative_uniformity)\n        if non_uniform_cond {\n        }\n        _ = textureSample(t,s,0.0);\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"call_unaffected_error\"",
    "result": "Error while parsing WGSL: :3:20 error: 'textureSample' must only be called from uniform control flow\n fn foo() { _ = textureSample(t,s,0.0); }\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:14:9 note: called by 'foo' from 'main'\n foo();\n ^^^\n\n:13:7 note: control flow depends on possibly non-uniform value\n if non_uniform_cond {\n ^^\n\n:13:10 note: reading from module-scope private variable 'non_uniform_cond' may result in a non-uniform value\n if non_uniform_cond {\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    diagnostic(error, derivative_uniformity);\n    fn foo() { _ = textureSample(t,s,0.0); }\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(off, derivative_uniformity)\n      if non_uniform_cond {\n        foo();\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"call_unaffected_warn\"",
    "result": "OK",
    "src": "\n    diagnostic(warning, derivative_uniformity);\n    fn foo() { _ = textureSample(t,s,0.0); }\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(off, derivative_uniformity)\n      if non_uniform_cond {\n        foo();\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"call_unaffected_off\"",
    "result": "OK",
    "src": "\n    diagnostic(off, derivative_uniformity);\n    fn foo() { _ = textureSample(t,s,0.0); }\n    \n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      @diagnostic(error, derivative_uniformity)\n      if non_uniform_cond {\n        foo();\n      }\n}\n\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"if_condition_error\"",
    "result": "Error while parsing WGSL: :11:12 error: 'textureSample' must only be called from uniform control flow\n if textureSample(t,s,non_uniform_coord).x > 0.0\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:9:7 note: control flow depends on possibly non-uniform value\n if (non_uniform_cond) {\n ^^\n\n:9:11 note: reading from module-scope private variable 'non_uniform_cond' may result in a non-uniform value\n if (non_uniform_cond) {\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      if (non_uniform_cond) {\n        @diagnostic(error, derivative_uniformity)\n        if textureSample(t,s,non_uniform_coord).x > 0.0\n          @diagnostic(off, derivative_uniformity) {\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"if_condition_warn\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      if non_uniform_cond {\n        @diagnostic(warning, derivative_uniformity)\n        if textureSample(t,s,non_uniform_coord).x > 0.0\n          @diagnostic(error, derivative_uniformity) {\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"if_condition_off\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n      if non_uniform_cond {\n        @diagnostic(off, derivative_uniformity)\n        if textureSample(t,s,non_uniform_coord).x > 0.0\n          @diagnostic(error, derivative_uniformity) {\n        }\n      }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"switch_error\"",
    "result": "Error while parsing WGSL: :14:17 error: 'textureSample' must only be called from uniform control flow\n _ = textureSample(t,s,0.0);\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:10:9 note: control flow depends on possibly non-uniform value\n switch non_uniform_val {\n ^^^^^^\n\n:10:16 note: reading from module-scope private variable 'non_uniform_val' may result in a non-uniform value\n switch non_uniform_val {\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n        @diagnostic(error, derivative_uniformity)\n        switch non_uniform_val {\n          case 0 @diagnostic(off, derivative_uniformity) {\n          }\n          default {\n            _ = textureSample(t,s,0.0);\n          }\n        }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"switch_warn\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n        @diagnostic(warning, derivative_uniformity)\n        switch non_uniform_val {\n          case 0 @diagnostic(off, derivative_uniformity) {\n          }\n          default {\n            _ = textureSample(t,s,0.0);\n          }\n        }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,diagnostic:diagnostic_scoping:case=\"switch_off\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t : texture_1d<f32>;\n@group(0) @binding(1) var s : sampler;\nvar<private> non_uniform_cond : bool;\nvar<private> non_uniform_coord : f32;\nvar<private> non_uniform_val : u32;\n@fragment fn main() {\n  \n        @diagnostic(off, derivative_uniformity)\n        switch non_uniform_val {\n          case 0 @diagnostic(error, derivative_uniformity){\n          }\n          default {\n            _ = textureSample(t,s,0.0);\n          }\n        }\n}\n"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"f16\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"decl_before\"",
    "result": "Error while parsing WGSL: :2:1 error: directives must come before all global declarations\nenable f16;\n^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias i = i32;\nenable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"decl_after\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;\nalias i = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"requires_before\"",
    "result": "Error while parsing WGSL: :2:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "requires readonly_and_readwrite_storage_textures;\nenable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"diagnostic_before\"",
    "result": "Error while parsing WGSL: :2:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity);\nenable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"const_assert_before\"",
    "result": "Error while parsing WGSL: :2:1 error: directives must come before all global declarations\nenable f16;\n^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const_assert 1 == 1;\nenable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"const_assert_after\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;\nconst_assert 1 == 1;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"embedded_comment\"",
    "result": "Error while parsing WGSL: :3:10 error: extension 'f16' is not allowed in the current environment\n*/enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "/* comment\n\n*/enable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"parens\"",
    "result": "Error while parsing WGSL: :1:7 error: enable directives don't take parenthesis\nenable(f16);\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable(f16);"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"multi_line\"",
    "result": "Error while parsing WGSL: :2:1 error: extension 'f16' is not allowed in the current environment\nf16;\n^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable\nf16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"multiple_enables\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;\nenable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"multiple_entries\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16, f16, f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16, f16, f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"unknown\"",
    "result": "Error while parsing WGSL: :1:8 error: expected extension\nPossible values: 'clip_distances', 'dual_source_blending', 'f16', 'subgroups', 'subgroups_f16'\nenable unknown;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable unknown;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"subgroups\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'subgroups' is not allowed in the current environment\nenable subgroups;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable subgroups;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"subgroups_f16_fail\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'subgroups_f16' is not allowed in the current environment\nenable subgroups_f16;\n ^^^^^^^^^^^^^\n\n:1:8 error: extension 'subgroups_f16' cannot be used without extension 'subgroups'\nenable subgroups_f16;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable subgroups_f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"subgroups_f16_pass1\"",
    "result": "Error while parsing WGSL: :2:12 error: extension 'subgroups_f16' is not allowed in the current environment\n enable subgroups_f16;\n ^^^^^^^^^^^^^\n\n:2:12 error: extension 'subgroups_f16' cannot be used without extension 'subgroups'\n enable subgroups_f16;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    enable subgroups_f16;\n    enable subgroups;\n    enable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,enable:enable:case=\"subgroups_f16_pass2\"",
    "result": "Error while parsing WGSL: :2:12 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    enable f16;\n    enable subgroups;\n    enable subgroups_f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo\"",
    "result": "OK",
    "src": "var<private> foo : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"Foo\"",
    "result": "OK",
    "src": "var<private> Foo : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"FOO\"",
    "result": "OK",
    "src": "var<private> FOO : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"_0\"",
    "result": "OK",
    "src": "var<private> _0 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "var<private> _foo0 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "var<private> _0foo : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "var<private> foo__0 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "var<private> Δέλτα : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "var<private> réflexion : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "var<private> Кызыл : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "var<private> 𐰓𐰏𐰇 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "var<private> 朝焼け : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "var<private> سلام : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "var<private> 검정 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "var<private> שָׁלוֹם : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "var<private> गुलाबी : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "var<private> փիրուզ : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"array\"",
    "result": "OK",
    "src": "var<private> array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"atomic\"",
    "result": "OK",
    "src": "var<private> atomic : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"bool\"",
    "result": "OK",
    "src": "var<private> bool : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"bf16\"",
    "result": "OK",
    "src": "var<private> bf16 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "var<private> bitcast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"f32\"",
    "result": "OK",
    "src": "var<private> f32 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"f16\"",
    "result": "OK",
    "src": "var<private> f16 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"f64\"",
    "result": "OK",
    "src": "var<private> f64 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"i32\"",
    "result": "OK",
    "src": "var<private> i32 : u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"i16\"",
    "result": "OK",
    "src": "var<private> i16 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"i64\"",
    "result": "OK",
    "src": "var<private> i64 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"i8\"",
    "result": "OK",
    "src": "var<private> i8 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "var<private> mat2x2 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "var<private> mat2x3 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "var<private> mat2x4 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "var<private> mat3x2 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "var<private> mat3x3 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "var<private> mat3x4 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "var<private> mat4x2 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "var<private> mat4x3 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "var<private> mat4x4 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"ptr\"",
    "result": "OK",
    "src": "var<private> ptr : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"quat\"",
    "result": "OK",
    "src": "var<private> quat : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"sampler\"",
    "result": "OK",
    "src": "var<private> sampler : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "var<private> sampler_comparison : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"signed\"",
    "result": "OK",
    "src": "var<private> signed : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "var<private> texture_1d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "var<private> texture_2d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "var<private> texture_2d_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "var<private> texture_3d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "var<private> texture_cube : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "var<private> texture_cube_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "var<private> texture_multisampled_2d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "var<private> texture_storage_1d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "var<private> texture_storage_2d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "var<private> texture_storage_2d_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "var<private> texture_storage_3d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "var<private> texture_depth_2d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "var<private> texture_depth_2d_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "var<private> texture_depth_cube : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "var<private> texture_depth_cube_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "var<private> texture_depth_multisampled_2d : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"u32\"",
    "result": "OK",
    "src": "var<private> u32 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"u16\"",
    "result": "OK",
    "src": "var<private> u16 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"u64\"",
    "result": "OK",
    "src": "var<private> u64 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"u8\"",
    "result": "OK",
    "src": "var<private> u8 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "var<private> unsigned : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"vec2\"",
    "result": "OK",
    "src": "var<private> vec2 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"vec3\"",
    "result": "OK",
    "src": "var<private> vec3 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"vec4\"",
    "result": "OK",
    "src": "var<private> vec4 : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> _ : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> _ : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:14 error: identifiers must not start with two or more underscores\nvar<private> __ : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> __ : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:14 error: identifiers must not start with two or more underscores\nvar<private> __foo : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> __foo : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> 0foo : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> 0foo : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo.bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo.bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo-bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo-bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo+bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo+bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:17 error: invalid character found\nvar<private> foo#bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo#bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo!bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo!bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:17 error: invalid character found\nvar<private> foo\\bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo\\bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo/bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo/bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo,bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo,bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for variable declaration\nvar<private> foo@bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo@bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:18 error: invalid type for variable declaration\nvar<private> foo::bar : i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> foo::bar : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> alias : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> alias : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> break : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> break : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> case : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> case : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> const : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> const : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> const_assert : i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> const_assert : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> continue : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> continue : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> continuing : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> continuing : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> default : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> default : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> diagnostic : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> diagnostic : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> discard : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> discard : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> else : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> else : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> enable : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> enable : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> false : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> false : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> fn : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> fn : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> for : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> for : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> if : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> if : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> let : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> let : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> loop : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> loop : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> override : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> override : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> requires : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> requires : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> return : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> return : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> struct : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> struct : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> switch : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> switch : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> true : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> true : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> var : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> var : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> while : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> while : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:14 error: 'NULL' is a reserved keyword\nvar<private> NULL : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> NULL : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:14 error: 'Self' is a reserved keyword\nvar<private> Self : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> Self : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:14 error: 'abstract' is a reserved keyword\nvar<private> abstract : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> abstract : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:14 error: 'active' is a reserved keyword\nvar<private> active : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> active : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:14 error: 'alignas' is a reserved keyword\nvar<private> alignas : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> alignas : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:14 error: 'alignof' is a reserved keyword\nvar<private> alignof : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> alignof : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:14 error: 'as' is a reserved keyword\nvar<private> as : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> as : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:14 error: 'asm' is a reserved keyword\nvar<private> asm : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> asm : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:14 error: 'asm_fragment' is a reserved keyword\nvar<private> asm_fragment : i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> asm_fragment : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:14 error: 'async' is a reserved keyword\nvar<private> async : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> async : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:14 error: 'attribute' is a reserved keyword\nvar<private> attribute : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> attribute : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:14 error: 'auto' is a reserved keyword\nvar<private> auto : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> auto : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:14 error: 'await' is a reserved keyword\nvar<private> await : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> await : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:14 error: 'become' is a reserved keyword\nvar<private> become : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> become : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:14 error: 'binding_array' is a reserved keyword\nvar<private> binding_array : i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> binding_array : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:14 error: 'cast' is a reserved keyword\nvar<private> cast : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> cast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:14 error: 'catch' is a reserved keyword\nvar<private> catch : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> catch : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:14 error: 'class' is a reserved keyword\nvar<private> class : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> class : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:14 error: 'co_await' is a reserved keyword\nvar<private> co_await : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> co_await : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:14 error: 'co_return' is a reserved keyword\nvar<private> co_return : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> co_return : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:14 error: 'co_yield' is a reserved keyword\nvar<private> co_yield : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> co_yield : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:14 error: 'coherent' is a reserved keyword\nvar<private> coherent : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> coherent : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:14 error: 'column_major' is a reserved keyword\nvar<private> column_major : i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> column_major : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:14 error: 'common' is a reserved keyword\nvar<private> common : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> common : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:14 error: 'compile' is a reserved keyword\nvar<private> compile : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> compile : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:14 error: 'compile_fragment' is a reserved keyword\nvar<private> compile_fragment : i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> compile_fragment : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:14 error: 'concept' is a reserved keyword\nvar<private> concept : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> concept : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:14 error: 'const_cast' is a reserved keyword\nvar<private> const_cast : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> const_cast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:14 error: 'consteval' is a reserved keyword\nvar<private> consteval : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> consteval : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:14 error: 'constexpr' is a reserved keyword\nvar<private> constexpr : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> constexpr : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:14 error: 'constinit' is a reserved keyword\nvar<private> constinit : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> constinit : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:14 error: 'crate' is a reserved keyword\nvar<private> crate : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> crate : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:14 error: 'debugger' is a reserved keyword\nvar<private> debugger : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> debugger : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:14 error: 'decltype' is a reserved keyword\nvar<private> decltype : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> decltype : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:14 error: 'delete' is a reserved keyword\nvar<private> delete : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> delete : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:14 error: 'demote' is a reserved keyword\nvar<private> demote : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> demote : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:14 error: 'demote_to_helper' is a reserved keyword\nvar<private> demote_to_helper : i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> demote_to_helper : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:14 error: 'do' is a reserved keyword\nvar<private> do : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> do : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:14 error: 'dynamic_cast' is a reserved keyword\nvar<private> dynamic_cast : i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> dynamic_cast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:14 error: 'enum' is a reserved keyword\nvar<private> enum : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> enum : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:14 error: 'explicit' is a reserved keyword\nvar<private> explicit : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> explicit : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:14 error: 'export' is a reserved keyword\nvar<private> export : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> export : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:14 error: 'extends' is a reserved keyword\nvar<private> extends : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> extends : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:14 error: 'extern' is a reserved keyword\nvar<private> extern : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> extern : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:14 error: 'external' is a reserved keyword\nvar<private> external : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> external : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:14 error: expected identifier for variable declaration\nvar<private> fallthrough : i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> fallthrough : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:14 error: 'filter' is a reserved keyword\nvar<private> filter : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> filter : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:14 error: 'final' is a reserved keyword\nvar<private> final : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> final : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:14 error: 'finally' is a reserved keyword\nvar<private> finally : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> finally : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:14 error: 'friend' is a reserved keyword\nvar<private> friend : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> friend : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:14 error: 'from' is a reserved keyword\nvar<private> from : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> from : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:14 error: 'fxgroup' is a reserved keyword\nvar<private> fxgroup : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> fxgroup : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:14 error: 'get' is a reserved keyword\nvar<private> get : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> get : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:14 error: 'goto' is a reserved keyword\nvar<private> goto : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> goto : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:14 error: 'groupshared' is a reserved keyword\nvar<private> groupshared : i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> groupshared : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:14 error: 'highp' is a reserved keyword\nvar<private> highp : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> highp : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:14 error: 'impl' is a reserved keyword\nvar<private> impl : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> impl : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:14 error: 'implements' is a reserved keyword\nvar<private> implements : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> implements : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:14 error: 'import' is a reserved keyword\nvar<private> import : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> import : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:14 error: 'inline' is a reserved keyword\nvar<private> inline : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> inline : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:14 error: 'instanceof' is a reserved keyword\nvar<private> instanceof : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> instanceof : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:14 error: 'interface' is a reserved keyword\nvar<private> interface : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> interface : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:14 error: 'layout' is a reserved keyword\nvar<private> layout : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> layout : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:14 error: 'lowp' is a reserved keyword\nvar<private> lowp : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> lowp : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:14 error: 'macro' is a reserved keyword\nvar<private> macro : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> macro : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:14 error: 'macro_rules' is a reserved keyword\nvar<private> macro_rules : i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> macro_rules : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:14 error: 'match' is a reserved keyword\nvar<private> match : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> match : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:14 error: 'mediump' is a reserved keyword\nvar<private> mediump : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> mediump : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:14 error: 'meta' is a reserved keyword\nvar<private> meta : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> meta : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:14 error: 'mod' is a reserved keyword\nvar<private> mod : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> mod : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:14 error: 'module' is a reserved keyword\nvar<private> module : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> module : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:14 error: 'move' is a reserved keyword\nvar<private> move : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> move : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:14 error: 'mut' is a reserved keyword\nvar<private> mut : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> mut : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:14 error: 'mutable' is a reserved keyword\nvar<private> mutable : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> mutable : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:14 error: 'namespace' is a reserved keyword\nvar<private> namespace : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> namespace : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:14 error: 'new' is a reserved keyword\nvar<private> new : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> new : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:14 error: 'nil' is a reserved keyword\nvar<private> nil : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> nil : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:14 error: 'noexcept' is a reserved keyword\nvar<private> noexcept : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> noexcept : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:14 error: 'noinline' is a reserved keyword\nvar<private> noinline : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> noinline : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:14 error: 'nointerpolation' is a reserved keyword\nvar<private> nointerpolation : i32;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> nointerpolation : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "var<private> non_coherent : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "var<private> noncoherent : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:14 error: 'noperspective' is a reserved keyword\nvar<private> noperspective : i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> noperspective : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:14 error: 'null' is a reserved keyword\nvar<private> null : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> null : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:14 error: 'nullptr' is a reserved keyword\nvar<private> nullptr : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> nullptr : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:14 error: 'of' is a reserved keyword\nvar<private> of : i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> of : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:14 error: 'operator' is a reserved keyword\nvar<private> operator : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> operator : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:14 error: 'package' is a reserved keyword\nvar<private> package : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> package : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:14 error: 'packoffset' is a reserved keyword\nvar<private> packoffset : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> packoffset : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:14 error: 'partition' is a reserved keyword\nvar<private> partition : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> partition : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:14 error: 'pass' is a reserved keyword\nvar<private> pass : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> pass : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:14 error: 'patch' is a reserved keyword\nvar<private> patch : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> patch : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:14 error: 'pixelfragment' is a reserved keyword\nvar<private> pixelfragment : i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> pixelfragment : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:14 error: 'precise' is a reserved keyword\nvar<private> precise : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> precise : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:14 error: 'precision' is a reserved keyword\nvar<private> precision : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> precision : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:14 error: 'premerge' is a reserved keyword\nvar<private> premerge : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> premerge : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:14 error: 'priv' is a reserved keyword\nvar<private> priv : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> priv : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:14 error: 'protected' is a reserved keyword\nvar<private> protected : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> protected : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:14 error: 'pub' is a reserved keyword\nvar<private> pub : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> pub : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:14 error: 'public' is a reserved keyword\nvar<private> public : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> public : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:14 error: 'readonly' is a reserved keyword\nvar<private> readonly : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> readonly : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:14 error: 'ref' is a reserved keyword\nvar<private> ref : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> ref : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:14 error: 'regardless' is a reserved keyword\nvar<private> regardless : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> regardless : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:14 error: 'register' is a reserved keyword\nvar<private> register : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> register : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:14 error: 'reinterpret_cast' is a reserved keyword\nvar<private> reinterpret_cast : i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> reinterpret_cast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:14 error: 'require' is a reserved keyword\nvar<private> require : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> require : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:14 error: 'resource' is a reserved keyword\nvar<private> resource : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> resource : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:14 error: 'restrict' is a reserved keyword\nvar<private> restrict : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> restrict : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:14 error: 'self' is a reserved keyword\nvar<private> self : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> self : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:14 error: 'set' is a reserved keyword\nvar<private> set : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> set : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:14 error: 'shared' is a reserved keyword\nvar<private> shared : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> shared : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:14 error: 'sizeof' is a reserved keyword\nvar<private> sizeof : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> sizeof : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:14 error: 'smooth' is a reserved keyword\nvar<private> smooth : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> smooth : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:14 error: 'snorm' is a reserved keyword\nvar<private> snorm : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> snorm : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:14 error: 'static' is a reserved keyword\nvar<private> static : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> static : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:14 error: 'static_assert' is a reserved keyword\nvar<private> static_assert : i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> static_assert : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:14 error: 'static_cast' is a reserved keyword\nvar<private> static_cast : i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> static_cast : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:14 error: 'std' is a reserved keyword\nvar<private> std : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> std : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:14 error: 'subroutine' is a reserved keyword\nvar<private> subroutine : i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> subroutine : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:14 error: 'super' is a reserved keyword\nvar<private> super : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> super : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:14 error: 'target' is a reserved keyword\nvar<private> target : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> target : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:14 error: 'template' is a reserved keyword\nvar<private> template : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> template : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:14 error: 'this' is a reserved keyword\nvar<private> this : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> this : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:14 error: 'thread_local' is a reserved keyword\nvar<private> thread_local : i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> thread_local : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:14 error: 'throw' is a reserved keyword\nvar<private> throw : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> throw : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:14 error: 'trait' is a reserved keyword\nvar<private> trait : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> trait : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:14 error: 'try' is a reserved keyword\nvar<private> try : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> try : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:14 error: 'type' is a reserved keyword\nvar<private> type : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> type : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:14 error: 'typedef' is a reserved keyword\nvar<private> typedef : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> typedef : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:14 error: 'typeid' is a reserved keyword\nvar<private> typeid : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> typeid : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:14 error: 'typename' is a reserved keyword\nvar<private> typename : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> typename : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:14 error: 'typeof' is a reserved keyword\nvar<private> typeof : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> typeof : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:14 error: 'union' is a reserved keyword\nvar<private> union : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> union : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:14 error: 'unless' is a reserved keyword\nvar<private> unless : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> unless : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:14 error: 'unorm' is a reserved keyword\nvar<private> unorm : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> unorm : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:14 error: 'unsafe' is a reserved keyword\nvar<private> unsafe : i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> unsafe : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:14 error: 'unsized' is a reserved keyword\nvar<private> unsized : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> unsized : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:14 error: 'use' is a reserved keyword\nvar<private> use : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> use : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:14 error: 'using' is a reserved keyword\nvar<private> using : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> using : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:14 error: 'varying' is a reserved keyword\nvar<private> varying : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> varying : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:14 error: 'virtual' is a reserved keyword\nvar<private> virtual : i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> virtual : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:14 error: 'volatile' is a reserved keyword\nvar<private> volatile : i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> volatile : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:14 error: 'wgsl' is a reserved keyword\nvar<private> wgsl : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> wgsl : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:14 error: 'where' is a reserved keyword\nvar<private> where : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> where : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:14 error: 'with' is a reserved keyword\nvar<private> with : i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> with : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:14 error: 'writeonly' is a reserved keyword\nvar<private> writeonly : i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> writeonly : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_var_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:14 error: 'yield' is a reserved keyword\nvar<private> yield : i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> yield : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo\"",
    "result": "OK",
    "src": "const foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"Foo\"",
    "result": "OK",
    "src": "const Foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"FOO\"",
    "result": "OK",
    "src": "const FOO : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"_0\"",
    "result": "OK",
    "src": "const _0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "const _foo0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "const _0foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "const foo__0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "const Δέλτα : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "const réflexion : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "const Кызыл : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "const 𐰓𐰏𐰇 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "const 朝焼け : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "const سلام : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "const 검정 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "const שָׁלוֹם : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "const गुलाबी : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "const փիրուզ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"array\"",
    "result": "OK",
    "src": "const array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"atomic\"",
    "result": "OK",
    "src": "const atomic : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"bool\"",
    "result": "OK",
    "src": "const bool : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"bf16\"",
    "result": "OK",
    "src": "const bf16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "const bitcast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"f32\"",
    "result": "OK",
    "src": "const f32 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"f16\"",
    "result": "OK",
    "src": "const f16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"f64\"",
    "result": "OK",
    "src": "const f64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"i32\"",
    "result": "OK",
    "src": "const i32 : u32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"i16\"",
    "result": "OK",
    "src": "const i16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"i64\"",
    "result": "OK",
    "src": "const i64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"i8\"",
    "result": "OK",
    "src": "const i8 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "const mat2x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "const mat2x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "const mat2x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "const mat3x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "const mat3x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "const mat3x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "const mat4x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "const mat4x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "const mat4x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"ptr\"",
    "result": "OK",
    "src": "const ptr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"quat\"",
    "result": "OK",
    "src": "const quat : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"sampler\"",
    "result": "OK",
    "src": "const sampler : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "const sampler_comparison : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"signed\"",
    "result": "OK",
    "src": "const signed : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "const texture_1d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "const texture_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "const texture_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "const texture_3d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "const texture_cube : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "const texture_cube_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "const texture_multisampled_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "const texture_storage_1d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "const texture_storage_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "const texture_storage_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "const texture_storage_3d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "const texture_depth_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "const texture_depth_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "const texture_depth_cube : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "const texture_depth_cube_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "const texture_depth_multisampled_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"u32\"",
    "result": "OK",
    "src": "const u32 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"u16\"",
    "result": "OK",
    "src": "const u16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"u64\"",
    "result": "OK",
    "src": "const u64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"u8\"",
    "result": "OK",
    "src": "const u8 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "const unsigned : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"vec2\"",
    "result": "OK",
    "src": "const vec2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"vec3\"",
    "result": "OK",
    "src": "const vec3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"vec4\"",
    "result": "OK",
    "src": "const vec4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst _ : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const _ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:7 error: identifiers must not start with two or more underscores\nconst __ : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const __ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:7 error: identifiers must not start with two or more underscores\nconst __foo : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const __foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst 0foo : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const 0foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo.bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo.bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo-bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo-bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo+bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo+bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:10 error: invalid character found\nconst foo#bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo#bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo!bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo!bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:10 error: invalid character found\nconst foo\\bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo\\bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo/bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo/bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo,bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo,bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for 'const' declaration\nconst foo@bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo@bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:11 error: invalid type for 'const' declaration\nconst foo::bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const foo::bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst alias : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const alias : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst break : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const break : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst case : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const case : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst const : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const const : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst const_assert : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const const_assert : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst continue : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const continue : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst continuing : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const continuing : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst default : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const default : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst diagnostic : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const diagnostic : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst discard : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const discard : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst else : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const else : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst enable : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const enable : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst false : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const false : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst fn : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const fn : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst for : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const for : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst if : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const if : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst let : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const let : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst loop : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const loop : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst override : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const override : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst requires : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const requires : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst return : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const return : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst struct : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const struct : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst switch : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const switch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst true : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const true : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst var : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const var : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst while : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const while : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:7 error: 'NULL' is a reserved keyword\nconst NULL : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const NULL : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:7 error: 'Self' is a reserved keyword\nconst Self : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const Self : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:7 error: 'abstract' is a reserved keyword\nconst abstract : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const abstract : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:7 error: 'active' is a reserved keyword\nconst active : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const active : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:7 error: 'alignas' is a reserved keyword\nconst alignas : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const alignas : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'alignof' is a reserved keyword\nconst alignof : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const alignof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:7 error: 'as' is a reserved keyword\nconst as : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const as : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'asm' is a reserved keyword\nconst asm : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const asm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'asm_fragment' is a reserved keyword\nconst asm_fragment : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const asm_fragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:7 error: 'async' is a reserved keyword\nconst async : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const async : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:7 error: 'attribute' is a reserved keyword\nconst attribute : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const attribute : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:7 error: 'auto' is a reserved keyword\nconst auto : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const auto : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:7 error: 'await' is a reserved keyword\nconst await : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const await : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:7 error: 'become' is a reserved keyword\nconst become : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const become : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:7 error: 'binding_array' is a reserved keyword\nconst binding_array : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const binding_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'cast' is a reserved keyword\nconst cast : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:7 error: 'catch' is a reserved keyword\nconst catch : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const catch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:7 error: 'class' is a reserved keyword\nconst class : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const class : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_await' is a reserved keyword\nconst co_await : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const co_await : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_return' is a reserved keyword\nconst co_return : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const co_return : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_yield' is a reserved keyword\nconst co_yield : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const co_yield : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:7 error: 'coherent' is a reserved keyword\nconst coherent : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const coherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:7 error: 'column_major' is a reserved keyword\nconst column_major : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const column_major : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:7 error: 'common' is a reserved keyword\nconst common : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const common : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:7 error: 'compile' is a reserved keyword\nconst compile : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const compile : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'compile_fragment' is a reserved keyword\nconst compile_fragment : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const compile_fragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:7 error: 'concept' is a reserved keyword\nconst concept : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const concept : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'const_cast' is a reserved keyword\nconst const_cast : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const const_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:7 error: 'consteval' is a reserved keyword\nconst consteval : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const consteval : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:7 error: 'constexpr' is a reserved keyword\nconst constexpr : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const constexpr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:7 error: 'constinit' is a reserved keyword\nconst constinit : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const constinit : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:7 error: 'crate' is a reserved keyword\nconst crate : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const crate : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:7 error: 'debugger' is a reserved keyword\nconst debugger : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const debugger : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:7 error: 'decltype' is a reserved keyword\nconst decltype : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const decltype : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:7 error: 'delete' is a reserved keyword\nconst delete : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const delete : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:7 error: 'demote' is a reserved keyword\nconst demote : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const demote : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:7 error: 'demote_to_helper' is a reserved keyword\nconst demote_to_helper : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const demote_to_helper : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:7 error: 'do' is a reserved keyword\nconst do : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const do : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'dynamic_cast' is a reserved keyword\nconst dynamic_cast : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const dynamic_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:7 error: 'enum' is a reserved keyword\nconst enum : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const enum : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:7 error: 'explicit' is a reserved keyword\nconst explicit : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const explicit : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:7 error: 'export' is a reserved keyword\nconst export : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const export : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:7 error: 'extends' is a reserved keyword\nconst extends : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const extends : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:7 error: 'extern' is a reserved keyword\nconst extern : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const extern : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:7 error: 'external' is a reserved keyword\nconst external : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const external : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for 'const' declaration\nconst fallthrough : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const fallthrough : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:7 error: 'filter' is a reserved keyword\nconst filter : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const filter : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:7 error: 'final' is a reserved keyword\nconst final : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const final : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:7 error: 'finally' is a reserved keyword\nconst finally : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const finally : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:7 error: 'friend' is a reserved keyword\nconst friend : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const friend : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:7 error: 'from' is a reserved keyword\nconst from : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const from : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:7 error: 'fxgroup' is a reserved keyword\nconst fxgroup : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const fxgroup : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:7 error: 'get' is a reserved keyword\nconst get : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const get : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:7 error: 'goto' is a reserved keyword\nconst goto : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const goto : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:7 error: 'groupshared' is a reserved keyword\nconst groupshared : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const groupshared : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:7 error: 'highp' is a reserved keyword\nconst highp : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const highp : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:7 error: 'impl' is a reserved keyword\nconst impl : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const impl : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:7 error: 'implements' is a reserved keyword\nconst implements : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const implements : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:7 error: 'import' is a reserved keyword\nconst import : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const import : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:7 error: 'inline' is a reserved keyword\nconst inline : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const inline : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'instanceof' is a reserved keyword\nconst instanceof : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const instanceof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:7 error: 'interface' is a reserved keyword\nconst interface : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const interface : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:7 error: 'layout' is a reserved keyword\nconst layout : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const layout : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:7 error: 'lowp' is a reserved keyword\nconst lowp : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const lowp : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:7 error: 'macro' is a reserved keyword\nconst macro : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const macro : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:7 error: 'macro_rules' is a reserved keyword\nconst macro_rules : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const macro_rules : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:7 error: 'match' is a reserved keyword\nconst match : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const match : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mediump' is a reserved keyword\nconst mediump : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const mediump : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:7 error: 'meta' is a reserved keyword\nconst meta : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const meta : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mod' is a reserved keyword\nconst mod : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const mod : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:7 error: 'module' is a reserved keyword\nconst module : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const module : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:7 error: 'move' is a reserved keyword\nconst move : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const move : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mut' is a reserved keyword\nconst mut : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const mut : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mutable' is a reserved keyword\nconst mutable : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const mutable : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:7 error: 'namespace' is a reserved keyword\nconst namespace : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const namespace : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:7 error: 'new' is a reserved keyword\nconst new : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const new : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nil' is a reserved keyword\nconst nil : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const nil : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noexcept' is a reserved keyword\nconst noexcept : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const noexcept : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noinline' is a reserved keyword\nconst noinline : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const noinline : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nointerpolation' is a reserved keyword\nconst nointerpolation : i32 = 0;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const nointerpolation : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "const non_coherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "const noncoherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noperspective' is a reserved keyword\nconst noperspective : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const noperspective : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:7 error: 'null' is a reserved keyword\nconst null : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const null : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nullptr' is a reserved keyword\nconst nullptr : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const nullptr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:7 error: 'of' is a reserved keyword\nconst of : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const of : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:7 error: 'operator' is a reserved keyword\nconst operator : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const operator : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:7 error: 'package' is a reserved keyword\nconst package : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const package : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:7 error: 'packoffset' is a reserved keyword\nconst packoffset : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const packoffset : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:7 error: 'partition' is a reserved keyword\nconst partition : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const partition : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pass' is a reserved keyword\nconst pass : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const pass : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:7 error: 'patch' is a reserved keyword\nconst patch : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const patch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pixelfragment' is a reserved keyword\nconst pixelfragment : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const pixelfragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:7 error: 'precise' is a reserved keyword\nconst precise : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const precise : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:7 error: 'precision' is a reserved keyword\nconst precision : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const precision : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:7 error: 'premerge' is a reserved keyword\nconst premerge : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const premerge : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:7 error: 'priv' is a reserved keyword\nconst priv : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const priv : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:7 error: 'protected' is a reserved keyword\nconst protected : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const protected : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pub' is a reserved keyword\nconst pub : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const pub : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:7 error: 'public' is a reserved keyword\nconst public : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const public : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:7 error: 'readonly' is a reserved keyword\nconst readonly : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const readonly : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:7 error: 'ref' is a reserved keyword\nconst ref : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const ref : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:7 error: 'regardless' is a reserved keyword\nconst regardless : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const regardless : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:7 error: 'register' is a reserved keyword\nconst register : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const register : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'reinterpret_cast' is a reserved keyword\nconst reinterpret_cast : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const reinterpret_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:7 error: 'require' is a reserved keyword\nconst require : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const require : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:7 error: 'resource' is a reserved keyword\nconst resource : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const resource : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:7 error: 'restrict' is a reserved keyword\nconst restrict : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const restrict : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:7 error: 'self' is a reserved keyword\nconst self : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const self : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:7 error: 'set' is a reserved keyword\nconst set : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const set : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:7 error: 'shared' is a reserved keyword\nconst shared : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const shared : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'sizeof' is a reserved keyword\nconst sizeof : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const sizeof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:7 error: 'smooth' is a reserved keyword\nconst smooth : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const smooth : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'snorm' is a reserved keyword\nconst snorm : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const snorm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static' is a reserved keyword\nconst static : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const static : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static_assert' is a reserved keyword\nconst static_assert : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const static_assert : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static_cast' is a reserved keyword\nconst static_cast : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const static_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:7 error: 'std' is a reserved keyword\nconst std : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const std : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:7 error: 'subroutine' is a reserved keyword\nconst subroutine : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const subroutine : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:7 error: 'super' is a reserved keyword\nconst super : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const super : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:7 error: 'target' is a reserved keyword\nconst target : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const target : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:7 error: 'template' is a reserved keyword\nconst template : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const template : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:7 error: 'this' is a reserved keyword\nconst this : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const this : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:7 error: 'thread_local' is a reserved keyword\nconst thread_local : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const thread_local : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:7 error: 'throw' is a reserved keyword\nconst throw : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const throw : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:7 error: 'trait' is a reserved keyword\nconst trait : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const trait : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:7 error: 'try' is a reserved keyword\nconst try : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const try : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:7 error: 'type' is a reserved keyword\nconst type : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const type : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typedef' is a reserved keyword\nconst typedef : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const typedef : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typeid' is a reserved keyword\nconst typeid : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const typeid : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typename' is a reserved keyword\nconst typename : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const typename : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typeof' is a reserved keyword\nconst typeof : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const typeof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:7 error: 'union' is a reserved keyword\nconst union : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const union : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unless' is a reserved keyword\nconst unless : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const unless : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unorm' is a reserved keyword\nconst unorm : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const unorm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unsafe' is a reserved keyword\nconst unsafe : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const unsafe : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unsized' is a reserved keyword\nconst unsized : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const unsized : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:7 error: 'use' is a reserved keyword\nconst use : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const use : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:7 error: 'using' is a reserved keyword\nconst using : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const using : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:7 error: 'varying' is a reserved keyword\nconst varying : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const varying : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:7 error: 'virtual' is a reserved keyword\nconst virtual : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const virtual : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:7 error: 'volatile' is a reserved keyword\nconst volatile : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const volatile : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:7 error: 'wgsl' is a reserved keyword\nconst wgsl : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const wgsl : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:7 error: 'where' is a reserved keyword\nconst where : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const where : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:7 error: 'with' is a reserved keyword\nconst with : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const with : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:7 error: 'writeonly' is a reserved keyword\nconst writeonly : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const writeonly : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:module_const_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:7 error: 'yield' is a reserved keyword\nconst yield : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const yield : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo\"",
    "result": "OK",
    "src": "override foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"Foo\"",
    "result": "OK",
    "src": "override Foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"FOO\"",
    "result": "OK",
    "src": "override FOO : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"_0\"",
    "result": "OK",
    "src": "override _0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "override _foo0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "override _0foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "override foo__0 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "override Δέλτα : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "override réflexion : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "override Кызыл : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "override 𐰓𐰏𐰇 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "override 朝焼け : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "override سلام : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "override 검정 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "override שָׁלוֹם : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "override गुलाबी : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "override փիրուզ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"array\"",
    "result": "OK",
    "src": "override array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"atomic\"",
    "result": "OK",
    "src": "override atomic : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"bool\"",
    "result": "OK",
    "src": "override bool : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"bf16\"",
    "result": "OK",
    "src": "override bf16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "override bitcast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"f32\"",
    "result": "OK",
    "src": "override f32 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"f16\"",
    "result": "OK",
    "src": "override f16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"f64\"",
    "result": "OK",
    "src": "override f64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"i32\"",
    "result": "OK",
    "src": "override i32 : u32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"i16\"",
    "result": "OK",
    "src": "override i16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"i64\"",
    "result": "OK",
    "src": "override i64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"i8\"",
    "result": "OK",
    "src": "override i8 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "override mat2x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "override mat2x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "override mat2x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "override mat3x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "override mat3x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "override mat3x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "override mat4x2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "override mat4x3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "override mat4x4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"ptr\"",
    "result": "OK",
    "src": "override ptr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"quat\"",
    "result": "OK",
    "src": "override quat : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"sampler\"",
    "result": "OK",
    "src": "override sampler : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "override sampler_comparison : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"signed\"",
    "result": "OK",
    "src": "override signed : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "override texture_1d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "override texture_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "override texture_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "override texture_3d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "override texture_cube : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "override texture_cube_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "override texture_multisampled_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "override texture_storage_1d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "override texture_storage_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "override texture_storage_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "override texture_storage_3d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "override texture_depth_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "override texture_depth_2d_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "override texture_depth_cube : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "override texture_depth_cube_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "override texture_depth_multisampled_2d : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"u32\"",
    "result": "OK",
    "src": "override u32 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"u16\"",
    "result": "OK",
    "src": "override u16 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"u64\"",
    "result": "OK",
    "src": "override u64 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"u8\"",
    "result": "OK",
    "src": "override u8 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "override unsigned : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"vec2\"",
    "result": "OK",
    "src": "override vec2 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"vec3\"",
    "result": "OK",
    "src": "override vec3 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"vec4\"",
    "result": "OK",
    "src": "override vec4 : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride _ : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override _ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:10 error: identifiers must not start with two or more underscores\noverride __ : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override __ : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:10 error: identifiers must not start with two or more underscores\noverride __foo : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override __foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride 0foo : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override 0foo : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo.bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo.bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo-bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo-bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo+bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo+bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:13 error: invalid character found\noverride foo#bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo#bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo!bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo!bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:13 error: invalid character found\noverride foo\\bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo\\bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo/bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo/bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo,bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo,bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:13 error: expected ';' for 'override' declaration\noverride foo@bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo@bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:14 error: invalid type for 'override' declaration\noverride foo::bar : i32 = 0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override foo::bar : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride alias : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override alias : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride break : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override break : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride case : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override case : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride const : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override const : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride const_assert : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override const_assert : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride continue : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override continue : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride continuing : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override continuing : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride default : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override default : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride diagnostic : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override diagnostic : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride discard : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override discard : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride else : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override else : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride enable : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override enable : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride false : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override false : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride fn : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override fn : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride for : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override for : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride if : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override if : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride let : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override let : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride loop : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override loop : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride override : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override override : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride requires : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override requires : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride return : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override return : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride struct : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override struct : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride switch : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override switch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride true : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override true : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride var : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override var : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride while : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override while : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:10 error: 'NULL' is a reserved keyword\noverride NULL : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override NULL : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:10 error: 'Self' is a reserved keyword\noverride Self : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override Self : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:10 error: 'abstract' is a reserved keyword\noverride abstract : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override abstract : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:10 error: 'active' is a reserved keyword\noverride active : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override active : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:10 error: 'alignas' is a reserved keyword\noverride alignas : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override alignas : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:10 error: 'alignof' is a reserved keyword\noverride alignof : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override alignof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:10 error: 'as' is a reserved keyword\noverride as : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override as : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:10 error: 'asm' is a reserved keyword\noverride asm : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override asm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:10 error: 'asm_fragment' is a reserved keyword\noverride asm_fragment : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override asm_fragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:10 error: 'async' is a reserved keyword\noverride async : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override async : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:10 error: 'attribute' is a reserved keyword\noverride attribute : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override attribute : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:10 error: 'auto' is a reserved keyword\noverride auto : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override auto : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:10 error: 'await' is a reserved keyword\noverride await : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override await : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:10 error: 'become' is a reserved keyword\noverride become : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override become : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:10 error: 'binding_array' is a reserved keyword\noverride binding_array : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override binding_array : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:10 error: 'cast' is a reserved keyword\noverride cast : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:10 error: 'catch' is a reserved keyword\noverride catch : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override catch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:10 error: 'class' is a reserved keyword\noverride class : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override class : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:10 error: 'co_await' is a reserved keyword\noverride co_await : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override co_await : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:10 error: 'co_return' is a reserved keyword\noverride co_return : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override co_return : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:10 error: 'co_yield' is a reserved keyword\noverride co_yield : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override co_yield : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:10 error: 'coherent' is a reserved keyword\noverride coherent : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override coherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:10 error: 'column_major' is a reserved keyword\noverride column_major : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override column_major : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:10 error: 'common' is a reserved keyword\noverride common : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override common : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:10 error: 'compile' is a reserved keyword\noverride compile : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override compile : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:10 error: 'compile_fragment' is a reserved keyword\noverride compile_fragment : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override compile_fragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:10 error: 'concept' is a reserved keyword\noverride concept : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override concept : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:10 error: 'const_cast' is a reserved keyword\noverride const_cast : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override const_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:10 error: 'consteval' is a reserved keyword\noverride consteval : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override consteval : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:10 error: 'constexpr' is a reserved keyword\noverride constexpr : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override constexpr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:10 error: 'constinit' is a reserved keyword\noverride constinit : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override constinit : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:10 error: 'crate' is a reserved keyword\noverride crate : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override crate : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:10 error: 'debugger' is a reserved keyword\noverride debugger : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override debugger : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:10 error: 'decltype' is a reserved keyword\noverride decltype : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override decltype : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:10 error: 'delete' is a reserved keyword\noverride delete : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override delete : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:10 error: 'demote' is a reserved keyword\noverride demote : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override demote : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:10 error: 'demote_to_helper' is a reserved keyword\noverride demote_to_helper : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override demote_to_helper : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:10 error: 'do' is a reserved keyword\noverride do : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override do : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:10 error: 'dynamic_cast' is a reserved keyword\noverride dynamic_cast : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override dynamic_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:10 error: 'enum' is a reserved keyword\noverride enum : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override enum : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:10 error: 'explicit' is a reserved keyword\noverride explicit : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override explicit : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:10 error: 'export' is a reserved keyword\noverride export : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override export : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:10 error: 'extends' is a reserved keyword\noverride extends : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override extends : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:10 error: 'extern' is a reserved keyword\noverride extern : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override extern : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:10 error: 'external' is a reserved keyword\noverride external : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override external : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:10 error: expected identifier for 'override' declaration\noverride fallthrough : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override fallthrough : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:10 error: 'filter' is a reserved keyword\noverride filter : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override filter : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:10 error: 'final' is a reserved keyword\noverride final : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override final : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:10 error: 'finally' is a reserved keyword\noverride finally : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override finally : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:10 error: 'friend' is a reserved keyword\noverride friend : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override friend : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:10 error: 'from' is a reserved keyword\noverride from : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override from : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:10 error: 'fxgroup' is a reserved keyword\noverride fxgroup : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override fxgroup : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:10 error: 'get' is a reserved keyword\noverride get : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override get : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:10 error: 'goto' is a reserved keyword\noverride goto : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override goto : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:10 error: 'groupshared' is a reserved keyword\noverride groupshared : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override groupshared : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:10 error: 'highp' is a reserved keyword\noverride highp : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override highp : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:10 error: 'impl' is a reserved keyword\noverride impl : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override impl : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:10 error: 'implements' is a reserved keyword\noverride implements : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override implements : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:10 error: 'import' is a reserved keyword\noverride import : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override import : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:10 error: 'inline' is a reserved keyword\noverride inline : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override inline : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:10 error: 'instanceof' is a reserved keyword\noverride instanceof : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override instanceof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:10 error: 'interface' is a reserved keyword\noverride interface : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override interface : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:10 error: 'layout' is a reserved keyword\noverride layout : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override layout : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:10 error: 'lowp' is a reserved keyword\noverride lowp : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override lowp : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:10 error: 'macro' is a reserved keyword\noverride macro : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override macro : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:10 error: 'macro_rules' is a reserved keyword\noverride macro_rules : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override macro_rules : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:10 error: 'match' is a reserved keyword\noverride match : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override match : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:10 error: 'mediump' is a reserved keyword\noverride mediump : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override mediump : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:10 error: 'meta' is a reserved keyword\noverride meta : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override meta : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:10 error: 'mod' is a reserved keyword\noverride mod : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override mod : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:10 error: 'module' is a reserved keyword\noverride module : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override module : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:10 error: 'move' is a reserved keyword\noverride move : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override move : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:10 error: 'mut' is a reserved keyword\noverride mut : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override mut : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:10 error: 'mutable' is a reserved keyword\noverride mutable : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override mutable : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:10 error: 'namespace' is a reserved keyword\noverride namespace : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override namespace : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:10 error: 'new' is a reserved keyword\noverride new : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override new : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:10 error: 'nil' is a reserved keyword\noverride nil : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override nil : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:10 error: 'noexcept' is a reserved keyword\noverride noexcept : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override noexcept : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:10 error: 'noinline' is a reserved keyword\noverride noinline : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override noinline : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:10 error: 'nointerpolation' is a reserved keyword\noverride nointerpolation : i32 = 0;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override nointerpolation : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "override non_coherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "override noncoherent : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:10 error: 'noperspective' is a reserved keyword\noverride noperspective : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override noperspective : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:10 error: 'null' is a reserved keyword\noverride null : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override null : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:10 error: 'nullptr' is a reserved keyword\noverride nullptr : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override nullptr : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:10 error: 'of' is a reserved keyword\noverride of : i32 = 0;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override of : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:10 error: 'operator' is a reserved keyword\noverride operator : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override operator : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:10 error: 'package' is a reserved keyword\noverride package : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override package : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:10 error: 'packoffset' is a reserved keyword\noverride packoffset : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override packoffset : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:10 error: 'partition' is a reserved keyword\noverride partition : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override partition : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:10 error: 'pass' is a reserved keyword\noverride pass : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override pass : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:10 error: 'patch' is a reserved keyword\noverride patch : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override patch : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:10 error: 'pixelfragment' is a reserved keyword\noverride pixelfragment : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override pixelfragment : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:10 error: 'precise' is a reserved keyword\noverride precise : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override precise : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:10 error: 'precision' is a reserved keyword\noverride precision : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override precision : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:10 error: 'premerge' is a reserved keyword\noverride premerge : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override premerge : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:10 error: 'priv' is a reserved keyword\noverride priv : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override priv : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:10 error: 'protected' is a reserved keyword\noverride protected : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override protected : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:10 error: 'pub' is a reserved keyword\noverride pub : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override pub : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:10 error: 'public' is a reserved keyword\noverride public : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override public : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:10 error: 'readonly' is a reserved keyword\noverride readonly : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override readonly : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:10 error: 'ref' is a reserved keyword\noverride ref : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override ref : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:10 error: 'regardless' is a reserved keyword\noverride regardless : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override regardless : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:10 error: 'register' is a reserved keyword\noverride register : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override register : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:10 error: 'reinterpret_cast' is a reserved keyword\noverride reinterpret_cast : i32 = 0;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override reinterpret_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:10 error: 'require' is a reserved keyword\noverride require : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override require : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:10 error: 'resource' is a reserved keyword\noverride resource : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override resource : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:10 error: 'restrict' is a reserved keyword\noverride restrict : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override restrict : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:10 error: 'self' is a reserved keyword\noverride self : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override self : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:10 error: 'set' is a reserved keyword\noverride set : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override set : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:10 error: 'shared' is a reserved keyword\noverride shared : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override shared : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:10 error: 'sizeof' is a reserved keyword\noverride sizeof : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override sizeof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:10 error: 'smooth' is a reserved keyword\noverride smooth : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override smooth : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:10 error: 'snorm' is a reserved keyword\noverride snorm : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override snorm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:10 error: 'static' is a reserved keyword\noverride static : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override static : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:10 error: 'static_assert' is a reserved keyword\noverride static_assert : i32 = 0;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override static_assert : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:10 error: 'static_cast' is a reserved keyword\noverride static_cast : i32 = 0;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override static_cast : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:10 error: 'std' is a reserved keyword\noverride std : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override std : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:10 error: 'subroutine' is a reserved keyword\noverride subroutine : i32 = 0;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override subroutine : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:10 error: 'super' is a reserved keyword\noverride super : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override super : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:10 error: 'target' is a reserved keyword\noverride target : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override target : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:10 error: 'template' is a reserved keyword\noverride template : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override template : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:10 error: 'this' is a reserved keyword\noverride this : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override this : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:10 error: 'thread_local' is a reserved keyword\noverride thread_local : i32 = 0;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override thread_local : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:10 error: 'throw' is a reserved keyword\noverride throw : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override throw : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:10 error: 'trait' is a reserved keyword\noverride trait : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override trait : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:10 error: 'try' is a reserved keyword\noverride try : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override try : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:10 error: 'type' is a reserved keyword\noverride type : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override type : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:10 error: 'typedef' is a reserved keyword\noverride typedef : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override typedef : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:10 error: 'typeid' is a reserved keyword\noverride typeid : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override typeid : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:10 error: 'typename' is a reserved keyword\noverride typename : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override typename : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:10 error: 'typeof' is a reserved keyword\noverride typeof : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override typeof : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:10 error: 'union' is a reserved keyword\noverride union : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override union : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:10 error: 'unless' is a reserved keyword\noverride unless : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override unless : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:10 error: 'unorm' is a reserved keyword\noverride unorm : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override unorm : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:10 error: 'unsafe' is a reserved keyword\noverride unsafe : i32 = 0;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override unsafe : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:10 error: 'unsized' is a reserved keyword\noverride unsized : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override unsized : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:10 error: 'use' is a reserved keyword\noverride use : i32 = 0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override use : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:10 error: 'using' is a reserved keyword\noverride using : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override using : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:10 error: 'varying' is a reserved keyword\noverride varying : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override varying : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:10 error: 'virtual' is a reserved keyword\noverride virtual : i32 = 0;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override virtual : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:10 error: 'volatile' is a reserved keyword\noverride volatile : i32 = 0;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override volatile : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:10 error: 'wgsl' is a reserved keyword\noverride wgsl : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override wgsl : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:10 error: 'where' is a reserved keyword\noverride where : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override where : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:10 error: 'with' is a reserved keyword\noverride with : i32 = 0;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override with : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:10 error: 'writeonly' is a reserved keyword\noverride writeonly : i32 = 0;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override writeonly : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:override_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:10 error: 'yield' is a reserved keyword\noverride yield : i32 = 0;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "override yield : i32 = 0;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo\"",
    "result": "OK",
    "src": "fn foo() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"Foo\"",
    "result": "OK",
    "src": "fn Foo() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"FOO\"",
    "result": "OK",
    "src": "fn FOO() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"_0\"",
    "result": "OK",
    "src": "fn _0() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "fn _foo0() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "fn _0foo() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "fn foo__0() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "fn Δέλτα() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "fn réflexion() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "fn Кызыл() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "fn 𐰓𐰏𐰇() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "fn 朝焼け() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "fn سلام() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "fn 검정() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "fn שָׁלוֹם() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "fn गुलाबी() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "fn փիրուզ() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"array\"",
    "result": "OK",
    "src": "fn array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"atomic\"",
    "result": "OK",
    "src": "fn atomic() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"bool\"",
    "result": "OK",
    "src": "fn bool() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"bf16\"",
    "result": "OK",
    "src": "fn bf16() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "fn bitcast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"f32\"",
    "result": "OK",
    "src": "fn f32() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"f16\"",
    "result": "OK",
    "src": "fn f16() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"f64\"",
    "result": "OK",
    "src": "fn f64() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"i32\"",
    "result": "OK",
    "src": "fn i32() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"i16\"",
    "result": "OK",
    "src": "fn i16() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"i64\"",
    "result": "OK",
    "src": "fn i64() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"i8\"",
    "result": "OK",
    "src": "fn i8() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "fn mat2x2() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "fn mat2x3() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "fn mat2x4() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "fn mat3x2() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "fn mat3x3() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "fn mat3x4() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "fn mat4x2() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "fn mat4x3() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "fn mat4x4() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"ptr\"",
    "result": "OK",
    "src": "fn ptr() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"quat\"",
    "result": "OK",
    "src": "fn quat() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"sampler\"",
    "result": "OK",
    "src": "fn sampler() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "fn sampler_comparison() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"signed\"",
    "result": "OK",
    "src": "fn signed() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "fn texture_1d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "fn texture_2d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "fn texture_2d_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "fn texture_3d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "fn texture_cube() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "fn texture_cube_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "fn texture_multisampled_2d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "fn texture_storage_1d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "fn texture_storage_2d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "fn texture_storage_2d_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "fn texture_storage_3d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "fn texture_depth_2d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "fn texture_depth_2d_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "fn texture_depth_cube() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "fn texture_depth_cube_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "fn texture_depth_multisampled_2d() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"u32\"",
    "result": "OK",
    "src": "fn u32() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"u16\"",
    "result": "OK",
    "src": "fn u16() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"u64\"",
    "result": "OK",
    "src": "fn u64() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"u8\"",
    "result": "OK",
    "src": "fn u8() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "fn unsigned() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"vec2\"",
    "result": "OK",
    "src": "fn vec2() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"vec3\"",
    "result": "OK",
    "src": "fn vec3() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"vec4\"",
    "result": "OK",
    "src": "fn vec4() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn _() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn _() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:4 error: identifiers must not start with two or more underscores\nfn __() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn __() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:4 error: identifiers must not start with two or more underscores\nfn __foo() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn __foo() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn 0foo() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn 0foo() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo.bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo.bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo-bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo-bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo+bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo+bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:7 error: invalid character found\nfn foo#bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo#bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo!bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo!bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:7 error: invalid character found\nfn foo\\bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo\\bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo/bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo/bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo,bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo,bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo@bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo@bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:7 error: expected '(' for function declaration\nfn foo::bar() {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo::bar() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn alias() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn alias() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn break() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn break() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn case() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn case() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn const() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn const() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn const_assert() {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn const_assert() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn continue() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn continue() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn continuing() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn continuing() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn default() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn default() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn diagnostic() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn diagnostic() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn discard() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn discard() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn else() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn else() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn enable() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn enable() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn false() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn false() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn fn() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn fn() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn for() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn for() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn if() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn if() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn let() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn let() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn loop() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn loop() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn override() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn override() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn requires() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn requires() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn return() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn return() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn struct() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn struct() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn switch() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn switch() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn true() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn true() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn var() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn var() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn while() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn while() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:4 error: 'NULL' is a reserved keyword\nfn NULL() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn NULL() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:4 error: 'Self' is a reserved keyword\nfn Self() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn Self() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:4 error: 'abstract' is a reserved keyword\nfn abstract() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn abstract() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:4 error: 'active' is a reserved keyword\nfn active() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn active() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:4 error: 'alignas' is a reserved keyword\nfn alignas() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn alignas() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:4 error: 'alignof' is a reserved keyword\nfn alignof() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn alignof() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:4 error: 'as' is a reserved keyword\nfn as() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn as() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:4 error: 'asm' is a reserved keyword\nfn asm() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn asm() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:4 error: 'asm_fragment' is a reserved keyword\nfn asm_fragment() {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn asm_fragment() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:4 error: 'async' is a reserved keyword\nfn async() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn async() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:4 error: 'attribute' is a reserved keyword\nfn attribute() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn attribute() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:4 error: 'auto' is a reserved keyword\nfn auto() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn auto() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:4 error: 'await' is a reserved keyword\nfn await() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn await() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:4 error: 'become' is a reserved keyword\nfn become() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn become() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:4 error: 'binding_array' is a reserved keyword\nfn binding_array() {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn binding_array() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:4 error: 'cast' is a reserved keyword\nfn cast() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn cast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:4 error: 'catch' is a reserved keyword\nfn catch() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn catch() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:4 error: 'class' is a reserved keyword\nfn class() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn class() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:4 error: 'co_await' is a reserved keyword\nfn co_await() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn co_await() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:4 error: 'co_return' is a reserved keyword\nfn co_return() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn co_return() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:4 error: 'co_yield' is a reserved keyword\nfn co_yield() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn co_yield() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:4 error: 'coherent' is a reserved keyword\nfn coherent() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn coherent() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:4 error: 'column_major' is a reserved keyword\nfn column_major() {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn column_major() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:4 error: 'common' is a reserved keyword\nfn common() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn common() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:4 error: 'compile' is a reserved keyword\nfn compile() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn compile() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:4 error: 'compile_fragment' is a reserved keyword\nfn compile_fragment() {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn compile_fragment() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:4 error: 'concept' is a reserved keyword\nfn concept() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn concept() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:4 error: 'const_cast' is a reserved keyword\nfn const_cast() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn const_cast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:4 error: 'consteval' is a reserved keyword\nfn consteval() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn consteval() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:4 error: 'constexpr' is a reserved keyword\nfn constexpr() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn constexpr() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:4 error: 'constinit' is a reserved keyword\nfn constinit() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn constinit() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:4 error: 'crate' is a reserved keyword\nfn crate() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn crate() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:4 error: 'debugger' is a reserved keyword\nfn debugger() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn debugger() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:4 error: 'decltype' is a reserved keyword\nfn decltype() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn decltype() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:4 error: 'delete' is a reserved keyword\nfn delete() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn delete() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:4 error: 'demote' is a reserved keyword\nfn demote() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn demote() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:4 error: 'demote_to_helper' is a reserved keyword\nfn demote_to_helper() {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn demote_to_helper() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:4 error: 'do' is a reserved keyword\nfn do() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn do() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:4 error: 'dynamic_cast' is a reserved keyword\nfn dynamic_cast() {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn dynamic_cast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:4 error: 'enum' is a reserved keyword\nfn enum() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn enum() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:4 error: 'explicit' is a reserved keyword\nfn explicit() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn explicit() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:4 error: 'export' is a reserved keyword\nfn export() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn export() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:4 error: 'extends' is a reserved keyword\nfn extends() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn extends() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:4 error: 'extern' is a reserved keyword\nfn extern() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn extern() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:4 error: 'external' is a reserved keyword\nfn external() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn external() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:4 error: expected identifier for function declaration\nfn fallthrough() {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn fallthrough() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:4 error: 'filter' is a reserved keyword\nfn filter() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn filter() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:4 error: 'final' is a reserved keyword\nfn final() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn final() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:4 error: 'finally' is a reserved keyword\nfn finally() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn finally() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:4 error: 'friend' is a reserved keyword\nfn friend() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn friend() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:4 error: 'from' is a reserved keyword\nfn from() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn from() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:4 error: 'fxgroup' is a reserved keyword\nfn fxgroup() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn fxgroup() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:4 error: 'get' is a reserved keyword\nfn get() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn get() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:4 error: 'goto' is a reserved keyword\nfn goto() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn goto() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:4 error: 'groupshared' is a reserved keyword\nfn groupshared() {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn groupshared() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:4 error: 'highp' is a reserved keyword\nfn highp() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn highp() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:4 error: 'impl' is a reserved keyword\nfn impl() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn impl() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:4 error: 'implements' is a reserved keyword\nfn implements() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn implements() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:4 error: 'import' is a reserved keyword\nfn import() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn import() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:4 error: 'inline' is a reserved keyword\nfn inline() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn inline() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:4 error: 'instanceof' is a reserved keyword\nfn instanceof() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn instanceof() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:4 error: 'interface' is a reserved keyword\nfn interface() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn interface() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:4 error: 'layout' is a reserved keyword\nfn layout() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn layout() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:4 error: 'lowp' is a reserved keyword\nfn lowp() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn lowp() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:4 error: 'macro' is a reserved keyword\nfn macro() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn macro() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:4 error: 'macro_rules' is a reserved keyword\nfn macro_rules() {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn macro_rules() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:4 error: 'match' is a reserved keyword\nfn match() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn match() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:4 error: 'mediump' is a reserved keyword\nfn mediump() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn mediump() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:4 error: 'meta' is a reserved keyword\nfn meta() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn meta() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:4 error: 'mod' is a reserved keyword\nfn mod() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn mod() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:4 error: 'module' is a reserved keyword\nfn module() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn module() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:4 error: 'move' is a reserved keyword\nfn move() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn move() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:4 error: 'mut' is a reserved keyword\nfn mut() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn mut() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:4 error: 'mutable' is a reserved keyword\nfn mutable() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn mutable() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:4 error: 'namespace' is a reserved keyword\nfn namespace() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn namespace() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:4 error: 'new' is a reserved keyword\nfn new() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn new() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:4 error: 'nil' is a reserved keyword\nfn nil() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn nil() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:4 error: 'noexcept' is a reserved keyword\nfn noexcept() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn noexcept() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:4 error: 'noinline' is a reserved keyword\nfn noinline() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn noinline() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:4 error: 'nointerpolation' is a reserved keyword\nfn nointerpolation() {}\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn nointerpolation() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "fn non_coherent() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "fn noncoherent() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:4 error: 'noperspective' is a reserved keyword\nfn noperspective() {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn noperspective() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:4 error: 'null' is a reserved keyword\nfn null() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn null() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:4 error: 'nullptr' is a reserved keyword\nfn nullptr() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn nullptr() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:4 error: 'of' is a reserved keyword\nfn of() {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn of() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:4 error: 'operator' is a reserved keyword\nfn operator() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn operator() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:4 error: 'package' is a reserved keyword\nfn package() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn package() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:4 error: 'packoffset' is a reserved keyword\nfn packoffset() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn packoffset() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:4 error: 'partition' is a reserved keyword\nfn partition() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn partition() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:4 error: 'pass' is a reserved keyword\nfn pass() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn pass() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:4 error: 'patch' is a reserved keyword\nfn patch() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn patch() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:4 error: 'pixelfragment' is a reserved keyword\nfn pixelfragment() {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn pixelfragment() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:4 error: 'precise' is a reserved keyword\nfn precise() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn precise() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:4 error: 'precision' is a reserved keyword\nfn precision() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn precision() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:4 error: 'premerge' is a reserved keyword\nfn premerge() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn premerge() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:4 error: 'priv' is a reserved keyword\nfn priv() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn priv() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:4 error: 'protected' is a reserved keyword\nfn protected() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn protected() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:4 error: 'pub' is a reserved keyword\nfn pub() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn pub() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:4 error: 'public' is a reserved keyword\nfn public() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn public() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:4 error: 'readonly' is a reserved keyword\nfn readonly() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn readonly() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:4 error: 'ref' is a reserved keyword\nfn ref() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn ref() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:4 error: 'regardless' is a reserved keyword\nfn regardless() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn regardless() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:4 error: 'register' is a reserved keyword\nfn register() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn register() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:4 error: 'reinterpret_cast' is a reserved keyword\nfn reinterpret_cast() {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn reinterpret_cast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:4 error: 'require' is a reserved keyword\nfn require() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn require() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:4 error: 'resource' is a reserved keyword\nfn resource() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn resource() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:4 error: 'restrict' is a reserved keyword\nfn restrict() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn restrict() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:4 error: 'self' is a reserved keyword\nfn self() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn self() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:4 error: 'set' is a reserved keyword\nfn set() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn set() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:4 error: 'shared' is a reserved keyword\nfn shared() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn shared() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:4 error: 'sizeof' is a reserved keyword\nfn sizeof() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn sizeof() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:4 error: 'smooth' is a reserved keyword\nfn smooth() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn smooth() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:4 error: 'snorm' is a reserved keyword\nfn snorm() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn snorm() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:4 error: 'static' is a reserved keyword\nfn static() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn static() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:4 error: 'static_assert' is a reserved keyword\nfn static_assert() {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn static_assert() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:4 error: 'static_cast' is a reserved keyword\nfn static_cast() {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn static_cast() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:4 error: 'std' is a reserved keyword\nfn std() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn std() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:4 error: 'subroutine' is a reserved keyword\nfn subroutine() {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn subroutine() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:4 error: 'super' is a reserved keyword\nfn super() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn super() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:4 error: 'target' is a reserved keyword\nfn target() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn target() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:4 error: 'template' is a reserved keyword\nfn template() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn template() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:4 error: 'this' is a reserved keyword\nfn this() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn this() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:4 error: 'thread_local' is a reserved keyword\nfn thread_local() {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn thread_local() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:4 error: 'throw' is a reserved keyword\nfn throw() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn throw() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:4 error: 'trait' is a reserved keyword\nfn trait() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn trait() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:4 error: 'try' is a reserved keyword\nfn try() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn try() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:4 error: 'type' is a reserved keyword\nfn type() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn type() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:4 error: 'typedef' is a reserved keyword\nfn typedef() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn typedef() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:4 error: 'typeid' is a reserved keyword\nfn typeid() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn typeid() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:4 error: 'typename' is a reserved keyword\nfn typename() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn typename() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:4 error: 'typeof' is a reserved keyword\nfn typeof() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn typeof() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:4 error: 'union' is a reserved keyword\nfn union() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn union() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:4 error: 'unless' is a reserved keyword\nfn unless() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn unless() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:4 error: 'unorm' is a reserved keyword\nfn unorm() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn unorm() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:4 error: 'unsafe' is a reserved keyword\nfn unsafe() {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn unsafe() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:4 error: 'unsized' is a reserved keyword\nfn unsized() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn unsized() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:4 error: 'use' is a reserved keyword\nfn use() {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn use() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:4 error: 'using' is a reserved keyword\nfn using() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn using() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:4 error: 'varying' is a reserved keyword\nfn varying() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn varying() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:4 error: 'virtual' is a reserved keyword\nfn virtual() {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn virtual() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:4 error: 'volatile' is a reserved keyword\nfn volatile() {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn volatile() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:4 error: 'wgsl' is a reserved keyword\nfn wgsl() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn wgsl() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:4 error: 'where' is a reserved keyword\nfn where() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn where() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:4 error: 'with' is a reserved keyword\nfn with() {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn with() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:4 error: 'writeonly' is a reserved keyword\nfn writeonly() {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn writeonly() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:4 error: 'yield' is a reserved keyword\nfn yield() {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn yield() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo\"",
    "result": "OK",
    "src": "struct foo { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"Foo\"",
    "result": "OK",
    "src": "struct Foo { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"FOO\"",
    "result": "OK",
    "src": "struct FOO { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"_0\"",
    "result": "OK",
    "src": "struct _0 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "struct _foo0 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "struct _0foo { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "struct foo__0 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "struct Δέλτα { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "struct réflexion { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "struct Кызыл { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "struct 𐰓𐰏𐰇 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "struct 朝焼け { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "struct سلام { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "struct 검정 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "struct שָׁלוֹם { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "struct गुलाबी { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "struct փիրուզ { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"array\"",
    "result": "OK",
    "src": "struct array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"atomic\"",
    "result": "OK",
    "src": "struct atomic { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"bool\"",
    "result": "OK",
    "src": "struct bool { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"bf16\"",
    "result": "OK",
    "src": "struct bf16 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "struct bitcast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"f32\"",
    "result": "OK",
    "src": "struct f32 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"f16\"",
    "result": "OK",
    "src": "struct f16 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"f64\"",
    "result": "OK",
    "src": "struct f64 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"i32\"",
    "result": "OK",
    "src": "struct i32 { i : u32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"i16\"",
    "result": "OK",
    "src": "struct i16 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"i64\"",
    "result": "OK",
    "src": "struct i64 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"i8\"",
    "result": "OK",
    "src": "struct i8 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "struct mat2x2 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "struct mat2x3 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "struct mat2x4 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "struct mat3x2 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "struct mat3x3 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "struct mat3x4 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "struct mat4x2 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "struct mat4x3 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "struct mat4x4 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"ptr\"",
    "result": "OK",
    "src": "struct ptr { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"quat\"",
    "result": "OK",
    "src": "struct quat { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"sampler\"",
    "result": "OK",
    "src": "struct sampler { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "struct sampler_comparison { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"signed\"",
    "result": "OK",
    "src": "struct signed { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "struct texture_1d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "struct texture_2d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "struct texture_2d_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "struct texture_3d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "struct texture_cube { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "struct texture_cube_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "struct texture_multisampled_2d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "struct texture_storage_1d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "struct texture_storage_2d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "struct texture_storage_2d_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "struct texture_storage_3d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "struct texture_depth_2d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "struct texture_depth_2d_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "struct texture_depth_cube { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "struct texture_depth_cube_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "struct texture_depth_multisampled_2d { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"u32\"",
    "result": "OK",
    "src": "struct u32 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"u16\"",
    "result": "OK",
    "src": "struct u16 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"u64\"",
    "result": "OK",
    "src": "struct u64 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"u8\"",
    "result": "OK",
    "src": "struct u8 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "struct unsigned { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"vec2\"",
    "result": "OK",
    "src": "struct vec2 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"vec3\"",
    "result": "OK",
    "src": "struct vec3 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"vec4\"",
    "result": "OK",
    "src": "struct vec4 { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct _ { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct _ { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:8 error: identifiers must not start with two or more underscores\nstruct __ { i : i32 }\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct __ { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:8 error: identifiers must not start with two or more underscores\nstruct __foo { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct __foo { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct 0foo { i : i32 }\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct 0foo { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo.bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo.bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo-bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo-bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo+bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo+bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:11 error: invalid character found\nstruct foo#bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo#bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo!bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo!bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:11 error: invalid character found\nstruct foo\\bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo\\bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo/bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo/bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo,bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo,bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo@bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo@bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:11 error: expected '{' for struct declaration\nstruct foo::bar { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct foo::bar { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct alias { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct alias { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct break { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct break { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct case { i : i32 }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct case { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct const { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct const { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct const_assert { i : i32 }\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct const_assert { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct continue { i : i32 }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct continue { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct continuing { i : i32 }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct continuing { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct default { i : i32 }\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct default { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct diagnostic { i : i32 }\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct diagnostic { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct discard { i : i32 }\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct discard { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct else { i : i32 }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct else { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct enable { i : i32 }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct enable { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct false { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct false { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct fn { i : i32 }\n ^^\n\n:1:11 error: expected identifier for function declaration\nstruct fn { i : i32 }\n ^\n\n:1:13 error: expected 'var' for variable declaration\nstruct fn { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct fn { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct for { i : i32 }\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct for { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct if { i : i32 }\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct if { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct let { i : i32 }\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct let { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct loop { i : i32 }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct loop { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct override { i : i32 }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct override { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct requires { i : i32 }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct requires { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct return { i : i32 }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct return { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct struct { i : i32 }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct struct { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct switch { i : i32 }\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct switch { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct true { i : i32 }\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct true { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct var { i : i32 }\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct var { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct while { i : i32 }\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct while { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:8 error: 'NULL' is a reserved keyword\nstruct NULL { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct NULL { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct NULL { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:8 error: 'Self' is a reserved keyword\nstruct Self { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct Self { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct Self { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:8 error: 'abstract' is a reserved keyword\nstruct abstract { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct abstract { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct abstract { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:8 error: 'active' is a reserved keyword\nstruct active { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct active { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct active { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:8 error: 'alignas' is a reserved keyword\nstruct alignas { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct alignas { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct alignas { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:8 error: 'alignof' is a reserved keyword\nstruct alignof { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct alignof { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct alignof { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:8 error: 'as' is a reserved keyword\nstruct as { i : i32 }\n ^^\n\n:1:11 error: unexpected token\nstruct as { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct as { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:8 error: 'asm' is a reserved keyword\nstruct asm { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct asm { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct asm { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:8 error: 'asm_fragment' is a reserved keyword\nstruct asm_fragment { i : i32 }\n ^^^^^^^^^^^^\n\n:1:21 error: unexpected token\nstruct asm_fragment { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct asm_fragment { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:8 error: 'async' is a reserved keyword\nstruct async { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct async { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct async { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:8 error: 'attribute' is a reserved keyword\nstruct attribute { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct attribute { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct attribute { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:8 error: 'auto' is a reserved keyword\nstruct auto { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct auto { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct auto { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:8 error: 'await' is a reserved keyword\nstruct await { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct await { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct await { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:8 error: 'become' is a reserved keyword\nstruct become { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct become { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct become { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:8 error: 'binding_array' is a reserved keyword\nstruct binding_array { i : i32 }\n ^^^^^^^^^^^^^\n\n:1:22 error: unexpected token\nstruct binding_array { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct binding_array { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:8 error: 'cast' is a reserved keyword\nstruct cast { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct cast { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct cast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:8 error: 'catch' is a reserved keyword\nstruct catch { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct catch { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct catch { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:8 error: 'class' is a reserved keyword\nstruct class { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct class { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct class { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:8 error: 'co_await' is a reserved keyword\nstruct co_await { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct co_await { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct co_await { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:8 error: 'co_return' is a reserved keyword\nstruct co_return { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct co_return { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct co_return { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:8 error: 'co_yield' is a reserved keyword\nstruct co_yield { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct co_yield { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct co_yield { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:8 error: 'coherent' is a reserved keyword\nstruct coherent { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct coherent { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct coherent { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:8 error: 'column_major' is a reserved keyword\nstruct column_major { i : i32 }\n ^^^^^^^^^^^^\n\n:1:21 error: unexpected token\nstruct column_major { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct column_major { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:8 error: 'common' is a reserved keyword\nstruct common { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct common { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct common { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:8 error: 'compile' is a reserved keyword\nstruct compile { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct compile { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct compile { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:8 error: 'compile_fragment' is a reserved keyword\nstruct compile_fragment { i : i32 }\n ^^^^^^^^^^^^^^^^\n\n:1:25 error: unexpected token\nstruct compile_fragment { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct compile_fragment { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:8 error: 'concept' is a reserved keyword\nstruct concept { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct concept { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct concept { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:8 error: 'const_cast' is a reserved keyword\nstruct const_cast { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct const_cast { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct const_cast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:8 error: 'consteval' is a reserved keyword\nstruct consteval { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct consteval { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct consteval { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:8 error: 'constexpr' is a reserved keyword\nstruct constexpr { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct constexpr { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct constexpr { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:8 error: 'constinit' is a reserved keyword\nstruct constinit { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct constinit { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct constinit { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:8 error: 'crate' is a reserved keyword\nstruct crate { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct crate { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct crate { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:8 error: 'debugger' is a reserved keyword\nstruct debugger { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct debugger { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct debugger { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:8 error: 'decltype' is a reserved keyword\nstruct decltype { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct decltype { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct decltype { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:8 error: 'delete' is a reserved keyword\nstruct delete { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct delete { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct delete { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:8 error: 'demote' is a reserved keyword\nstruct demote { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct demote { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct demote { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:8 error: 'demote_to_helper' is a reserved keyword\nstruct demote_to_helper { i : i32 }\n ^^^^^^^^^^^^^^^^\n\n:1:25 error: unexpected token\nstruct demote_to_helper { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct demote_to_helper { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:8 error: 'do' is a reserved keyword\nstruct do { i : i32 }\n ^^\n\n:1:11 error: unexpected token\nstruct do { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct do { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:8 error: 'dynamic_cast' is a reserved keyword\nstruct dynamic_cast { i : i32 }\n ^^^^^^^^^^^^\n\n:1:21 error: unexpected token\nstruct dynamic_cast { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct dynamic_cast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:8 error: 'enum' is a reserved keyword\nstruct enum { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct enum { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct enum { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:8 error: 'explicit' is a reserved keyword\nstruct explicit { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct explicit { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct explicit { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:8 error: 'export' is a reserved keyword\nstruct export { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct export { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct export { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:8 error: 'extends' is a reserved keyword\nstruct extends { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct extends { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct extends { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:8 error: 'extern' is a reserved keyword\nstruct extern { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct extern { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct extern { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:8 error: 'external' is a reserved keyword\nstruct external { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct external { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct external { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:8 error: expected identifier for struct declaration\nstruct fallthrough { i : i32 }\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct fallthrough { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:8 error: 'filter' is a reserved keyword\nstruct filter { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct filter { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct filter { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:8 error: 'final' is a reserved keyword\nstruct final { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct final { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct final { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:8 error: 'finally' is a reserved keyword\nstruct finally { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct finally { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct finally { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:8 error: 'friend' is a reserved keyword\nstruct friend { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct friend { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct friend { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:8 error: 'from' is a reserved keyword\nstruct from { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct from { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct from { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:8 error: 'fxgroup' is a reserved keyword\nstruct fxgroup { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct fxgroup { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct fxgroup { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:8 error: 'get' is a reserved keyword\nstruct get { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct get { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct get { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:8 error: 'goto' is a reserved keyword\nstruct goto { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct goto { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct goto { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:8 error: 'groupshared' is a reserved keyword\nstruct groupshared { i : i32 }\n ^^^^^^^^^^^\n\n:1:20 error: unexpected token\nstruct groupshared { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct groupshared { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:8 error: 'highp' is a reserved keyword\nstruct highp { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct highp { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct highp { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:8 error: 'impl' is a reserved keyword\nstruct impl { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct impl { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct impl { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:8 error: 'implements' is a reserved keyword\nstruct implements { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct implements { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct implements { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:8 error: 'import' is a reserved keyword\nstruct import { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct import { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct import { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:8 error: 'inline' is a reserved keyword\nstruct inline { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct inline { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct inline { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:8 error: 'instanceof' is a reserved keyword\nstruct instanceof { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct instanceof { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct instanceof { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:8 error: 'interface' is a reserved keyword\nstruct interface { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct interface { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct interface { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:8 error: 'layout' is a reserved keyword\nstruct layout { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct layout { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct layout { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:8 error: 'lowp' is a reserved keyword\nstruct lowp { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct lowp { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct lowp { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:8 error: 'macro' is a reserved keyword\nstruct macro { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct macro { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct macro { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:8 error: 'macro_rules' is a reserved keyword\nstruct macro_rules { i : i32 }\n ^^^^^^^^^^^\n\n:1:20 error: unexpected token\nstruct macro_rules { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct macro_rules { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:8 error: 'match' is a reserved keyword\nstruct match { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct match { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct match { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:8 error: 'mediump' is a reserved keyword\nstruct mediump { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct mediump { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct mediump { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:8 error: 'meta' is a reserved keyword\nstruct meta { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct meta { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct meta { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:8 error: 'mod' is a reserved keyword\nstruct mod { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct mod { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct mod { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:8 error: 'module' is a reserved keyword\nstruct module { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct module { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct module { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:8 error: 'move' is a reserved keyword\nstruct move { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct move { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct move { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:8 error: 'mut' is a reserved keyword\nstruct mut { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct mut { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct mut { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:8 error: 'mutable' is a reserved keyword\nstruct mutable { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct mutable { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct mutable { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:8 error: 'namespace' is a reserved keyword\nstruct namespace { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct namespace { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct namespace { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:8 error: 'new' is a reserved keyword\nstruct new { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct new { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct new { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:8 error: 'nil' is a reserved keyword\nstruct nil { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct nil { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct nil { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:8 error: 'noexcept' is a reserved keyword\nstruct noexcept { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct noexcept { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct noexcept { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:8 error: 'noinline' is a reserved keyword\nstruct noinline { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct noinline { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct noinline { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:8 error: 'nointerpolation' is a reserved keyword\nstruct nointerpolation { i : i32 }\n ^^^^^^^^^^^^^^^\n\n:1:24 error: unexpected token\nstruct nointerpolation { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct nointerpolation { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "struct non_coherent { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "struct noncoherent { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:8 error: 'noperspective' is a reserved keyword\nstruct noperspective { i : i32 }\n ^^^^^^^^^^^^^\n\n:1:22 error: unexpected token\nstruct noperspective { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct noperspective { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:8 error: 'null' is a reserved keyword\nstruct null { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct null { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct null { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:8 error: 'nullptr' is a reserved keyword\nstruct nullptr { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct nullptr { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct nullptr { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:8 error: 'of' is a reserved keyword\nstruct of { i : i32 }\n ^^\n\n:1:11 error: unexpected token\nstruct of { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct of { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:8 error: 'operator' is a reserved keyword\nstruct operator { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct operator { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct operator { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:8 error: 'package' is a reserved keyword\nstruct package { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct package { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct package { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:8 error: 'packoffset' is a reserved keyword\nstruct packoffset { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct packoffset { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct packoffset { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:8 error: 'partition' is a reserved keyword\nstruct partition { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct partition { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct partition { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:8 error: 'pass' is a reserved keyword\nstruct pass { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct pass { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct pass { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:8 error: 'patch' is a reserved keyword\nstruct patch { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct patch { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct patch { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:8 error: 'pixelfragment' is a reserved keyword\nstruct pixelfragment { i : i32 }\n ^^^^^^^^^^^^^\n\n:1:22 error: unexpected token\nstruct pixelfragment { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct pixelfragment { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:8 error: 'precise' is a reserved keyword\nstruct precise { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct precise { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct precise { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:8 error: 'precision' is a reserved keyword\nstruct precision { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct precision { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct precision { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:8 error: 'premerge' is a reserved keyword\nstruct premerge { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct premerge { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct premerge { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:8 error: 'priv' is a reserved keyword\nstruct priv { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct priv { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct priv { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:8 error: 'protected' is a reserved keyword\nstruct protected { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct protected { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct protected { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:8 error: 'pub' is a reserved keyword\nstruct pub { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct pub { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct pub { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:8 error: 'public' is a reserved keyword\nstruct public { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct public { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct public { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:8 error: 'readonly' is a reserved keyword\nstruct readonly { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct readonly { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct readonly { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:8 error: 'ref' is a reserved keyword\nstruct ref { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct ref { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct ref { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:8 error: 'regardless' is a reserved keyword\nstruct regardless { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct regardless { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct regardless { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:8 error: 'register' is a reserved keyword\nstruct register { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct register { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct register { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:8 error: 'reinterpret_cast' is a reserved keyword\nstruct reinterpret_cast { i : i32 }\n ^^^^^^^^^^^^^^^^\n\n:1:25 error: unexpected token\nstruct reinterpret_cast { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct reinterpret_cast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:8 error: 'require' is a reserved keyword\nstruct require { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct require { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct require { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:8 error: 'resource' is a reserved keyword\nstruct resource { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct resource { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct resource { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:8 error: 'restrict' is a reserved keyword\nstruct restrict { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct restrict { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct restrict { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:8 error: 'self' is a reserved keyword\nstruct self { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct self { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct self { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:8 error: 'set' is a reserved keyword\nstruct set { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct set { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct set { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:8 error: 'shared' is a reserved keyword\nstruct shared { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct shared { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct shared { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:8 error: 'sizeof' is a reserved keyword\nstruct sizeof { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct sizeof { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct sizeof { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:8 error: 'smooth' is a reserved keyword\nstruct smooth { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct smooth { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct smooth { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:8 error: 'snorm' is a reserved keyword\nstruct snorm { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct snorm { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct snorm { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:8 error: 'static' is a reserved keyword\nstruct static { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct static { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct static { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:8 error: 'static_assert' is a reserved keyword\nstruct static_assert { i : i32 }\n ^^^^^^^^^^^^^\n\n:1:22 error: unexpected token\nstruct static_assert { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct static_assert { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:8 error: 'static_cast' is a reserved keyword\nstruct static_cast { i : i32 }\n ^^^^^^^^^^^\n\n:1:20 error: unexpected token\nstruct static_cast { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct static_cast { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:8 error: 'std' is a reserved keyword\nstruct std { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct std { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct std { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:8 error: 'subroutine' is a reserved keyword\nstruct subroutine { i : i32 }\n ^^^^^^^^^^\n\n:1:19 error: unexpected token\nstruct subroutine { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct subroutine { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:8 error: 'super' is a reserved keyword\nstruct super { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct super { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct super { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:8 error: 'target' is a reserved keyword\nstruct target { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct target { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct target { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:8 error: 'template' is a reserved keyword\nstruct template { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct template { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct template { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:8 error: 'this' is a reserved keyword\nstruct this { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct this { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct this { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:8 error: 'thread_local' is a reserved keyword\nstruct thread_local { i : i32 }\n ^^^^^^^^^^^^\n\n:1:21 error: unexpected token\nstruct thread_local { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct thread_local { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:8 error: 'throw' is a reserved keyword\nstruct throw { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct throw { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct throw { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:8 error: 'trait' is a reserved keyword\nstruct trait { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct trait { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct trait { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:8 error: 'try' is a reserved keyword\nstruct try { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct try { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct try { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:8 error: 'type' is a reserved keyword\nstruct type { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct type { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct type { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:8 error: 'typedef' is a reserved keyword\nstruct typedef { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct typedef { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct typedef { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:8 error: 'typeid' is a reserved keyword\nstruct typeid { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct typeid { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct typeid { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:8 error: 'typename' is a reserved keyword\nstruct typename { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct typename { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct typename { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:8 error: 'typeof' is a reserved keyword\nstruct typeof { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct typeof { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct typeof { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:8 error: 'union' is a reserved keyword\nstruct union { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct union { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct union { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:8 error: 'unless' is a reserved keyword\nstruct unless { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct unless { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct unless { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:8 error: 'unorm' is a reserved keyword\nstruct unorm { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct unorm { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct unorm { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:8 error: 'unsafe' is a reserved keyword\nstruct unsafe { i : i32 }\n ^^^^^^\n\n:1:15 error: unexpected token\nstruct unsafe { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct unsafe { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:8 error: 'unsized' is a reserved keyword\nstruct unsized { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct unsized { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct unsized { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:8 error: 'use' is a reserved keyword\nstruct use { i : i32 }\n ^^^\n\n:1:12 error: unexpected token\nstruct use { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct use { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:8 error: 'using' is a reserved keyword\nstruct using { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct using { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct using { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:8 error: 'varying' is a reserved keyword\nstruct varying { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct varying { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct varying { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:8 error: 'virtual' is a reserved keyword\nstruct virtual { i : i32 }\n ^^^^^^^\n\n:1:16 error: unexpected token\nstruct virtual { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct virtual { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:8 error: 'volatile' is a reserved keyword\nstruct volatile { i : i32 }\n ^^^^^^^^\n\n:1:17 error: unexpected token\nstruct volatile { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct volatile { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:8 error: 'wgsl' is a reserved keyword\nstruct wgsl { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct wgsl { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct wgsl { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:8 error: 'where' is a reserved keyword\nstruct where { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct where { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct where { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:8 error: 'with' is a reserved keyword\nstruct with { i : i32 }\n ^^^^\n\n:1:13 error: unexpected token\nstruct with { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct with { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:8 error: 'writeonly' is a reserved keyword\nstruct writeonly { i : i32 }\n ^^^^^^^^^\n\n:1:18 error: unexpected token\nstruct writeonly { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct writeonly { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:struct_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:8 error: 'yield' is a reserved keyword\nstruct yield { i : i32 }\n ^^^^^\n\n:1:14 error: unexpected token\nstruct yield { i : i32 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct yield { i : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo\"",
    "result": "OK",
    "src": "alias foo = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"Foo\"",
    "result": "OK",
    "src": "alias Foo = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"FOO\"",
    "result": "OK",
    "src": "alias FOO = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"_0\"",
    "result": "OK",
    "src": "alias _0 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "alias _foo0 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "alias _0foo = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "alias foo__0 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "alias Δέλτα = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "alias réflexion = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "alias Кызыл = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "alias 𐰓𐰏𐰇 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "alias 朝焼け = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "alias سلام = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "alias 검정 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "alias שָׁלוֹם = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "alias गुलाबी = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "alias փիրուզ = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"array\"",
    "result": "OK",
    "src": "alias array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"atomic\"",
    "result": "OK",
    "src": "alias atomic = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"bool\"",
    "result": "OK",
    "src": "alias bool = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"bf16\"",
    "result": "OK",
    "src": "alias bf16 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "alias bitcast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"f32\"",
    "result": "OK",
    "src": "alias f32 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"f16\"",
    "result": "OK",
    "src": "alias f16 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"f64\"",
    "result": "OK",
    "src": "alias f64 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"i32\"",
    "result": "OK",
    "src": "alias i32 = u32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"i16\"",
    "result": "OK",
    "src": "alias i16 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"i64\"",
    "result": "OK",
    "src": "alias i64 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"i8\"",
    "result": "OK",
    "src": "alias i8 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "alias mat2x2 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "alias mat2x3 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "alias mat2x4 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "alias mat3x2 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "alias mat3x3 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "alias mat3x4 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "alias mat4x2 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "alias mat4x3 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "alias mat4x4 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"ptr\"",
    "result": "OK",
    "src": "alias ptr = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"quat\"",
    "result": "OK",
    "src": "alias quat = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"sampler\"",
    "result": "OK",
    "src": "alias sampler = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "alias sampler_comparison = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"signed\"",
    "result": "OK",
    "src": "alias signed = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "alias texture_1d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "alias texture_2d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "alias texture_2d_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "alias texture_3d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "alias texture_cube = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "alias texture_cube_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "alias texture_multisampled_2d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "alias texture_storage_1d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "alias texture_storage_2d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "alias texture_storage_2d_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "alias texture_storage_3d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "alias texture_depth_2d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "alias texture_depth_2d_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "alias texture_depth_cube = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "alias texture_depth_cube_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "alias texture_depth_multisampled_2d = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"u32\"",
    "result": "OK",
    "src": "alias u32 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"u16\"",
    "result": "OK",
    "src": "alias u16 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"u64\"",
    "result": "OK",
    "src": "alias u64 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"u8\"",
    "result": "OK",
    "src": "alias u8 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "alias unsigned = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"vec2\"",
    "result": "OK",
    "src": "alias vec2 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"vec3\"",
    "result": "OK",
    "src": "alias vec3 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"vec4\"",
    "result": "OK",
    "src": "alias vec4 = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias _ = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias _ = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:7 error: identifiers must not start with two or more underscores\nalias __ = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias __ = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:7 error: identifiers must not start with two or more underscores\nalias __foo = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias __foo = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias 0foo = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias 0foo = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo.bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo.bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo-bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo-bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo+bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo+bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:10 error: invalid character found\nalias foo#bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo#bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo!bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo!bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:10 error: invalid character found\nalias foo\\bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo\\bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo/bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo/bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo,bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo,bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo@bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo@bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:10 error: expected '=' for type alias\nalias foo::bar = i32;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias foo::bar = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias alias = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias alias = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias break = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias break = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias case = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias case = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias const = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias const = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias const_assert = i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias const_assert = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias continue = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias continue = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias continuing = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias continuing = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias default = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias default = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias diagnostic = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias diagnostic = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias discard = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias discard = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias else = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias else = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias enable = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias enable = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias false = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias false = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias fn = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias fn = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias for = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias for = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias if = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias if = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias let = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias let = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias loop = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias loop = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias override = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias override = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias requires = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias requires = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias return = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias return = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias struct = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias struct = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias switch = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias switch = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias true = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias true = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias var = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias var = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias while = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias while = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:7 error: 'NULL' is a reserved keyword\nalias NULL = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias NULL = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:7 error: 'Self' is a reserved keyword\nalias Self = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias Self = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:7 error: 'abstract' is a reserved keyword\nalias abstract = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias abstract = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:7 error: 'active' is a reserved keyword\nalias active = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias active = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:7 error: 'alignas' is a reserved keyword\nalias alignas = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias alignas = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'alignof' is a reserved keyword\nalias alignof = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias alignof = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:7 error: 'as' is a reserved keyword\nalias as = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias as = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'asm' is a reserved keyword\nalias asm = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias asm = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'asm_fragment' is a reserved keyword\nalias asm_fragment = i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias asm_fragment = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:7 error: 'async' is a reserved keyword\nalias async = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias async = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:7 error: 'attribute' is a reserved keyword\nalias attribute = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias attribute = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:7 error: 'auto' is a reserved keyword\nalias auto = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias auto = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:7 error: 'await' is a reserved keyword\nalias await = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias await = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:7 error: 'become' is a reserved keyword\nalias become = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias become = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:7 error: 'binding_array' is a reserved keyword\nalias binding_array = i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias binding_array = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'cast' is a reserved keyword\nalias cast = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias cast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:7 error: 'catch' is a reserved keyword\nalias catch = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias catch = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:7 error: 'class' is a reserved keyword\nalias class = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias class = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_await' is a reserved keyword\nalias co_await = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias co_await = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_return' is a reserved keyword\nalias co_return = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias co_return = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:7 error: 'co_yield' is a reserved keyword\nalias co_yield = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias co_yield = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:7 error: 'coherent' is a reserved keyword\nalias coherent = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias coherent = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:7 error: 'column_major' is a reserved keyword\nalias column_major = i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias column_major = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:7 error: 'common' is a reserved keyword\nalias common = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias common = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:7 error: 'compile' is a reserved keyword\nalias compile = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias compile = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'compile_fragment' is a reserved keyword\nalias compile_fragment = i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias compile_fragment = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:7 error: 'concept' is a reserved keyword\nalias concept = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias concept = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'const_cast' is a reserved keyword\nalias const_cast = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias const_cast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:7 error: 'consteval' is a reserved keyword\nalias consteval = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias consteval = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:7 error: 'constexpr' is a reserved keyword\nalias constexpr = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias constexpr = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:7 error: 'constinit' is a reserved keyword\nalias constinit = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias constinit = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:7 error: 'crate' is a reserved keyword\nalias crate = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias crate = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:7 error: 'debugger' is a reserved keyword\nalias debugger = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias debugger = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:7 error: 'decltype' is a reserved keyword\nalias decltype = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias decltype = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:7 error: 'delete' is a reserved keyword\nalias delete = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias delete = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:7 error: 'demote' is a reserved keyword\nalias demote = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias demote = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:7 error: 'demote_to_helper' is a reserved keyword\nalias demote_to_helper = i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias demote_to_helper = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:7 error: 'do' is a reserved keyword\nalias do = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias do = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'dynamic_cast' is a reserved keyword\nalias dynamic_cast = i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias dynamic_cast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:7 error: 'enum' is a reserved keyword\nalias enum = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias enum = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:7 error: 'explicit' is a reserved keyword\nalias explicit = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias explicit = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:7 error: 'export' is a reserved keyword\nalias export = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias export = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:7 error: 'extends' is a reserved keyword\nalias extends = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias extends = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:7 error: 'extern' is a reserved keyword\nalias extern = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias extern = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:7 error: 'external' is a reserved keyword\nalias external = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias external = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:7 error: expected identifier for type alias\nalias fallthrough = i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias fallthrough = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:7 error: 'filter' is a reserved keyword\nalias filter = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias filter = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:7 error: 'final' is a reserved keyword\nalias final = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias final = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:7 error: 'finally' is a reserved keyword\nalias finally = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias finally = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:7 error: 'friend' is a reserved keyword\nalias friend = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias friend = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:7 error: 'from' is a reserved keyword\nalias from = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias from = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:7 error: 'fxgroup' is a reserved keyword\nalias fxgroup = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias fxgroup = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:7 error: 'get' is a reserved keyword\nalias get = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias get = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:7 error: 'goto' is a reserved keyword\nalias goto = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias goto = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:7 error: 'groupshared' is a reserved keyword\nalias groupshared = i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias groupshared = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:7 error: 'highp' is a reserved keyword\nalias highp = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias highp = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:7 error: 'impl' is a reserved keyword\nalias impl = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias impl = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:7 error: 'implements' is a reserved keyword\nalias implements = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias implements = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:7 error: 'import' is a reserved keyword\nalias import = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias import = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:7 error: 'inline' is a reserved keyword\nalias inline = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias inline = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'instanceof' is a reserved keyword\nalias instanceof = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias instanceof = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:7 error: 'interface' is a reserved keyword\nalias interface = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias interface = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:7 error: 'layout' is a reserved keyword\nalias layout = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias layout = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:7 error: 'lowp' is a reserved keyword\nalias lowp = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias lowp = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:7 error: 'macro' is a reserved keyword\nalias macro = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias macro = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:7 error: 'macro_rules' is a reserved keyword\nalias macro_rules = i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias macro_rules = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:7 error: 'match' is a reserved keyword\nalias match = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias match = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mediump' is a reserved keyword\nalias mediump = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias mediump = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:7 error: 'meta' is a reserved keyword\nalias meta = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias meta = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mod' is a reserved keyword\nalias mod = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias mod = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:7 error: 'module' is a reserved keyword\nalias module = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias module = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:7 error: 'move' is a reserved keyword\nalias move = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias move = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mut' is a reserved keyword\nalias mut = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias mut = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:7 error: 'mutable' is a reserved keyword\nalias mutable = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias mutable = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:7 error: 'namespace' is a reserved keyword\nalias namespace = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias namespace = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:7 error: 'new' is a reserved keyword\nalias new = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias new = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nil' is a reserved keyword\nalias nil = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias nil = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noexcept' is a reserved keyword\nalias noexcept = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias noexcept = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noinline' is a reserved keyword\nalias noinline = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias noinline = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nointerpolation' is a reserved keyword\nalias nointerpolation = i32;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias nointerpolation = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "alias non_coherent = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "alias noncoherent = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:7 error: 'noperspective' is a reserved keyword\nalias noperspective = i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias noperspective = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:7 error: 'null' is a reserved keyword\nalias null = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias null = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:7 error: 'nullptr' is a reserved keyword\nalias nullptr = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias nullptr = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:7 error: 'of' is a reserved keyword\nalias of = i32;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias of = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:7 error: 'operator' is a reserved keyword\nalias operator = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias operator = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:7 error: 'package' is a reserved keyword\nalias package = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias package = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:7 error: 'packoffset' is a reserved keyword\nalias packoffset = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias packoffset = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:7 error: 'partition' is a reserved keyword\nalias partition = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias partition = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pass' is a reserved keyword\nalias pass = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias pass = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:7 error: 'patch' is a reserved keyword\nalias patch = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias patch = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pixelfragment' is a reserved keyword\nalias pixelfragment = i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias pixelfragment = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:7 error: 'precise' is a reserved keyword\nalias precise = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias precise = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:7 error: 'precision' is a reserved keyword\nalias precision = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias precision = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:7 error: 'premerge' is a reserved keyword\nalias premerge = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias premerge = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:7 error: 'priv' is a reserved keyword\nalias priv = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias priv = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:7 error: 'protected' is a reserved keyword\nalias protected = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias protected = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:7 error: 'pub' is a reserved keyword\nalias pub = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias pub = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:7 error: 'public' is a reserved keyword\nalias public = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias public = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:7 error: 'readonly' is a reserved keyword\nalias readonly = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias readonly = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:7 error: 'ref' is a reserved keyword\nalias ref = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias ref = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:7 error: 'regardless' is a reserved keyword\nalias regardless = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias regardless = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:7 error: 'register' is a reserved keyword\nalias register = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias register = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'reinterpret_cast' is a reserved keyword\nalias reinterpret_cast = i32;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias reinterpret_cast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:7 error: 'require' is a reserved keyword\nalias require = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias require = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:7 error: 'resource' is a reserved keyword\nalias resource = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias resource = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:7 error: 'restrict' is a reserved keyword\nalias restrict = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias restrict = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:7 error: 'self' is a reserved keyword\nalias self = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias self = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:7 error: 'set' is a reserved keyword\nalias set = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias set = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:7 error: 'shared' is a reserved keyword\nalias shared = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias shared = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'sizeof' is a reserved keyword\nalias sizeof = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias sizeof = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:7 error: 'smooth' is a reserved keyword\nalias smooth = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias smooth = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'snorm' is a reserved keyword\nalias snorm = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias snorm = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static' is a reserved keyword\nalias static = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias static = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static_assert' is a reserved keyword\nalias static_assert = i32;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias static_assert = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:7 error: 'static_cast' is a reserved keyword\nalias static_cast = i32;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias static_cast = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:7 error: 'std' is a reserved keyword\nalias std = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias std = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:7 error: 'subroutine' is a reserved keyword\nalias subroutine = i32;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias subroutine = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:7 error: 'super' is a reserved keyword\nalias super = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias super = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:7 error: 'target' is a reserved keyword\nalias target = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias target = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:7 error: 'template' is a reserved keyword\nalias template = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias template = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:7 error: 'this' is a reserved keyword\nalias this = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias this = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:7 error: 'thread_local' is a reserved keyword\nalias thread_local = i32;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias thread_local = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:7 error: 'throw' is a reserved keyword\nalias throw = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias throw = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:7 error: 'trait' is a reserved keyword\nalias trait = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias trait = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:7 error: 'try' is a reserved keyword\nalias try = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias try = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:7 error: 'type' is a reserved keyword\nalias type = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias type = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typedef' is a reserved keyword\nalias typedef = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias typedef = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typeid' is a reserved keyword\nalias typeid = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias typeid = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typename' is a reserved keyword\nalias typename = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias typename = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:7 error: 'typeof' is a reserved keyword\nalias typeof = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias typeof = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:7 error: 'union' is a reserved keyword\nalias union = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias union = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unless' is a reserved keyword\nalias unless = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias unless = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unorm' is a reserved keyword\nalias unorm = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias unorm = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unsafe' is a reserved keyword\nalias unsafe = i32;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias unsafe = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:7 error: 'unsized' is a reserved keyword\nalias unsized = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias unsized = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:7 error: 'use' is a reserved keyword\nalias use = i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias use = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:7 error: 'using' is a reserved keyword\nalias using = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias using = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:7 error: 'varying' is a reserved keyword\nalias varying = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias varying = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:7 error: 'virtual' is a reserved keyword\nalias virtual = i32;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias virtual = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:7 error: 'volatile' is a reserved keyword\nalias volatile = i32;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias volatile = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:7 error: 'wgsl' is a reserved keyword\nalias wgsl = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias wgsl = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:7 error: 'where' is a reserved keyword\nalias where = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias where = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:7 error: 'with' is a reserved keyword\nalias with = i32;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias with = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:7 error: 'writeonly' is a reserved keyword\nalias writeonly = i32;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias writeonly = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:alias_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:7 error: 'yield' is a reserved keyword\nalias yield = i32;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias yield = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo\"",
    "result": "OK",
    "src": "fn F(foo : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"Foo\"",
    "result": "OK",
    "src": "fn F(Foo : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"FOO\"",
    "result": "OK",
    "src": "fn F(FOO : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"_0\"",
    "result": "OK",
    "src": "fn F(_0 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "fn F(_foo0 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "fn F(_0foo : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "fn F(foo__0 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "fn F(Δέλτα : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "fn F(réflexion : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "fn F(Кызыл : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "fn F(𐰓𐰏𐰇 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "fn F(朝焼け : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "fn F(سلام : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "fn F(검정 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "fn F(שָׁלוֹם : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "fn F(गुलाबी : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "fn F(փիրուզ : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"array\"",
    "result": "OK",
    "src": "fn F(array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"atomic\"",
    "result": "OK",
    "src": "fn F(atomic : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"bool\"",
    "result": "OK",
    "src": "fn F(bool : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"bf16\"",
    "result": "OK",
    "src": "fn F(bf16 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "fn F(bitcast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"f32\"",
    "result": "OK",
    "src": "fn F(f32 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"f16\"",
    "result": "OK",
    "src": "fn F(f16 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"f64\"",
    "result": "OK",
    "src": "fn F(f64 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"i32\"",
    "result": "OK",
    "src": "fn F(i32 : u32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"i16\"",
    "result": "OK",
    "src": "fn F(i16 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"i64\"",
    "result": "OK",
    "src": "fn F(i64 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"i8\"",
    "result": "OK",
    "src": "fn F(i8 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "fn F(mat2x2 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "fn F(mat2x3 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "fn F(mat2x4 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "fn F(mat3x2 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "fn F(mat3x3 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "fn F(mat3x4 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "fn F(mat4x2 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "fn F(mat4x3 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "fn F(mat4x4 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"ptr\"",
    "result": "OK",
    "src": "fn F(ptr : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"quat\"",
    "result": "OK",
    "src": "fn F(quat : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"sampler\"",
    "result": "OK",
    "src": "fn F(sampler : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "fn F(sampler_comparison : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"signed\"",
    "result": "OK",
    "src": "fn F(signed : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "fn F(texture_1d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "fn F(texture_2d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "fn F(texture_2d_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "fn F(texture_3d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "fn F(texture_cube : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "fn F(texture_cube_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "fn F(texture_multisampled_2d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "fn F(texture_storage_1d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "fn F(texture_storage_2d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "fn F(texture_storage_2d_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "fn F(texture_storage_3d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "fn F(texture_depth_2d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "fn F(texture_depth_2d_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "fn F(texture_depth_cube : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "fn F(texture_depth_cube_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "fn F(texture_depth_multisampled_2d : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"u32\"",
    "result": "OK",
    "src": "fn F(u32 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"u16\"",
    "result": "OK",
    "src": "fn F(u16 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"u64\"",
    "result": "OK",
    "src": "fn F(u64 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"u8\"",
    "result": "OK",
    "src": "fn F(u8 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "fn F(unsigned : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"vec2\"",
    "result": "OK",
    "src": "fn F(vec2 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"vec3\"",
    "result": "OK",
    "src": "fn F(vec3 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"vec4\"",
    "result": "OK",
    "src": "fn F(vec4 : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(_ : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(_ : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :1:6 error: identifiers must not start with two or more underscores\nfn F(__ : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(__ : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :1:6 error: identifiers must not start with two or more underscores\nfn F(__foo : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(__foo : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(0foo : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(0foo : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo.bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo.bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo-bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo-bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo+bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo+bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :1:9 error: invalid character found\nfn F(foo#bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo#bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo!bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo!bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :1:9 error: invalid character found\nfn F(foo\\bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo\\bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo/bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo/bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo,bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo,bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :1:9 error: expected ':' for parameter\nfn F(foo@bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo@bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :1:10 error: invalid type for parameter\nfn F(foo::bar : i32) {}\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(foo::bar : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(alias : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(alias : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(break : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(break : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(case : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(case : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(const : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(const : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(const_assert : i32) {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(const_assert : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(continue : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(continue : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(continuing : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(continuing : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(default : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(default : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(diagnostic : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(diagnostic : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(discard : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(discard : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(else : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(else : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(enable : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(enable : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(false : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(false : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(fn : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(fn : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(for : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(for : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(if : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(if : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(let : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(let : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(loop : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(loop : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(override : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(override : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(requires : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(requires : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(return : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(return : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(struct : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(struct : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(switch : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(switch : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(true : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(true : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(var : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(var : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(while : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(while : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :1:6 error: 'NULL' is a reserved keyword\nfn F(NULL : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(NULL : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :1:6 error: 'Self' is a reserved keyword\nfn F(Self : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(Self : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :1:6 error: 'abstract' is a reserved keyword\nfn F(abstract : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(abstract : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :1:6 error: 'active' is a reserved keyword\nfn F(active : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(active : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :1:6 error: 'alignas' is a reserved keyword\nfn F(alignas : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(alignas : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :1:6 error: 'alignof' is a reserved keyword\nfn F(alignof : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(alignof : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :1:6 error: 'as' is a reserved keyword\nfn F(as : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(as : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :1:6 error: 'asm' is a reserved keyword\nfn F(asm : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(asm : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :1:6 error: 'asm_fragment' is a reserved keyword\nfn F(asm_fragment : i32) {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(asm_fragment : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :1:6 error: 'async' is a reserved keyword\nfn F(async : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(async : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :1:6 error: 'attribute' is a reserved keyword\nfn F(attribute : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(attribute : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :1:6 error: 'auto' is a reserved keyword\nfn F(auto : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(auto : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :1:6 error: 'await' is a reserved keyword\nfn F(await : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(await : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :1:6 error: 'become' is a reserved keyword\nfn F(become : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(become : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :1:6 error: 'binding_array' is a reserved keyword\nfn F(binding_array : i32) {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(binding_array : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :1:6 error: 'cast' is a reserved keyword\nfn F(cast : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(cast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :1:6 error: 'catch' is a reserved keyword\nfn F(catch : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(catch : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :1:6 error: 'class' is a reserved keyword\nfn F(class : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(class : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :1:6 error: 'co_await' is a reserved keyword\nfn F(co_await : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(co_await : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :1:6 error: 'co_return' is a reserved keyword\nfn F(co_return : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(co_return : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :1:6 error: 'co_yield' is a reserved keyword\nfn F(co_yield : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(co_yield : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :1:6 error: 'coherent' is a reserved keyword\nfn F(coherent : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(coherent : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :1:6 error: 'column_major' is a reserved keyword\nfn F(column_major : i32) {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(column_major : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :1:6 error: 'common' is a reserved keyword\nfn F(common : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(common : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :1:6 error: 'compile' is a reserved keyword\nfn F(compile : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(compile : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :1:6 error: 'compile_fragment' is a reserved keyword\nfn F(compile_fragment : i32) {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(compile_fragment : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :1:6 error: 'concept' is a reserved keyword\nfn F(concept : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(concept : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :1:6 error: 'const_cast' is a reserved keyword\nfn F(const_cast : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(const_cast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :1:6 error: 'consteval' is a reserved keyword\nfn F(consteval : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(consteval : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :1:6 error: 'constexpr' is a reserved keyword\nfn F(constexpr : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(constexpr : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :1:6 error: 'constinit' is a reserved keyword\nfn F(constinit : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(constinit : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :1:6 error: 'crate' is a reserved keyword\nfn F(crate : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(crate : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :1:6 error: 'debugger' is a reserved keyword\nfn F(debugger : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(debugger : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :1:6 error: 'decltype' is a reserved keyword\nfn F(decltype : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(decltype : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :1:6 error: 'delete' is a reserved keyword\nfn F(delete : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(delete : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :1:6 error: 'demote' is a reserved keyword\nfn F(demote : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(demote : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :1:6 error: 'demote_to_helper' is a reserved keyword\nfn F(demote_to_helper : i32) {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(demote_to_helper : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :1:6 error: 'do' is a reserved keyword\nfn F(do : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(do : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :1:6 error: 'dynamic_cast' is a reserved keyword\nfn F(dynamic_cast : i32) {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(dynamic_cast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :1:6 error: 'enum' is a reserved keyword\nfn F(enum : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(enum : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :1:6 error: 'explicit' is a reserved keyword\nfn F(explicit : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(explicit : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :1:6 error: 'export' is a reserved keyword\nfn F(export : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(export : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :1:6 error: 'extends' is a reserved keyword\nfn F(extends : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(extends : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :1:6 error: 'extern' is a reserved keyword\nfn F(extern : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(extern : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :1:6 error: 'external' is a reserved keyword\nfn F(external : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(external : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :1:6 error: expected ')' for function declaration\nfn F(fallthrough : i32) {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(fallthrough : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :1:6 error: 'filter' is a reserved keyword\nfn F(filter : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(filter : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :1:6 error: 'final' is a reserved keyword\nfn F(final : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(final : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :1:6 error: 'finally' is a reserved keyword\nfn F(finally : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(finally : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :1:6 error: 'friend' is a reserved keyword\nfn F(friend : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(friend : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :1:6 error: 'from' is a reserved keyword\nfn F(from : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(from : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :1:6 error: 'fxgroup' is a reserved keyword\nfn F(fxgroup : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(fxgroup : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :1:6 error: 'get' is a reserved keyword\nfn F(get : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(get : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :1:6 error: 'goto' is a reserved keyword\nfn F(goto : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(goto : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :1:6 error: 'groupshared' is a reserved keyword\nfn F(groupshared : i32) {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(groupshared : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :1:6 error: 'highp' is a reserved keyword\nfn F(highp : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(highp : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :1:6 error: 'impl' is a reserved keyword\nfn F(impl : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(impl : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :1:6 error: 'implements' is a reserved keyword\nfn F(implements : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(implements : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :1:6 error: 'import' is a reserved keyword\nfn F(import : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(import : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :1:6 error: 'inline' is a reserved keyword\nfn F(inline : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(inline : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :1:6 error: 'instanceof' is a reserved keyword\nfn F(instanceof : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(instanceof : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :1:6 error: 'interface' is a reserved keyword\nfn F(interface : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(interface : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :1:6 error: 'layout' is a reserved keyword\nfn F(layout : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(layout : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :1:6 error: 'lowp' is a reserved keyword\nfn F(lowp : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(lowp : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :1:6 error: 'macro' is a reserved keyword\nfn F(macro : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(macro : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :1:6 error: 'macro_rules' is a reserved keyword\nfn F(macro_rules : i32) {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(macro_rules : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :1:6 error: 'match' is a reserved keyword\nfn F(match : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(match : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :1:6 error: 'mediump' is a reserved keyword\nfn F(mediump : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(mediump : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :1:6 error: 'meta' is a reserved keyword\nfn F(meta : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(meta : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :1:6 error: 'mod' is a reserved keyword\nfn F(mod : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(mod : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :1:6 error: 'module' is a reserved keyword\nfn F(module : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(module : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :1:6 error: 'move' is a reserved keyword\nfn F(move : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(move : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :1:6 error: 'mut' is a reserved keyword\nfn F(mut : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(mut : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :1:6 error: 'mutable' is a reserved keyword\nfn F(mutable : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(mutable : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :1:6 error: 'namespace' is a reserved keyword\nfn F(namespace : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(namespace : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :1:6 error: 'new' is a reserved keyword\nfn F(new : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(new : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :1:6 error: 'nil' is a reserved keyword\nfn F(nil : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(nil : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :1:6 error: 'noexcept' is a reserved keyword\nfn F(noexcept : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(noexcept : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :1:6 error: 'noinline' is a reserved keyword\nfn F(noinline : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(noinline : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :1:6 error: 'nointerpolation' is a reserved keyword\nfn F(nointerpolation : i32) {}\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(nointerpolation : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "fn F(non_coherent : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "fn F(noncoherent : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :1:6 error: 'noperspective' is a reserved keyword\nfn F(noperspective : i32) {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(noperspective : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :1:6 error: 'null' is a reserved keyword\nfn F(null : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(null : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :1:6 error: 'nullptr' is a reserved keyword\nfn F(nullptr : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(nullptr : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :1:6 error: 'of' is a reserved keyword\nfn F(of : i32) {}\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(of : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :1:6 error: 'operator' is a reserved keyword\nfn F(operator : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(operator : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :1:6 error: 'package' is a reserved keyword\nfn F(package : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(package : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :1:6 error: 'packoffset' is a reserved keyword\nfn F(packoffset : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(packoffset : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :1:6 error: 'partition' is a reserved keyword\nfn F(partition : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(partition : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :1:6 error: 'pass' is a reserved keyword\nfn F(pass : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(pass : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :1:6 error: 'patch' is a reserved keyword\nfn F(patch : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(patch : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :1:6 error: 'pixelfragment' is a reserved keyword\nfn F(pixelfragment : i32) {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(pixelfragment : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :1:6 error: 'precise' is a reserved keyword\nfn F(precise : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(precise : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :1:6 error: 'precision' is a reserved keyword\nfn F(precision : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(precision : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :1:6 error: 'premerge' is a reserved keyword\nfn F(premerge : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(premerge : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :1:6 error: 'priv' is a reserved keyword\nfn F(priv : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(priv : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :1:6 error: 'protected' is a reserved keyword\nfn F(protected : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(protected : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :1:6 error: 'pub' is a reserved keyword\nfn F(pub : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(pub : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :1:6 error: 'public' is a reserved keyword\nfn F(public : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(public : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :1:6 error: 'readonly' is a reserved keyword\nfn F(readonly : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(readonly : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :1:6 error: 'ref' is a reserved keyword\nfn F(ref : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(ref : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :1:6 error: 'regardless' is a reserved keyword\nfn F(regardless : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(regardless : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :1:6 error: 'register' is a reserved keyword\nfn F(register : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(register : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :1:6 error: 'reinterpret_cast' is a reserved keyword\nfn F(reinterpret_cast : i32) {}\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(reinterpret_cast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :1:6 error: 'require' is a reserved keyword\nfn F(require : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(require : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :1:6 error: 'resource' is a reserved keyword\nfn F(resource : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(resource : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :1:6 error: 'restrict' is a reserved keyword\nfn F(restrict : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(restrict : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :1:6 error: 'self' is a reserved keyword\nfn F(self : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(self : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :1:6 error: 'set' is a reserved keyword\nfn F(set : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(set : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :1:6 error: 'shared' is a reserved keyword\nfn F(shared : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(shared : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :1:6 error: 'sizeof' is a reserved keyword\nfn F(sizeof : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(sizeof : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :1:6 error: 'smooth' is a reserved keyword\nfn F(smooth : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(smooth : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :1:6 error: 'snorm' is a reserved keyword\nfn F(snorm : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(snorm : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :1:6 error: 'static' is a reserved keyword\nfn F(static : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(static : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :1:6 error: 'static_assert' is a reserved keyword\nfn F(static_assert : i32) {}\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(static_assert : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :1:6 error: 'static_cast' is a reserved keyword\nfn F(static_cast : i32) {}\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(static_cast : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :1:6 error: 'std' is a reserved keyword\nfn F(std : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(std : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :1:6 error: 'subroutine' is a reserved keyword\nfn F(subroutine : i32) {}\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(subroutine : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :1:6 error: 'super' is a reserved keyword\nfn F(super : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(super : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :1:6 error: 'target' is a reserved keyword\nfn F(target : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(target : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :1:6 error: 'template' is a reserved keyword\nfn F(template : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(template : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :1:6 error: 'this' is a reserved keyword\nfn F(this : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(this : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :1:6 error: 'thread_local' is a reserved keyword\nfn F(thread_local : i32) {}\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(thread_local : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :1:6 error: 'throw' is a reserved keyword\nfn F(throw : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(throw : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :1:6 error: 'trait' is a reserved keyword\nfn F(trait : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(trait : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :1:6 error: 'try' is a reserved keyword\nfn F(try : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(try : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :1:6 error: 'type' is a reserved keyword\nfn F(type : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(type : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :1:6 error: 'typedef' is a reserved keyword\nfn F(typedef : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(typedef : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :1:6 error: 'typeid' is a reserved keyword\nfn F(typeid : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(typeid : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :1:6 error: 'typename' is a reserved keyword\nfn F(typename : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(typename : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :1:6 error: 'typeof' is a reserved keyword\nfn F(typeof : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(typeof : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :1:6 error: 'union' is a reserved keyword\nfn F(union : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(union : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :1:6 error: 'unless' is a reserved keyword\nfn F(unless : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(unless : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :1:6 error: 'unorm' is a reserved keyword\nfn F(unorm : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(unorm : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :1:6 error: 'unsafe' is a reserved keyword\nfn F(unsafe : i32) {}\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(unsafe : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :1:6 error: 'unsized' is a reserved keyword\nfn F(unsized : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(unsized : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :1:6 error: 'use' is a reserved keyword\nfn F(use : i32) {}\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(use : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :1:6 error: 'using' is a reserved keyword\nfn F(using : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(using : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :1:6 error: 'varying' is a reserved keyword\nfn F(varying : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(varying : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :1:6 error: 'virtual' is a reserved keyword\nfn F(virtual : i32) {}\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(virtual : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :1:6 error: 'volatile' is a reserved keyword\nfn F(volatile : i32) {}\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(volatile : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :1:6 error: 'wgsl' is a reserved keyword\nfn F(wgsl : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(wgsl : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :1:6 error: 'where' is a reserved keyword\nfn F(where : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(where : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :1:6 error: 'with' is a reserved keyword\nfn F(with : i32) {}\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(with : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :1:6 error: 'writeonly' is a reserved keyword\nfn F(writeonly : i32) {}\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(writeonly : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_param_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :1:6 error: 'yield' is a reserved keyword\nfn F(yield : i32) {}\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F(yield : i32) {}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo\"",
    "result": "OK",
    "src": "fn F() {\n  const foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"Foo\"",
    "result": "OK",
    "src": "fn F() {\n  const Foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"FOO\"",
    "result": "OK",
    "src": "fn F() {\n  const FOO = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"_0\"",
    "result": "OK",
    "src": "fn F() {\n  const _0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "fn F() {\n  const _foo0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "fn F() {\n  const _0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "fn F() {\n  const foo__0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "fn F() {\n  const Δέλτα = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "fn F() {\n  const réflexion = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "fn F() {\n  const Кызыл = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "fn F() {\n  const 𐰓𐰏𐰇 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "fn F() {\n  const 朝焼け = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "fn F() {\n  const سلام = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "fn F() {\n  const 검정 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "fn F() {\n  const שָׁלוֹם = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "fn F() {\n  const गुलाबी = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "fn F() {\n  const փիրուզ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"array\"",
    "result": "OK",
    "src": "fn F() {\n  const array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"atomic\"",
    "result": "OK",
    "src": "fn F() {\n  const atomic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"bool\"",
    "result": "OK",
    "src": "fn F() {\n  const bool = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"bf16\"",
    "result": "OK",
    "src": "fn F() {\n  const bf16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "fn F() {\n  const bitcast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"f32\"",
    "result": "OK",
    "src": "fn F() {\n  const f32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"f16\"",
    "result": "OK",
    "src": "fn F() {\n  const f16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"f64\"",
    "result": "OK",
    "src": "fn F() {\n  const f64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"i32\"",
    "result": "OK",
    "src": "fn F() {\n  const i32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"i16\"",
    "result": "OK",
    "src": "fn F() {\n  const i16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"i64\"",
    "result": "OK",
    "src": "fn F() {\n  const i64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"i8\"",
    "result": "OK",
    "src": "fn F() {\n  const i8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "fn F() {\n  const mat2x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "fn F() {\n  const mat2x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "fn F() {\n  const mat2x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "fn F() {\n  const mat3x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "fn F() {\n  const mat3x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "fn F() {\n  const mat3x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "fn F() {\n  const mat4x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "fn F() {\n  const mat4x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "fn F() {\n  const mat4x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"ptr\"",
    "result": "OK",
    "src": "fn F() {\n  const ptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"quat\"",
    "result": "OK",
    "src": "fn F() {\n  const quat = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"sampler\"",
    "result": "OK",
    "src": "fn F() {\n  const sampler = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "fn F() {\n  const sampler_comparison = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"signed\"",
    "result": "OK",
    "src": "fn F() {\n  const signed = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_storage_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_storage_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_storage_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_storage_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_depth_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_depth_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_depth_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_depth_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  const texture_depth_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"u32\"",
    "result": "OK",
    "src": "fn F() {\n  const u32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"u16\"",
    "result": "OK",
    "src": "fn F() {\n  const u16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"u64\"",
    "result": "OK",
    "src": "fn F() {\n  const u64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"u8\"",
    "result": "OK",
    "src": "fn F() {\n  const u8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "fn F() {\n  const unsigned = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"vec2\"",
    "result": "OK",
    "src": "fn F() {\n  const vec2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"vec3\"",
    "result": "OK",
    "src": "fn F() {\n  const vec3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"vec4\"",
    "result": "OK",
    "src": "fn F() {\n  const vec4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const _ = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const _ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :2:9 error: identifiers must not start with two or more underscores\n const __ = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const __ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :2:9 error: identifiers must not start with two or more underscores\n const __foo = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const __foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const 0foo = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const 0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo.bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo.bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo-bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo-bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo+bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo+bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :2:12 error: invalid character found\n const foo#bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo#bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo!bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo!bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :2:12 error: invalid character found\n const foo\\bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo\\bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo/bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo/bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo,bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo,bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :2:12 error: expected '=' for 'const' declaration\n const foo@bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo@bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :2:13 error: invalid type for 'const' declaration\n const foo::bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const foo::bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const alias = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const alias = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const break = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const break = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const case = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const case = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const const = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const const = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const const_assert = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const const_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const continue = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const continue = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const continuing = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const continuing = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const default = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const default = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const diagnostic = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const diagnostic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const discard = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const discard = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const else = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const else = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const enable = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const enable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const false = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const false = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const fn = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const fn = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const for = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const for = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const if = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const if = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const let = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const let = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const loop = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const loop = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const override = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const override = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const requires = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const requires = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const return = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const struct = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const struct = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const switch = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const switch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const true = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const true = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const var = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const var = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const while = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const while = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :2:9 error: 'NULL' is a reserved keyword\n const NULL = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const NULL = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :2:9 error: 'Self' is a reserved keyword\n const Self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const Self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :2:9 error: 'abstract' is a reserved keyword\n const abstract = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const abstract = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :2:9 error: 'active' is a reserved keyword\n const active = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const active = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :2:9 error: 'alignas' is a reserved keyword\n const alignas = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const alignas = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :2:9 error: 'alignof' is a reserved keyword\n const alignof = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const alignof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :2:9 error: 'as' is a reserved keyword\n const as = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const as = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :2:9 error: 'asm' is a reserved keyword\n const asm = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const asm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :2:9 error: 'asm_fragment' is a reserved keyword\n const asm_fragment = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const asm_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :2:9 error: 'async' is a reserved keyword\n const async = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const async = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :2:9 error: 'attribute' is a reserved keyword\n const attribute = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const attribute = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :2:9 error: 'auto' is a reserved keyword\n const auto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const auto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :2:9 error: 'await' is a reserved keyword\n const await = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :2:9 error: 'become' is a reserved keyword\n const become = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const become = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :2:9 error: 'binding_array' is a reserved keyword\n const binding_array = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const binding_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :2:9 error: 'cast' is a reserved keyword\n const cast = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :2:9 error: 'catch' is a reserved keyword\n const catch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const catch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :2:9 error: 'class' is a reserved keyword\n const class = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const class = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :2:9 error: 'co_await' is a reserved keyword\n const co_await = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const co_await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :2:9 error: 'co_return' is a reserved keyword\n const co_return = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const co_return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :2:9 error: 'co_yield' is a reserved keyword\n const co_yield = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const co_yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :2:9 error: 'coherent' is a reserved keyword\n const coherent = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :2:9 error: 'column_major' is a reserved keyword\n const column_major = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const column_major = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :2:9 error: 'common' is a reserved keyword\n const common = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const common = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :2:9 error: 'compile' is a reserved keyword\n const compile = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const compile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :2:9 error: 'compile_fragment' is a reserved keyword\n const compile_fragment = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const compile_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :2:9 error: 'concept' is a reserved keyword\n const concept = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const concept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :2:9 error: 'const_cast' is a reserved keyword\n const const_cast = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const const_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :2:9 error: 'consteval' is a reserved keyword\n const consteval = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const consteval = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :2:9 error: 'constexpr' is a reserved keyword\n const constexpr = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const constexpr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :2:9 error: 'constinit' is a reserved keyword\n const constinit = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const constinit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :2:9 error: 'crate' is a reserved keyword\n const crate = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const crate = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :2:9 error: 'debugger' is a reserved keyword\n const debugger = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const debugger = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :2:9 error: 'decltype' is a reserved keyword\n const decltype = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const decltype = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :2:9 error: 'delete' is a reserved keyword\n const delete = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const delete = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :2:9 error: 'demote' is a reserved keyword\n const demote = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const demote = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :2:9 error: 'demote_to_helper' is a reserved keyword\n const demote_to_helper = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const demote_to_helper = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :2:9 error: 'do' is a reserved keyword\n const do = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const do = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :2:9 error: 'dynamic_cast' is a reserved keyword\n const dynamic_cast = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const dynamic_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :2:9 error: 'enum' is a reserved keyword\n const enum = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const enum = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :2:9 error: 'explicit' is a reserved keyword\n const explicit = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const explicit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :2:9 error: 'export' is a reserved keyword\n const export = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const export = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :2:9 error: 'extends' is a reserved keyword\n const extends = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const extends = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :2:9 error: 'extern' is a reserved keyword\n const extern = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const extern = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :2:9 error: 'external' is a reserved keyword\n const external = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const external = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :2:9 error: expected identifier for 'const' declaration\n const fallthrough = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const fallthrough = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :2:9 error: 'filter' is a reserved keyword\n const filter = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const filter = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :2:9 error: 'final' is a reserved keyword\n const final = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const final = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :2:9 error: 'finally' is a reserved keyword\n const finally = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const finally = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :2:9 error: 'friend' is a reserved keyword\n const friend = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const friend = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :2:9 error: 'from' is a reserved keyword\n const from = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const from = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :2:9 error: 'fxgroup' is a reserved keyword\n const fxgroup = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const fxgroup = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :2:9 error: 'get' is a reserved keyword\n const get = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const get = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :2:9 error: 'goto' is a reserved keyword\n const goto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const goto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :2:9 error: 'groupshared' is a reserved keyword\n const groupshared = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const groupshared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :2:9 error: 'highp' is a reserved keyword\n const highp = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const highp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :2:9 error: 'impl' is a reserved keyword\n const impl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const impl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :2:9 error: 'implements' is a reserved keyword\n const implements = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const implements = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :2:9 error: 'import' is a reserved keyword\n const import = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const import = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :2:9 error: 'inline' is a reserved keyword\n const inline = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const inline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :2:9 error: 'instanceof' is a reserved keyword\n const instanceof = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const instanceof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :2:9 error: 'interface' is a reserved keyword\n const interface = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const interface = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :2:9 error: 'layout' is a reserved keyword\n const layout = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const layout = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :2:9 error: 'lowp' is a reserved keyword\n const lowp = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const lowp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :2:9 error: 'macro' is a reserved keyword\n const macro = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const macro = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :2:9 error: 'macro_rules' is a reserved keyword\n const macro_rules = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const macro_rules = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :2:9 error: 'match' is a reserved keyword\n const match = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const match = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :2:9 error: 'mediump' is a reserved keyword\n const mediump = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const mediump = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :2:9 error: 'meta' is a reserved keyword\n const meta = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const meta = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :2:9 error: 'mod' is a reserved keyword\n const mod = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const mod = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :2:9 error: 'module' is a reserved keyword\n const module = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const module = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :2:9 error: 'move' is a reserved keyword\n const move = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const move = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :2:9 error: 'mut' is a reserved keyword\n const mut = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const mut = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :2:9 error: 'mutable' is a reserved keyword\n const mutable = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const mutable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :2:9 error: 'namespace' is a reserved keyword\n const namespace = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const namespace = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :2:9 error: 'new' is a reserved keyword\n const new = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const new = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :2:9 error: 'nil' is a reserved keyword\n const nil = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const nil = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :2:9 error: 'noexcept' is a reserved keyword\n const noexcept = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const noexcept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :2:9 error: 'noinline' is a reserved keyword\n const noinline = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const noinline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :2:9 error: 'nointerpolation' is a reserved keyword\n const nointerpolation = 1;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const nointerpolation = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "fn F() {\n  const non_coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "fn F() {\n  const noncoherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :2:9 error: 'noperspective' is a reserved keyword\n const noperspective = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const noperspective = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :2:9 error: 'null' is a reserved keyword\n const null = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const null = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :2:9 error: 'nullptr' is a reserved keyword\n const nullptr = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const nullptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :2:9 error: 'of' is a reserved keyword\n const of = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const of = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :2:9 error: 'operator' is a reserved keyword\n const operator = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const operator = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :2:9 error: 'package' is a reserved keyword\n const package = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const package = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :2:9 error: 'packoffset' is a reserved keyword\n const packoffset = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const packoffset = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :2:9 error: 'partition' is a reserved keyword\n const partition = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const partition = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :2:9 error: 'pass' is a reserved keyword\n const pass = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const pass = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :2:9 error: 'patch' is a reserved keyword\n const patch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const patch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :2:9 error: 'pixelfragment' is a reserved keyword\n const pixelfragment = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const pixelfragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :2:9 error: 'precise' is a reserved keyword\n const precise = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const precise = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :2:9 error: 'precision' is a reserved keyword\n const precision = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const precision = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :2:9 error: 'premerge' is a reserved keyword\n const premerge = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const premerge = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :2:9 error: 'priv' is a reserved keyword\n const priv = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const priv = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :2:9 error: 'protected' is a reserved keyword\n const protected = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const protected = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :2:9 error: 'pub' is a reserved keyword\n const pub = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const pub = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :2:9 error: 'public' is a reserved keyword\n const public = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const public = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :2:9 error: 'readonly' is a reserved keyword\n const readonly = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const readonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :2:9 error: 'ref' is a reserved keyword\n const ref = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const ref = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :2:9 error: 'regardless' is a reserved keyword\n const regardless = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const regardless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :2:9 error: 'register' is a reserved keyword\n const register = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const register = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :2:9 error: 'reinterpret_cast' is a reserved keyword\n const reinterpret_cast = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const reinterpret_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :2:9 error: 'require' is a reserved keyword\n const require = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const require = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :2:9 error: 'resource' is a reserved keyword\n const resource = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const resource = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :2:9 error: 'restrict' is a reserved keyword\n const restrict = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const restrict = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :2:9 error: 'self' is a reserved keyword\n const self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :2:9 error: 'set' is a reserved keyword\n const set = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const set = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :2:9 error: 'shared' is a reserved keyword\n const shared = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const shared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :2:9 error: 'sizeof' is a reserved keyword\n const sizeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const sizeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :2:9 error: 'smooth' is a reserved keyword\n const smooth = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const smooth = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :2:9 error: 'snorm' is a reserved keyword\n const snorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const snorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :2:9 error: 'static' is a reserved keyword\n const static = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const static = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :2:9 error: 'static_assert' is a reserved keyword\n const static_assert = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const static_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :2:9 error: 'static_cast' is a reserved keyword\n const static_cast = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const static_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :2:9 error: 'std' is a reserved keyword\n const std = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const std = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :2:9 error: 'subroutine' is a reserved keyword\n const subroutine = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const subroutine = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :2:9 error: 'super' is a reserved keyword\n const super = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const super = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :2:9 error: 'target' is a reserved keyword\n const target = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const target = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :2:9 error: 'template' is a reserved keyword\n const template = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const template = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :2:9 error: 'this' is a reserved keyword\n const this = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const this = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :2:9 error: 'thread_local' is a reserved keyword\n const thread_local = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const thread_local = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :2:9 error: 'throw' is a reserved keyword\n const throw = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const throw = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :2:9 error: 'trait' is a reserved keyword\n const trait = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const trait = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :2:9 error: 'try' is a reserved keyword\n const try = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const try = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :2:9 error: 'type' is a reserved keyword\n const type = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const type = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :2:9 error: 'typedef' is a reserved keyword\n const typedef = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const typedef = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :2:9 error: 'typeid' is a reserved keyword\n const typeid = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const typeid = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :2:9 error: 'typename' is a reserved keyword\n const typename = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const typename = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :2:9 error: 'typeof' is a reserved keyword\n const typeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const typeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :2:9 error: 'union' is a reserved keyword\n const union = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const union = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :2:9 error: 'unless' is a reserved keyword\n const unless = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const unless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :2:9 error: 'unorm' is a reserved keyword\n const unorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const unorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :2:9 error: 'unsafe' is a reserved keyword\n const unsafe = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const unsafe = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :2:9 error: 'unsized' is a reserved keyword\n const unsized = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const unsized = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :2:9 error: 'use' is a reserved keyword\n const use = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const use = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :2:9 error: 'using' is a reserved keyword\n const using = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const using = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :2:9 error: 'varying' is a reserved keyword\n const varying = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const varying = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :2:9 error: 'virtual' is a reserved keyword\n const virtual = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const virtual = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :2:9 error: 'volatile' is a reserved keyword\n const volatile = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const volatile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :2:9 error: 'wgsl' is a reserved keyword\n const wgsl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const wgsl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :2:9 error: 'where' is a reserved keyword\n const where = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const where = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :2:9 error: 'with' is a reserved keyword\n const with = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const with = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :2:9 error: 'writeonly' is a reserved keyword\n const writeonly = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const writeonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_const_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :2:9 error: 'yield' is a reserved keyword\n const yield = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  const yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo\"",
    "result": "OK",
    "src": "fn F() {\n  let foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"Foo\"",
    "result": "OK",
    "src": "fn F() {\n  let Foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"FOO\"",
    "result": "OK",
    "src": "fn F() {\n  let FOO = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"_0\"",
    "result": "OK",
    "src": "fn F() {\n  let _0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "fn F() {\n  let _foo0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "fn F() {\n  let _0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "fn F() {\n  let foo__0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "fn F() {\n  let Δέλτα = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "fn F() {\n  let réflexion = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "fn F() {\n  let Кызыл = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "fn F() {\n  let 𐰓𐰏𐰇 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "fn F() {\n  let 朝焼け = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "fn F() {\n  let سلام = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "fn F() {\n  let 검정 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "fn F() {\n  let שָׁלוֹם = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "fn F() {\n  let गुलाबी = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "fn F() {\n  let փիրուզ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"array\"",
    "result": "OK",
    "src": "fn F() {\n  let array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"atomic\"",
    "result": "OK",
    "src": "fn F() {\n  let atomic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"bool\"",
    "result": "OK",
    "src": "fn F() {\n  let bool = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"bf16\"",
    "result": "OK",
    "src": "fn F() {\n  let bf16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "fn F() {\n  let bitcast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"f32\"",
    "result": "OK",
    "src": "fn F() {\n  let f32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"f16\"",
    "result": "OK",
    "src": "fn F() {\n  let f16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"f64\"",
    "result": "OK",
    "src": "fn F() {\n  let f64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"i32\"",
    "result": "OK",
    "src": "fn F() {\n  let i32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"i16\"",
    "result": "OK",
    "src": "fn F() {\n  let i16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"i64\"",
    "result": "OK",
    "src": "fn F() {\n  let i64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"i8\"",
    "result": "OK",
    "src": "fn F() {\n  let i8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "fn F() {\n  let mat2x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "fn F() {\n  let mat2x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "fn F() {\n  let mat2x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "fn F() {\n  let mat3x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "fn F() {\n  let mat3x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "fn F() {\n  let mat3x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "fn F() {\n  let mat4x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "fn F() {\n  let mat4x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "fn F() {\n  let mat4x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"ptr\"",
    "result": "OK",
    "src": "fn F() {\n  let ptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"quat\"",
    "result": "OK",
    "src": "fn F() {\n  let quat = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"sampler\"",
    "result": "OK",
    "src": "fn F() {\n  let sampler = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "fn F() {\n  let sampler_comparison = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"signed\"",
    "result": "OK",
    "src": "fn F() {\n  let signed = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_storage_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_storage_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_storage_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_storage_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_depth_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_depth_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_depth_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_depth_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  let texture_depth_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"u32\"",
    "result": "OK",
    "src": "fn F() {\n  let u32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"u16\"",
    "result": "OK",
    "src": "fn F() {\n  let u16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"u64\"",
    "result": "OK",
    "src": "fn F() {\n  let u64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"u8\"",
    "result": "OK",
    "src": "fn F() {\n  let u8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "fn F() {\n  let unsigned = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"vec2\"",
    "result": "OK",
    "src": "fn F() {\n  let vec2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"vec3\"",
    "result": "OK",
    "src": "fn F() {\n  let vec3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"vec4\"",
    "result": "OK",
    "src": "fn F() {\n  let vec4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let _ = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let _ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :2:7 error: identifiers must not start with two or more underscores\n let __ = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let __ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :2:7 error: identifiers must not start with two or more underscores\n let __foo = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let __foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let 0foo = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let 0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo.bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo.bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo-bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo-bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo+bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo+bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :2:10 error: invalid character found\n let foo#bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo#bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo!bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo!bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :2:10 error: invalid character found\n let foo\\bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo\\bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo/bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo/bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo,bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo,bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected '=' for 'let' declaration\n let foo@bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo@bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :2:11 error: invalid type for 'let' declaration\n let foo::bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let foo::bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let alias = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let alias = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let break = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let break = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let case = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let case = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let const = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let const = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let const_assert = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let const_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let continue = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let continue = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let continuing = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let continuing = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let default = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let default = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let diagnostic = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let diagnostic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let discard = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let discard = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let else = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let else = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let enable = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let enable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let false = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let false = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let fn = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let fn = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let for = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let for = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let if = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let if = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let let = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let let = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let loop = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let loop = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let override = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let override = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let requires = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let requires = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let return = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let struct = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let struct = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let switch = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let switch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let true = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let true = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let var = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let var = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let while = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let while = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :2:7 error: 'NULL' is a reserved keyword\n let NULL = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let NULL = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :2:7 error: 'Self' is a reserved keyword\n let Self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let Self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :2:7 error: 'abstract' is a reserved keyword\n let abstract = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let abstract = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :2:7 error: 'active' is a reserved keyword\n let active = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let active = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :2:7 error: 'alignas' is a reserved keyword\n let alignas = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let alignas = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'alignof' is a reserved keyword\n let alignof = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let alignof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :2:7 error: 'as' is a reserved keyword\n let as = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let as = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'asm' is a reserved keyword\n let asm = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let asm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'asm_fragment' is a reserved keyword\n let asm_fragment = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let asm_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :2:7 error: 'async' is a reserved keyword\n let async = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let async = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :2:7 error: 'attribute' is a reserved keyword\n let attribute = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let attribute = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :2:7 error: 'auto' is a reserved keyword\n let auto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let auto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :2:7 error: 'await' is a reserved keyword\n let await = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :2:7 error: 'become' is a reserved keyword\n let become = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let become = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :2:7 error: 'binding_array' is a reserved keyword\n let binding_array = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let binding_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'cast' is a reserved keyword\n let cast = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :2:7 error: 'catch' is a reserved keyword\n let catch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let catch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :2:7 error: 'class' is a reserved keyword\n let class = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let class = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_await' is a reserved keyword\n let co_await = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let co_await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_return' is a reserved keyword\n let co_return = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let co_return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_yield' is a reserved keyword\n let co_yield = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let co_yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :2:7 error: 'coherent' is a reserved keyword\n let coherent = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :2:7 error: 'column_major' is a reserved keyword\n let column_major = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let column_major = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :2:7 error: 'common' is a reserved keyword\n let common = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let common = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :2:7 error: 'compile' is a reserved keyword\n let compile = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let compile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'compile_fragment' is a reserved keyword\n let compile_fragment = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let compile_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :2:7 error: 'concept' is a reserved keyword\n let concept = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let concept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'const_cast' is a reserved keyword\n let const_cast = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let const_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :2:7 error: 'consteval' is a reserved keyword\n let consteval = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let consteval = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :2:7 error: 'constexpr' is a reserved keyword\n let constexpr = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let constexpr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :2:7 error: 'constinit' is a reserved keyword\n let constinit = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let constinit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :2:7 error: 'crate' is a reserved keyword\n let crate = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let crate = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :2:7 error: 'debugger' is a reserved keyword\n let debugger = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let debugger = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :2:7 error: 'decltype' is a reserved keyword\n let decltype = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let decltype = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :2:7 error: 'delete' is a reserved keyword\n let delete = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let delete = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :2:7 error: 'demote' is a reserved keyword\n let demote = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let demote = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :2:7 error: 'demote_to_helper' is a reserved keyword\n let demote_to_helper = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let demote_to_helper = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :2:7 error: 'do' is a reserved keyword\n let do = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let do = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'dynamic_cast' is a reserved keyword\n let dynamic_cast = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let dynamic_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :2:7 error: 'enum' is a reserved keyword\n let enum = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let enum = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :2:7 error: 'explicit' is a reserved keyword\n let explicit = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let explicit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :2:7 error: 'export' is a reserved keyword\n let export = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let export = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :2:7 error: 'extends' is a reserved keyword\n let extends = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let extends = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :2:7 error: 'extern' is a reserved keyword\n let extern = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let extern = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :2:7 error: 'external' is a reserved keyword\n let external = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let external = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for 'let' declaration\n let fallthrough = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let fallthrough = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :2:7 error: 'filter' is a reserved keyword\n let filter = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let filter = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :2:7 error: 'final' is a reserved keyword\n let final = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let final = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :2:7 error: 'finally' is a reserved keyword\n let finally = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let finally = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :2:7 error: 'friend' is a reserved keyword\n let friend = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let friend = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :2:7 error: 'from' is a reserved keyword\n let from = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let from = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :2:7 error: 'fxgroup' is a reserved keyword\n let fxgroup = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let fxgroup = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :2:7 error: 'get' is a reserved keyword\n let get = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let get = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :2:7 error: 'goto' is a reserved keyword\n let goto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let goto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :2:7 error: 'groupshared' is a reserved keyword\n let groupshared = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let groupshared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :2:7 error: 'highp' is a reserved keyword\n let highp = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let highp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :2:7 error: 'impl' is a reserved keyword\n let impl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let impl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :2:7 error: 'implements' is a reserved keyword\n let implements = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let implements = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :2:7 error: 'import' is a reserved keyword\n let import = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let import = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :2:7 error: 'inline' is a reserved keyword\n let inline = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let inline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'instanceof' is a reserved keyword\n let instanceof = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let instanceof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :2:7 error: 'interface' is a reserved keyword\n let interface = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let interface = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :2:7 error: 'layout' is a reserved keyword\n let layout = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let layout = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :2:7 error: 'lowp' is a reserved keyword\n let lowp = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let lowp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :2:7 error: 'macro' is a reserved keyword\n let macro = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let macro = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :2:7 error: 'macro_rules' is a reserved keyword\n let macro_rules = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let macro_rules = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :2:7 error: 'match' is a reserved keyword\n let match = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let match = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mediump' is a reserved keyword\n let mediump = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let mediump = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :2:7 error: 'meta' is a reserved keyword\n let meta = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let meta = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mod' is a reserved keyword\n let mod = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let mod = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :2:7 error: 'module' is a reserved keyword\n let module = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let module = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :2:7 error: 'move' is a reserved keyword\n let move = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let move = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mut' is a reserved keyword\n let mut = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let mut = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mutable' is a reserved keyword\n let mutable = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let mutable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :2:7 error: 'namespace' is a reserved keyword\n let namespace = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let namespace = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :2:7 error: 'new' is a reserved keyword\n let new = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let new = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nil' is a reserved keyword\n let nil = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let nil = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noexcept' is a reserved keyword\n let noexcept = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let noexcept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noinline' is a reserved keyword\n let noinline = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let noinline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nointerpolation' is a reserved keyword\n let nointerpolation = 1;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let nointerpolation = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "fn F() {\n  let non_coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "fn F() {\n  let noncoherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noperspective' is a reserved keyword\n let noperspective = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let noperspective = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :2:7 error: 'null' is a reserved keyword\n let null = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let null = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nullptr' is a reserved keyword\n let nullptr = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let nullptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :2:7 error: 'of' is a reserved keyword\n let of = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let of = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :2:7 error: 'operator' is a reserved keyword\n let operator = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let operator = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :2:7 error: 'package' is a reserved keyword\n let package = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let package = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :2:7 error: 'packoffset' is a reserved keyword\n let packoffset = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let packoffset = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :2:7 error: 'partition' is a reserved keyword\n let partition = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let partition = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pass' is a reserved keyword\n let pass = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let pass = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :2:7 error: 'patch' is a reserved keyword\n let patch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let patch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pixelfragment' is a reserved keyword\n let pixelfragment = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let pixelfragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :2:7 error: 'precise' is a reserved keyword\n let precise = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let precise = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :2:7 error: 'precision' is a reserved keyword\n let precision = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let precision = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :2:7 error: 'premerge' is a reserved keyword\n let premerge = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let premerge = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :2:7 error: 'priv' is a reserved keyword\n let priv = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let priv = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :2:7 error: 'protected' is a reserved keyword\n let protected = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let protected = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pub' is a reserved keyword\n let pub = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let pub = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :2:7 error: 'public' is a reserved keyword\n let public = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let public = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :2:7 error: 'readonly' is a reserved keyword\n let readonly = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let readonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :2:7 error: 'ref' is a reserved keyword\n let ref = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let ref = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :2:7 error: 'regardless' is a reserved keyword\n let regardless = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let regardless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :2:7 error: 'register' is a reserved keyword\n let register = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let register = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'reinterpret_cast' is a reserved keyword\n let reinterpret_cast = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let reinterpret_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :2:7 error: 'require' is a reserved keyword\n let require = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let require = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :2:7 error: 'resource' is a reserved keyword\n let resource = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let resource = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :2:7 error: 'restrict' is a reserved keyword\n let restrict = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let restrict = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :2:7 error: 'self' is a reserved keyword\n let self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :2:7 error: 'set' is a reserved keyword\n let set = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let set = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :2:7 error: 'shared' is a reserved keyword\n let shared = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let shared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'sizeof' is a reserved keyword\n let sizeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let sizeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :2:7 error: 'smooth' is a reserved keyword\n let smooth = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let smooth = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'snorm' is a reserved keyword\n let snorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let snorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static' is a reserved keyword\n let static = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let static = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static_assert' is a reserved keyword\n let static_assert = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let static_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static_cast' is a reserved keyword\n let static_cast = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let static_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :2:7 error: 'std' is a reserved keyword\n let std = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let std = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :2:7 error: 'subroutine' is a reserved keyword\n let subroutine = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let subroutine = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :2:7 error: 'super' is a reserved keyword\n let super = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let super = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :2:7 error: 'target' is a reserved keyword\n let target = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let target = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :2:7 error: 'template' is a reserved keyword\n let template = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let template = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :2:7 error: 'this' is a reserved keyword\n let this = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let this = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :2:7 error: 'thread_local' is a reserved keyword\n let thread_local = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let thread_local = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :2:7 error: 'throw' is a reserved keyword\n let throw = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let throw = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :2:7 error: 'trait' is a reserved keyword\n let trait = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let trait = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :2:7 error: 'try' is a reserved keyword\n let try = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let try = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :2:7 error: 'type' is a reserved keyword\n let type = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let type = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typedef' is a reserved keyword\n let typedef = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let typedef = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typeid' is a reserved keyword\n let typeid = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let typeid = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typename' is a reserved keyword\n let typename = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let typename = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typeof' is a reserved keyword\n let typeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let typeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :2:7 error: 'union' is a reserved keyword\n let union = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let union = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unless' is a reserved keyword\n let unless = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let unless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unorm' is a reserved keyword\n let unorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let unorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unsafe' is a reserved keyword\n let unsafe = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let unsafe = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unsized' is a reserved keyword\n let unsized = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let unsized = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :2:7 error: 'use' is a reserved keyword\n let use = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let use = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :2:7 error: 'using' is a reserved keyword\n let using = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let using = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :2:7 error: 'varying' is a reserved keyword\n let varying = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let varying = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :2:7 error: 'virtual' is a reserved keyword\n let virtual = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let virtual = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :2:7 error: 'volatile' is a reserved keyword\n let volatile = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let volatile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :2:7 error: 'wgsl' is a reserved keyword\n let wgsl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let wgsl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :2:7 error: 'where' is a reserved keyword\n let where = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let where = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :2:7 error: 'with' is a reserved keyword\n let with = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let with = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :2:7 error: 'writeonly' is a reserved keyword\n let writeonly = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let writeonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_let_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :2:7 error: 'yield' is a reserved keyword\n let yield = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  let yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo\"",
    "result": "OK",
    "src": "fn F() {\n  var foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"Foo\"",
    "result": "OK",
    "src": "fn F() {\n  var Foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"FOO\"",
    "result": "OK",
    "src": "fn F() {\n  var FOO = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"_0\"",
    "result": "OK",
    "src": "fn F() {\n  var _0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"_foo0\"",
    "result": "OK",
    "src": "fn F() {\n  var _foo0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"_0foo\"",
    "result": "OK",
    "src": "fn F() {\n  var _0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo__0\"",
    "result": "OK",
    "src": "fn F() {\n  var foo__0 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%CE%94%CE%AD%CE%BB%CF%84%CE%B1\"",
    "result": "OK",
    "src": "fn F() {\n  var Δέλτα = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"r%C3%A9flexion\"",
    "result": "OK",
    "src": "fn F() {\n  var réflexion = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%D0%9A%D1%8B%D0%B7%D1%8B%D0%BB\"",
    "result": "OK",
    "src": "fn F() {\n  var Кызыл = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%F0%90%B0%93%F0%90%B0%8F%F0%90%B0%87\"",
    "result": "OK",
    "src": "fn F() {\n  var 𐰓𐰏𐰇 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%E6%9C%9D%E7%84%BC%E3%81%91\"",
    "result": "OK",
    "src": "fn F() {\n  var 朝焼け = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%D8%B3%D9%84%D8%A7%D9%85\"",
    "result": "OK",
    "src": "fn F() {\n  var سلام = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%EA%B2%80%EC%A0%95\"",
    "result": "OK",
    "src": "fn F() {\n  var 검정 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%D7%A9%D6%B8%D7%81%D7%9C%D7%95%D6%B9%D7%9D\"",
    "result": "OK",
    "src": "fn F() {\n  var שָׁלוֹם = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%E0%A4%97%E0%A5%81%E0%A4%B2%E0%A4%BE%E0%A4%AC%E0%A5%80\"",
    "result": "OK",
    "src": "fn F() {\n  var गुलाबी = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"%D6%83%D5%AB%D6%80%D5%B8%D6%82%D5%A6\"",
    "result": "OK",
    "src": "fn F() {\n  var փիրուզ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"array\"",
    "result": "OK",
    "src": "fn F() {\n  var array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"atomic\"",
    "result": "OK",
    "src": "fn F() {\n  var atomic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"bool\"",
    "result": "OK",
    "src": "fn F() {\n  var bool = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"bf16\"",
    "result": "OK",
    "src": "fn F() {\n  var bf16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"bitcast\"",
    "result": "OK",
    "src": "fn F() {\n  var bitcast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"f32\"",
    "result": "OK",
    "src": "fn F() {\n  var f32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"f16\"",
    "result": "OK",
    "src": "fn F() {\n  var f16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"f64\"",
    "result": "OK",
    "src": "fn F() {\n  var f64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"i32\"",
    "result": "OK",
    "src": "fn F() {\n  var i32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"i16\"",
    "result": "OK",
    "src": "fn F() {\n  var i16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"i64\"",
    "result": "OK",
    "src": "fn F() {\n  var i64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"i8\"",
    "result": "OK",
    "src": "fn F() {\n  var i8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat2x2\"",
    "result": "OK",
    "src": "fn F() {\n  var mat2x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat2x3\"",
    "result": "OK",
    "src": "fn F() {\n  var mat2x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat2x4\"",
    "result": "OK",
    "src": "fn F() {\n  var mat2x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat3x2\"",
    "result": "OK",
    "src": "fn F() {\n  var mat3x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat3x3\"",
    "result": "OK",
    "src": "fn F() {\n  var mat3x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat3x4\"",
    "result": "OK",
    "src": "fn F() {\n  var mat3x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat4x2\"",
    "result": "OK",
    "src": "fn F() {\n  var mat4x2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat4x3\"",
    "result": "OK",
    "src": "fn F() {\n  var mat4x3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mat4x4\"",
    "result": "OK",
    "src": "fn F() {\n  var mat4x4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"ptr\"",
    "result": "OK",
    "src": "fn F() {\n  var ptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"quat\"",
    "result": "OK",
    "src": "fn F() {\n  var quat = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"sampler\"",
    "result": "OK",
    "src": "fn F() {\n  var sampler = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"sampler_comparison\"",
    "result": "OK",
    "src": "fn F() {\n  var sampler_comparison = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"signed\"",
    "result": "OK",
    "src": "fn F() {\n  var signed = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_1d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_2d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_3d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_cube\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_storage_1d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_storage_1d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_storage_2d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_storage_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_storage_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_storage_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_storage_3d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_storage_3d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_depth_2d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_depth_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_depth_2d_array\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_depth_2d_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_depth_cube\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_depth_cube = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_depth_cube_array\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_depth_cube_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"texture_depth_multisampled_2d\"",
    "result": "OK",
    "src": "fn F() {\n  var texture_depth_multisampled_2d = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"u32\"",
    "result": "OK",
    "src": "fn F() {\n  var u32 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"u16\"",
    "result": "OK",
    "src": "fn F() {\n  var u16 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"u64\"",
    "result": "OK",
    "src": "fn F() {\n  var u64 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"u8\"",
    "result": "OK",
    "src": "fn F() {\n  var u8 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"unsigned\"",
    "result": "OK",
    "src": "fn F() {\n  var unsigned = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"vec2\"",
    "result": "OK",
    "src": "fn F() {\n  var vec2 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"vec3\"",
    "result": "OK",
    "src": "fn F() {\n  var vec3 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"vec4\"",
    "result": "OK",
    "src": "fn F() {\n  var vec4 = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"_\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var _ = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var _ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"__\"",
    "result": "Error while parsing WGSL: :2:7 error: identifiers must not start with two or more underscores\n var __ = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var __ = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"__foo\"",
    "result": "Error while parsing WGSL: :2:7 error: identifiers must not start with two or more underscores\n var __foo = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var __foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"0foo\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var 0foo = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var 0foo = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo.bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo.bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo.bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo-bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo-bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo-bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo%2Bbar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo+bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo+bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo%23bar\"",
    "result": "Error while parsing WGSL: :2:10 error: invalid character found\n var foo#bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo#bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo!bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo!bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo!bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo%5C%5Cbar\"",
    "result": "Error while parsing WGSL: :2:10 error: invalid character found\n var foo\\bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo\\bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo%2Fbar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo/bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo/bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo,bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo,bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo,bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo%40bar\"",
    "result": "Error while parsing WGSL: :2:10 error: expected ';' for variable declaration\n var foo@bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo@bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"foo::bar\"",
    "result": "Error while parsing WGSL: :2:11 error: invalid type for variable declaration\n var foo::bar = 1;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var foo::bar = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"alias\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var alias = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var alias = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"break\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var break = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var break = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"case\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var case = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var case = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"const\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var const = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var const = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"const_assert\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var const_assert = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var const_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"continue\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var continue = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var continue = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"continuing\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var continuing = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var continuing = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"default\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var default = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var default = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"diagnostic\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var diagnostic = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var diagnostic = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"discard\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var discard = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var discard = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"else\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var else = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var else = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"enable\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var enable = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var enable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"false\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var false = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var false = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"fn\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var fn = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var fn = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"for\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var for = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var for = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"if\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var if = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var if = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"let\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var let = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var let = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"loop\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var loop = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var loop = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"override\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var override = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var override = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"requires\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var requires = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var requires = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"return\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var return = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"struct\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var struct = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var struct = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"switch\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var switch = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var switch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"true\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var true = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var true = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"var\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var var = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var var = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"while\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var while = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var while = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"NULL\"",
    "result": "Error while parsing WGSL: :2:7 error: 'NULL' is a reserved keyword\n var NULL = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var NULL = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"Self\"",
    "result": "Error while parsing WGSL: :2:7 error: 'Self' is a reserved keyword\n var Self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var Self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"abstract\"",
    "result": "Error while parsing WGSL: :2:7 error: 'abstract' is a reserved keyword\n var abstract = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var abstract = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"active\"",
    "result": "Error while parsing WGSL: :2:7 error: 'active' is a reserved keyword\n var active = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var active = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"alignas\"",
    "result": "Error while parsing WGSL: :2:7 error: 'alignas' is a reserved keyword\n var alignas = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var alignas = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"alignof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'alignof' is a reserved keyword\n var alignof = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var alignof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"as\"",
    "result": "Error while parsing WGSL: :2:7 error: 'as' is a reserved keyword\n var as = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var as = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"asm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'asm' is a reserved keyword\n var asm = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var asm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"asm_fragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'asm_fragment' is a reserved keyword\n var asm_fragment = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var asm_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"async\"",
    "result": "Error while parsing WGSL: :2:7 error: 'async' is a reserved keyword\n var async = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var async = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"attribute\"",
    "result": "Error while parsing WGSL: :2:7 error: 'attribute' is a reserved keyword\n var attribute = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var attribute = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"auto\"",
    "result": "Error while parsing WGSL: :2:7 error: 'auto' is a reserved keyword\n var auto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var auto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"await\"",
    "result": "Error while parsing WGSL: :2:7 error: 'await' is a reserved keyword\n var await = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"become\"",
    "result": "Error while parsing WGSL: :2:7 error: 'become' is a reserved keyword\n var become = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var become = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"binding_array\"",
    "result": "Error while parsing WGSL: :2:7 error: 'binding_array' is a reserved keyword\n var binding_array = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var binding_array = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'cast' is a reserved keyword\n var cast = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"catch\"",
    "result": "Error while parsing WGSL: :2:7 error: 'catch' is a reserved keyword\n var catch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var catch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"class\"",
    "result": "Error while parsing WGSL: :2:7 error: 'class' is a reserved keyword\n var class = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var class = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"co_await\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_await' is a reserved keyword\n var co_await = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var co_await = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"co_return\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_return' is a reserved keyword\n var co_return = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var co_return = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"co_yield\"",
    "result": "Error while parsing WGSL: :2:7 error: 'co_yield' is a reserved keyword\n var co_yield = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var co_yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"coherent\"",
    "result": "Error while parsing WGSL: :2:7 error: 'coherent' is a reserved keyword\n var coherent = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"column_major\"",
    "result": "Error while parsing WGSL: :2:7 error: 'column_major' is a reserved keyword\n var column_major = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var column_major = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"common\"",
    "result": "Error while parsing WGSL: :2:7 error: 'common' is a reserved keyword\n var common = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var common = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"compile\"",
    "result": "Error while parsing WGSL: :2:7 error: 'compile' is a reserved keyword\n var compile = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var compile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"compile_fragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'compile_fragment' is a reserved keyword\n var compile_fragment = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var compile_fragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"concept\"",
    "result": "Error while parsing WGSL: :2:7 error: 'concept' is a reserved keyword\n var concept = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var concept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"const_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'const_cast' is a reserved keyword\n var const_cast = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var const_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"consteval\"",
    "result": "Error while parsing WGSL: :2:7 error: 'consteval' is a reserved keyword\n var consteval = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var consteval = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"constexpr\"",
    "result": "Error while parsing WGSL: :2:7 error: 'constexpr' is a reserved keyword\n var constexpr = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var constexpr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"constinit\"",
    "result": "Error while parsing WGSL: :2:7 error: 'constinit' is a reserved keyword\n var constinit = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var constinit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"crate\"",
    "result": "Error while parsing WGSL: :2:7 error: 'crate' is a reserved keyword\n var crate = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var crate = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"debugger\"",
    "result": "Error while parsing WGSL: :2:7 error: 'debugger' is a reserved keyword\n var debugger = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var debugger = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"decltype\"",
    "result": "Error while parsing WGSL: :2:7 error: 'decltype' is a reserved keyword\n var decltype = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var decltype = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"delete\"",
    "result": "Error while parsing WGSL: :2:7 error: 'delete' is a reserved keyword\n var delete = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var delete = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"demote\"",
    "result": "Error while parsing WGSL: :2:7 error: 'demote' is a reserved keyword\n var demote = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var demote = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"demote_to_helper\"",
    "result": "Error while parsing WGSL: :2:7 error: 'demote_to_helper' is a reserved keyword\n var demote_to_helper = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var demote_to_helper = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"do\"",
    "result": "Error while parsing WGSL: :2:7 error: 'do' is a reserved keyword\n var do = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var do = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"dynamic_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'dynamic_cast' is a reserved keyword\n var dynamic_cast = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var dynamic_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"enum\"",
    "result": "Error while parsing WGSL: :2:7 error: 'enum' is a reserved keyword\n var enum = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var enum = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"explicit\"",
    "result": "Error while parsing WGSL: :2:7 error: 'explicit' is a reserved keyword\n var explicit = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var explicit = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"export\"",
    "result": "Error while parsing WGSL: :2:7 error: 'export' is a reserved keyword\n var export = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var export = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"extends\"",
    "result": "Error while parsing WGSL: :2:7 error: 'extends' is a reserved keyword\n var extends = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var extends = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"extern\"",
    "result": "Error while parsing WGSL: :2:7 error: 'extern' is a reserved keyword\n var extern = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var extern = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"external\"",
    "result": "Error while parsing WGSL: :2:7 error: 'external' is a reserved keyword\n var external = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var external = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"fallthrough\"",
    "result": "Error while parsing WGSL: :2:7 error: expected identifier for variable declaration\n var fallthrough = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var fallthrough = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"filter\"",
    "result": "Error while parsing WGSL: :2:7 error: 'filter' is a reserved keyword\n var filter = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var filter = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"final\"",
    "result": "Error while parsing WGSL: :2:7 error: 'final' is a reserved keyword\n var final = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var final = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"finally\"",
    "result": "Error while parsing WGSL: :2:7 error: 'finally' is a reserved keyword\n var finally = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var finally = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"friend\"",
    "result": "Error while parsing WGSL: :2:7 error: 'friend' is a reserved keyword\n var friend = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var friend = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"from\"",
    "result": "Error while parsing WGSL: :2:7 error: 'from' is a reserved keyword\n var from = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var from = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"fxgroup\"",
    "result": "Error while parsing WGSL: :2:7 error: 'fxgroup' is a reserved keyword\n var fxgroup = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var fxgroup = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"get\"",
    "result": "Error while parsing WGSL: :2:7 error: 'get' is a reserved keyword\n var get = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var get = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"goto\"",
    "result": "Error while parsing WGSL: :2:7 error: 'goto' is a reserved keyword\n var goto = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var goto = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"groupshared\"",
    "result": "Error while parsing WGSL: :2:7 error: 'groupshared' is a reserved keyword\n var groupshared = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var groupshared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"highp\"",
    "result": "Error while parsing WGSL: :2:7 error: 'highp' is a reserved keyword\n var highp = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var highp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"impl\"",
    "result": "Error while parsing WGSL: :2:7 error: 'impl' is a reserved keyword\n var impl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var impl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"implements\"",
    "result": "Error while parsing WGSL: :2:7 error: 'implements' is a reserved keyword\n var implements = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var implements = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"import\"",
    "result": "Error while parsing WGSL: :2:7 error: 'import' is a reserved keyword\n var import = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var import = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"inline\"",
    "result": "Error while parsing WGSL: :2:7 error: 'inline' is a reserved keyword\n var inline = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var inline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"instanceof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'instanceof' is a reserved keyword\n var instanceof = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var instanceof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"interface\"",
    "result": "Error while parsing WGSL: :2:7 error: 'interface' is a reserved keyword\n var interface = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var interface = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"layout\"",
    "result": "Error while parsing WGSL: :2:7 error: 'layout' is a reserved keyword\n var layout = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var layout = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"lowp\"",
    "result": "Error while parsing WGSL: :2:7 error: 'lowp' is a reserved keyword\n var lowp = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var lowp = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"macro\"",
    "result": "Error while parsing WGSL: :2:7 error: 'macro' is a reserved keyword\n var macro = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var macro = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"macro_rules\"",
    "result": "Error while parsing WGSL: :2:7 error: 'macro_rules' is a reserved keyword\n var macro_rules = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var macro_rules = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"match\"",
    "result": "Error while parsing WGSL: :2:7 error: 'match' is a reserved keyword\n var match = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var match = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mediump\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mediump' is a reserved keyword\n var mediump = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var mediump = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"meta\"",
    "result": "Error while parsing WGSL: :2:7 error: 'meta' is a reserved keyword\n var meta = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var meta = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mod\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mod' is a reserved keyword\n var mod = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var mod = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"module\"",
    "result": "Error while parsing WGSL: :2:7 error: 'module' is a reserved keyword\n var module = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var module = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"move\"",
    "result": "Error while parsing WGSL: :2:7 error: 'move' is a reserved keyword\n var move = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var move = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mut\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mut' is a reserved keyword\n var mut = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var mut = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"mutable\"",
    "result": "Error while parsing WGSL: :2:7 error: 'mutable' is a reserved keyword\n var mutable = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var mutable = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"namespace\"",
    "result": "Error while parsing WGSL: :2:7 error: 'namespace' is a reserved keyword\n var namespace = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var namespace = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"new\"",
    "result": "Error while parsing WGSL: :2:7 error: 'new' is a reserved keyword\n var new = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var new = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"nil\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nil' is a reserved keyword\n var nil = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var nil = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"noexcept\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noexcept' is a reserved keyword\n var noexcept = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var noexcept = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"noinline\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noinline' is a reserved keyword\n var noinline = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var noinline = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"nointerpolation\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nointerpolation' is a reserved keyword\n var nointerpolation = 1;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var nointerpolation = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"non_coherent\"",
    "result": "OK",
    "src": "fn F() {\n  var non_coherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"noncoherent\"",
    "result": "OK",
    "src": "fn F() {\n  var noncoherent = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"noperspective\"",
    "result": "Error while parsing WGSL: :2:7 error: 'noperspective' is a reserved keyword\n var noperspective = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var noperspective = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"null\"",
    "result": "Error while parsing WGSL: :2:7 error: 'null' is a reserved keyword\n var null = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var null = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"nullptr\"",
    "result": "Error while parsing WGSL: :2:7 error: 'nullptr' is a reserved keyword\n var nullptr = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var nullptr = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"of\"",
    "result": "Error while parsing WGSL: :2:7 error: 'of' is a reserved keyword\n var of = 1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var of = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"operator\"",
    "result": "Error while parsing WGSL: :2:7 error: 'operator' is a reserved keyword\n var operator = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var operator = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"package\"",
    "result": "Error while parsing WGSL: :2:7 error: 'package' is a reserved keyword\n var package = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var package = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"packoffset\"",
    "result": "Error while parsing WGSL: :2:7 error: 'packoffset' is a reserved keyword\n var packoffset = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var packoffset = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"partition\"",
    "result": "Error while parsing WGSL: :2:7 error: 'partition' is a reserved keyword\n var partition = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var partition = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"pass\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pass' is a reserved keyword\n var pass = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var pass = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"patch\"",
    "result": "Error while parsing WGSL: :2:7 error: 'patch' is a reserved keyword\n var patch = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var patch = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"pixelfragment\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pixelfragment' is a reserved keyword\n var pixelfragment = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var pixelfragment = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"precise\"",
    "result": "Error while parsing WGSL: :2:7 error: 'precise' is a reserved keyword\n var precise = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var precise = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"precision\"",
    "result": "Error while parsing WGSL: :2:7 error: 'precision' is a reserved keyword\n var precision = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var precision = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"premerge\"",
    "result": "Error while parsing WGSL: :2:7 error: 'premerge' is a reserved keyword\n var premerge = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var premerge = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"priv\"",
    "result": "Error while parsing WGSL: :2:7 error: 'priv' is a reserved keyword\n var priv = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var priv = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"protected\"",
    "result": "Error while parsing WGSL: :2:7 error: 'protected' is a reserved keyword\n var protected = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var protected = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"pub\"",
    "result": "Error while parsing WGSL: :2:7 error: 'pub' is a reserved keyword\n var pub = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var pub = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"public\"",
    "result": "Error while parsing WGSL: :2:7 error: 'public' is a reserved keyword\n var public = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var public = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"readonly\"",
    "result": "Error while parsing WGSL: :2:7 error: 'readonly' is a reserved keyword\n var readonly = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var readonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"ref\"",
    "result": "Error while parsing WGSL: :2:7 error: 'ref' is a reserved keyword\n var ref = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var ref = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"regardless\"",
    "result": "Error while parsing WGSL: :2:7 error: 'regardless' is a reserved keyword\n var regardless = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var regardless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"register\"",
    "result": "Error while parsing WGSL: :2:7 error: 'register' is a reserved keyword\n var register = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var register = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"reinterpret_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'reinterpret_cast' is a reserved keyword\n var reinterpret_cast = 1;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var reinterpret_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"require\"",
    "result": "Error while parsing WGSL: :2:7 error: 'require' is a reserved keyword\n var require = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var require = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"resource\"",
    "result": "Error while parsing WGSL: :2:7 error: 'resource' is a reserved keyword\n var resource = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var resource = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"restrict\"",
    "result": "Error while parsing WGSL: :2:7 error: 'restrict' is a reserved keyword\n var restrict = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var restrict = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"self\"",
    "result": "Error while parsing WGSL: :2:7 error: 'self' is a reserved keyword\n var self = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var self = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"set\"",
    "result": "Error while parsing WGSL: :2:7 error: 'set' is a reserved keyword\n var set = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var set = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"shared\"",
    "result": "Error while parsing WGSL: :2:7 error: 'shared' is a reserved keyword\n var shared = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var shared = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"sizeof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'sizeof' is a reserved keyword\n var sizeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var sizeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"smooth\"",
    "result": "Error while parsing WGSL: :2:7 error: 'smooth' is a reserved keyword\n var smooth = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var smooth = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"snorm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'snorm' is a reserved keyword\n var snorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var snorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"static\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static' is a reserved keyword\n var static = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var static = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"static_assert\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static_assert' is a reserved keyword\n var static_assert = 1;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var static_assert = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"static_cast\"",
    "result": "Error while parsing WGSL: :2:7 error: 'static_cast' is a reserved keyword\n var static_cast = 1;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var static_cast = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"std\"",
    "result": "Error while parsing WGSL: :2:7 error: 'std' is a reserved keyword\n var std = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var std = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"subroutine\"",
    "result": "Error while parsing WGSL: :2:7 error: 'subroutine' is a reserved keyword\n var subroutine = 1;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var subroutine = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"super\"",
    "result": "Error while parsing WGSL: :2:7 error: 'super' is a reserved keyword\n var super = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var super = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"target\"",
    "result": "Error while parsing WGSL: :2:7 error: 'target' is a reserved keyword\n var target = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var target = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"template\"",
    "result": "Error while parsing WGSL: :2:7 error: 'template' is a reserved keyword\n var template = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var template = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"this\"",
    "result": "Error while parsing WGSL: :2:7 error: 'this' is a reserved keyword\n var this = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var this = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"thread_local\"",
    "result": "Error while parsing WGSL: :2:7 error: 'thread_local' is a reserved keyword\n var thread_local = 1;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var thread_local = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"throw\"",
    "result": "Error while parsing WGSL: :2:7 error: 'throw' is a reserved keyword\n var throw = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var throw = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"trait\"",
    "result": "Error while parsing WGSL: :2:7 error: 'trait' is a reserved keyword\n var trait = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var trait = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"try\"",
    "result": "Error while parsing WGSL: :2:7 error: 'try' is a reserved keyword\n var try = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var try = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"type\"",
    "result": "Error while parsing WGSL: :2:7 error: 'type' is a reserved keyword\n var type = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var type = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"typedef\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typedef' is a reserved keyword\n var typedef = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var typedef = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"typeid\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typeid' is a reserved keyword\n var typeid = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var typeid = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"typename\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typename' is a reserved keyword\n var typename = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var typename = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"typeof\"",
    "result": "Error while parsing WGSL: :2:7 error: 'typeof' is a reserved keyword\n var typeof = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var typeof = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"union\"",
    "result": "Error while parsing WGSL: :2:7 error: 'union' is a reserved keyword\n var union = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var union = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"unless\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unless' is a reserved keyword\n var unless = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var unless = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"unorm\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unorm' is a reserved keyword\n var unorm = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var unorm = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"unsafe\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unsafe' is a reserved keyword\n var unsafe = 1;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var unsafe = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"unsized\"",
    "result": "Error while parsing WGSL: :2:7 error: 'unsized' is a reserved keyword\n var unsized = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var unsized = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"use\"",
    "result": "Error while parsing WGSL: :2:7 error: 'use' is a reserved keyword\n var use = 1;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var use = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"using\"",
    "result": "Error while parsing WGSL: :2:7 error: 'using' is a reserved keyword\n var using = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var using = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"varying\"",
    "result": "Error while parsing WGSL: :2:7 error: 'varying' is a reserved keyword\n var varying = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var varying = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"virtual\"",
    "result": "Error while parsing WGSL: :2:7 error: 'virtual' is a reserved keyword\n var virtual = 1;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var virtual = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"volatile\"",
    "result": "Error while parsing WGSL: :2:7 error: 'volatile' is a reserved keyword\n var volatile = 1;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var volatile = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"wgsl\"",
    "result": "Error while parsing WGSL: :2:7 error: 'wgsl' is a reserved keyword\n var wgsl = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var wgsl = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"where\"",
    "result": "Error while parsing WGSL: :2:7 error: 'where' is a reserved keyword\n var where = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var where = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"with\"",
    "result": "Error while parsing WGSL: :2:7 error: 'with' is a reserved keyword\n var with = 1;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var with = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"writeonly\"",
    "result": "Error while parsing WGSL: :2:7 error: 'writeonly' is a reserved keyword\n var writeonly = 1;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var writeonly = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:function_var_name:ident=\"yield\"",
    "result": "Error while parsing WGSL: :2:7 error: 'yield' is a reserved keyword\n var yield = 1;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn F() {\n  var yield = 1;\n}"
  },
  {
    "name": "webgpu:shader,validation,parse,identifiers:non_normalized:",
    "result": "OK",
    "src": "var<private> Å : i32;  // Å normalizes with NFC to Å\nvar<private> Å : i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:bools:val=\"true\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = true;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:bools:val=\"false\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = false;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0x123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0x3f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"2147483647\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-0x123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-0x3f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"94i\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"94i\" (3)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -2147483648;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"94i\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 94i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-2147483647i\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-2147483647i\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"i32(-2147483648)\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = i32(-2147483648);\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"42u\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 42u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0u\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0123\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 4294967295u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"0123\"",
    "result": "Error while parsing WGSL: :6:20 error: integer literal cannot have leading 0s\n var test = 0123;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-2147483649i\" (2)",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'i32'\n var test = 2147483648i;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2147483648i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-2147483649i\"",
    "result": "Error while parsing WGSL: :6:21 error: value cannot be represented as 'i32'\n var test = -2147483649i;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -2147483649i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"4294967295\"",
    "result": "Error while parsing WGSL: :6:20 error: value 4294967295 cannot be represented as 'i32'\n var test = 4294967295;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 4294967295;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-1u\" (2)",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'i32'\n var test = 4294967295i;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 4294967295i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-1u\" (3)",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'u32'\n var test = 4294967296u;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 4294967296u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_int:val=\"-1u\"",
    "result": "Error while parsing WGSL: :6:20 error: no matching overload for 'operator - (u32)'\n\n2 candidate operators:\n • 'operator - (T ✗ ) -> T' where:\n ✗ 'T' is 'abstract-float', 'abstract-int', 'f32', 'i32' or 'f16'\n • 'operator - (vecN<T> ✗ ) -> vecN<T>' where:\n ✗ 'T' is 'abstract-float', 'abstract-int', 'f32', 'i32' or 'f16'\n\n var test = -1u;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = -1u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"0x123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"0x3f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"2147483647\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-123\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-0x3f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-2147483647\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-2147483648\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -2147483648;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"94i\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 94i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"2147483647i\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-2147483647i\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"i32(-2147483648)\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = i32(-2147483648);\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"42u\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'i32' with value of type 'u32'\n var test: i32 = 42u;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 42u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"0u\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'i32' with value of type 'u32'\n var test: i32 = 0u;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 0u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"4294967295u\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'i32' with value of type 'u32'\n var test: i32 = 4294967295u;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 4294967295u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"2147483648\"",
    "result": "Error while parsing WGSL: :6:25 error: value 2147483648 cannot be represented as 'i32'\n var test: i32 = 2147483648;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 2147483648;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"2147483648i\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'i32'\n var test: i32 = 2147483648i;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 2147483648i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-2147483649\"",
    "result": "Error while parsing WGSL: :6:25 error: value -2147483649 cannot be represented as 'i32'\n var test: i32 = -2147483649;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -2147483649;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"-2147483649i\"",
    "result": "Error while parsing WGSL: :6:26 error: value cannot be represented as 'i32'\n var test: i32 = -2147483649i;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = -2147483649i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"1.0\"",
    "result": "Error while parsing WGSL: :6:25 error: cannot convert value of type 'abstract-float' to type 'i32'\n var test: i32 = 1.0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 1.0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"1.0f\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'i32' with value of type 'f32'\n var test: i32 = 1.0f;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 1.0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:i32:val=\"1.0h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: i32 = 1.0h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"0x123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"123\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"0x3f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"2147483647\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"42u\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 42u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"0u\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 0u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"4294967295u\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 4294967295u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"4294967295\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 4294967295;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-123\" (2)",
    "result": "Error while parsing WGSL: :6:25 error: value -291 cannot be represented as 'u32'\n var test: u32 = -0x123;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -0x123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-123\"",
    "result": "Error while parsing WGSL: :6:25 error: value -123 cannot be represented as 'u32'\n var test: u32 = -123;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -123;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-0x3f\"",
    "result": "Error while parsing WGSL: :6:25 error: value -63 cannot be represented as 'u32'\n var test: u32 = -0x3f;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -0x3f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-2147483647\"",
    "result": "Error while parsing WGSL: :6:25 error: value -2147483647 cannot be represented as 'u32'\n var test: u32 = -2147483647;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -2147483647;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-2147483648\"",
    "result": "Error while parsing WGSL: :6:25 error: value -2147483648 cannot be represented as 'u32'\n var test: u32 = -2147483648;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -2147483648;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"94i\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'u32' with value of type 'i32'\n var test: u32 = 94i;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 94i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"2147483647i\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'u32' with value of type 'i32'\n var test: u32 = 2147483647i;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-2147483647i\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'u32' with value of type 'i32'\n var test: u32 = -2147483647i;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -2147483647i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"i32(-2147483648)\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'u32' with value of type 'i32'\n var test: u32 = i32(-2147483648);\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = i32(-2147483648);\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"4294967296\"",
    "result": "Error while parsing WGSL: :6:25 error: value 4294967296 cannot be represented as 'u32'\n var test: u32 = 4294967296;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 4294967296;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"4294967296u\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'u32'\n var test: u32 = 4294967296u;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 4294967296u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"-1\"",
    "result": "Error while parsing WGSL: :6:25 error: value -1 cannot be represented as 'u32'\n var test: u32 = -1;\n ^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = -1;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"1.0\"",
    "result": "Error while parsing WGSL: :6:25 error: cannot convert value of type 'abstract-float' to type 'u32'\n var test: u32 = 1.0;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 1.0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"1.0f\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'u32' with value of type 'f32'\n var test: u32 = 1.0f;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 1.0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:u32:val=\"1.0h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: u32 = 1.0h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0.0f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0.0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"12.223f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 12.223f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"12.f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 12.f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".12f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .12f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"2.4e%2B4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2.4e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"2.4e-2f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2.4e-2f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"2.e%2B4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2.e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1e-4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1e-4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1P%2B4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1P+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.1e2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.1e2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.1E%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.1E+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"2.4e-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2.4e-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xep2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xep2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xEp-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xEp-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x3p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x3p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x3.2p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x3.2p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0.0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0.0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"12.\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 12.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"00012.\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 00012.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".12\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .12;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.2e2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.2e2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.2E2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.2E2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.2e%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.2e+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"2.4e-2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 2.4e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".1e-2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .1e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x.3\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0X.3\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0X.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xa.fp%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xa.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xa.fP%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xa.fP+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xE.fp%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xE.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0X1.fp-4\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0X1.fp-4;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".f\"",
    "result": "Error while parsing WGSL: :6:20 error: missing initializer for 'var' declaration\n var test = .f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\".e-2\"",
    "result": "Error while parsing WGSL: :6:20 error: missing initializer for 'var' declaration\n var test = .e-2;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = .e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.e%262f\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.e\n var test = 1.e&2f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.e&2f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.ef\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.e\n var test = 1.ef;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.ef;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.e%2Bf\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.e+\n var test = 1.e+f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.e+f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x.p2\"",
    "result": "Error while parsing WGSL: :6:20 error: integer or float hex literal has no significant digits\n var test = 0x.p2;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x.p2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1p\"",
    "result": "Error while parsing WGSL: :6:20 error: expected an exponent value for hex float\n var test = 0x1p;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1p;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1p%5E\"",
    "result": "Error while parsing WGSL: :6:20 error: expected an exponent value for hex float\n var test = 0x1p^;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1p^;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.0e%2B999999999999f\"",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'f32'\n var test = 1.0e+999999999999f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.0e+999999999999f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1.0p%2B999999999999f\"",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'f32'\n var test = 0x1.0p+999999999999f;\n ^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1.0p+999999999999f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1.00000001pf0\"",
    "result": "Error while parsing WGSL: :6:20 error: expected an exponent value for hex float\n var test = 0x1.00000001pf0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1.00000001pf0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.1eh\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.1e\n var test = 1.1eh;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.1eh;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.1e!2h\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.1e\n var test = 1.1e!2h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.1e!2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.1e%2Bh\"",
    "result": "Error while parsing WGSL: :6:20 error: incomplete exponent for floating point literal: 1.1e+\n var test = 1.1e+h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.1e+h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"1.0e%2B999999h\"",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'f16'\n var test = 1.0e+999999h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 1.0e+999999h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x1.0p%2B999999h\"",
    "result": "Error while parsing WGSL: :6:20 error: value cannot be represented as 'f16'\n var test = 0x1.0p+999999h;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x1.0p+999999h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0xf.h\"",
    "result": "Error while parsing WGSL: :6:24 error: expected ';' for variable declaration\n var test = 0xf.h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0xf.h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:abstract_float:val=\"0x3h\"",
    "result": "Error while parsing WGSL: :6:23 error: expected ';' for variable declaration\n var test = 0x3h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test = 0x3h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0.0f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0.0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"12.223f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 12.223f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"12.f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 12.f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".12f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .12f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"2.4e%2B4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 2.4e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"2.4e-2f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 2.4e-2f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1e-4f\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 2.e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1e-4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1e-4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x1P%2B4f\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x1P+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0.0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0.0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".0\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"12.\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 12.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".12\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 00012.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".12\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .12;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.2e2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.2e2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.2E2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.2E2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".1e-2\" (2)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.2e+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".1e-2\" (3)",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 2.4e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".1e-2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .1e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x.3\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0X.3\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0X.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0xa.fp%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0xa.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0xa.fP%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0xa.fP+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0xE.fp%2B2\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0xE.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0X1.fp-4\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0X1.fp-4;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"-1\"",
    "result": "OK",
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = -1;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.1e2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.1e2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.1E%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.1E+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"2.4e-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 2.4e-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0xep2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0xep2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0xEp-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0xEp-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x3p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x3p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x3.2p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x3.2p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1u\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'f32' with value of type 'u32'\n var test: f32 = 1u;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1i\"",
    "result": "Error while parsing WGSL: :6:9 error: cannot initialize 'var' of type 'f32' with value of type 'i32'\n var test: f32 = 1i;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".f\"",
    "result": "Error while parsing WGSL: :6:25 error: missing initializer for 'var' declaration\n var test: f32 = .f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\".e-2\"",
    "result": "Error while parsing WGSL: :6:25 error: missing initializer for 'var' declaration\n var test: f32 = .e-2;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = .e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.ef\" (2)",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.e\n var test: f32 = 1.e&2f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.e&2f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.ef\"",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.e\n var test: f32 = 1.ef;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.ef;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.e%2Bf\"",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.e+\n var test: f32 = 1.e+f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.e+f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x.p2\"",
    "result": "Error while parsing WGSL: :6:25 error: integer or float hex literal has no significant digits\n var test: f32 = 0x.p2;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x.p2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x1p\"",
    "result": "Error while parsing WGSL: :6:25 error: expected an exponent value for hex float\n var test: f32 = 0x1p;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x1p;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x1p%5E\"",
    "result": "Error while parsing WGSL: :6:25 error: expected an exponent value for hex float\n var test: f32 = 0x1p^;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x1p^;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"1.0e%2B999999999999f\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'f32'\n var test: f32 = 1.0e+999999999999f;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 1.0e+999999999999f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x1.0p%2B999999999999f\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'f32'\n var test: f32 = 0x1.0p+999999999999f;\n ^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x1.0p+999999999999f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f32:val=\"0x1.00000001pf0\"",
    "result": "Error while parsing WGSL: :6:25 error: expected an exponent value for hex float\n var test: f32 = 0x1.00000001pf0;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      \n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f32 = 0x1.00000001pf0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\".1h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = .1h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.1e2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.1e2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.1E%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.1E+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"2.4e-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 2.4e-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0xep2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0xep2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0xEp-2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0xEp-2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0x3p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0x3p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0x3.2p%2B2h\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0x3.2p+2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0.0\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0.0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\".0\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = .0;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"12.\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 12.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"00012.\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 00012.;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\".12\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = .12;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.2e2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.2e2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.2E2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.2E2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.2e%2B2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.2e+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"2.4e-2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 2.4e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\".1e-2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = .1e-2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0x.3\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0x.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0X.3\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0X.3;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0xa.fp%2B2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0xa.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0xa.fP%2B2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0xa.fP+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0xE.fp%2B2\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0xE.fp+2;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0X1.fp-4\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0X1.fp-4;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"-1\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = -1;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0.0f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0.0f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"12.223f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 12.223f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"12.f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 12.f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\".12f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = .12f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"2.4e%2B4f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 2.4e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"2.4e-2f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 2.4e-2f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"2.e%2B4f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 2.e+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1e-4f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1e-4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0x1P%2B4f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0x1P+4f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1i\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1i;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1u\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1u;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1f\"",
    "result": "Error while parsing WGSL: :2:14 error: extension 'f16' is not allowed in the current environment\n enable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1f;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.1eh\"",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.1e\n var test: f16 = 1.1eh;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.1eh;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.1e!2h\"",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.1e\n var test: f16 = 1.1e!2h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.1e!2h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.1e%2Bh\"",
    "result": "Error while parsing WGSL: :6:25 error: incomplete exponent for floating point literal: 1.1e+\n var test: f16 = 1.1e+h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.1e+h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"1.0e%2B999999h\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'f16'\n var test: f16 = 1.0e+999999h;\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 1.0e+999999h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,literal:f16:val=\"0x1.0p%2B999999h\"",
    "result": "Error while parsing WGSL: :6:25 error: value cannot be represented as 'f16'\n var test: f16 = 0x1.0p+999999h;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n      enable f16;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        var test: f16 = 0x1.0p+999999h;\n      }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"var\"",
    "result": "Error while parsing WGSL: :1:2 error: '@must_use' is not valid for module-scope 'var'\n@must_use @group(0) @binding(0)\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@must_use @group(0) @binding(0)\n    var<storage> x : array<u32>;"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_no_return\"",
    "result": "Error while parsing WGSL: :1:2 error: '@must_use' can only be applied to functions that return a value\n@must_use fn foo() { }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@must_use fn foo() { }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_scalar_return\"",
    "result": "OK",
    "src": "@must_use fn foo() -> u32 { return 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_struct_return\"",
    "result": "OK",
    "src": "struct S { x : u32 }\n    @must_use fn foo() -> S { return S(); }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_var\"",
    "result": "Error while parsing WGSL: :1:13 error: unexpected attributes\nfn foo() { @must_use var x = 0; }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo() { @must_use var x = 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_call\"",
    "result": "Error while parsing WGSL: :2:17 error: unexpected attributes\n fn foo() { @must_use bar(); }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn bar() -> u32 { return 0; }\n    fn foo() { @must_use bar(); }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"function_parameter\"",
    "result": "Error while parsing WGSL: :1:9 error: '@must_use' is not valid for function parameters\nfn foo(@must_use param : u32) -> u32 { return param; }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn foo(@must_use param : u32) -> u32 { return param; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"empty_parameter\"",
    "result": "Error while parsing WGSL: :1:10 error: must_use attribute doesn't take parenthesis\n@must_use() fn foo() -> u32 { return 0; }\n ^\n\n:1:11 error: unexpected token\n@must_use() fn foo() -> u32 { return 0; }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@must_use() fn foo() -> u32 { return 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"parameter\"",
    "result": "Error while parsing WGSL: :1:10 error: must_use attribute doesn't take parenthesis\n@must_use(0) fn foo() -> u32 { return 0; }\n ^\n\n:1:11 error: unexpected token\n@must_use(0) fn foo() -> u32 { return 0; }\n ^\n\n:1:12 error: unexpected token\n@must_use(0) fn foo() -> u32 { return 0; }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@must_use(0) fn foo() -> u32 { return 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:declaration:test=\"duplicate\"",
    "result": "Error while parsing WGSL: :1:12 error: duplicate must_use attribute\n@must_use @must_use fn foo() -> u32 { return 0; }\n ^^^^^^^^\n\n:1:2 note: first attribute declared here\n@must_use @must_use fn foo() -> u32 { return 0; }\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "@must_use @must_use fn foo() -> u32 { return 0; }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"no_call\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"phony\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      _ = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"let\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      let tmp = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"local_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      var tmp = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"private_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      private_var = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"storage_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      storage_var = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"pointer\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : f32;\n    let p = &a;\n    (*p) = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"vector_elem\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : vec3<f32>;\n    a.x = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"matrix_elem\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : mat3x2<f32>;\n    a[0][0] = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"condition\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      if bar() == 0 { }\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"param\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      baz(bar());\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"return\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo() -> f32 {\n      return bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"%40must_use\";call=\"statement\"",
    "result": "Error while parsing WGSL: :10:7 error: ignoring return value of function 'bar' annotated with '@must_use'\n bar();\n ^^^\n\n:7:15 note: function 'bar' declared here\n @must_use fn bar() -> f32 { return 0; }\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n    @must_use fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"no_call\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"phony\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      _ = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"let\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      let tmp = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"local_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      var tmp = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"private_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      private_var = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"storage_var\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      storage_var = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"pointer\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : f32;\n    let p = &a;\n    (*p) = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"vector_elem\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : vec3<f32>;\n    a.x = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"matrix_elem\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      \n    var a : mat3x2<f32>;\n    a[0][0] = bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"condition\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      if bar() == 0 { }\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"param\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      baz(bar());\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"return\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo() -> f32 {\n      return bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:call:use=\"\";call=\"statement\"",
    "result": "OK",
    "src": "\n    @group(0) @binding(0) var<storage, read_write> storage_var : f32;\n    var<private> private_var : f32;\n\n    fn baz(param : f32) { }\n\n     fn bar() -> f32 { return 0; }\n\n    fn foo()  {\n      bar();\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,must_use:ignore_result_of_non_must_use_that_returns_call_of_must_use:",
    "result": "OK",
    "src": "\n    @must_use\n    fn f() -> f32 {\n      return 0;\n    }\n\n    fn g() -> f32 {\n      return f();\n    }\n\n    fn main() {\n      g(); // Ignore result\n    }\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"valid\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"decl_before\"",
    "result": "Error while parsing WGSL: :2:1 error: directives must come before all global declarations\nrequires readonly_and_readwrite_storage_textures;\n^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias i = i32;\nrequires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"decl_after\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;\nalias i = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"enable_before\"",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;\nrequires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"diagnostic_before\"",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniformity);\nrequires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"const_assert_before\"",
    "result": "Error while parsing WGSL: :2:1 error: directives must come before all global declarations\nrequires readonly_and_readwrite_storage_textures;\n^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const_assert 1 == 1;\nrequires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"const_assert_after\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;\nconst_assert 1 == 1;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"embedded_comment\"",
    "result": "OK",
    "src": "/* comment\n\n*/requires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"parens\"",
    "result": "Error while parsing WGSL: :1:9 error: requires directives don't take parenthesis\nrequires(readonly_and_readwrite_storage_textures);\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "requires(readonly_and_readwrite_storage_textures);"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"multi_line\"",
    "result": "OK",
    "src": "requires\nreadonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"multiple_requires_duplicate\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;\nrequires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"multiple_requires_different\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;\nrequires packed_4x8_integer_dot_product;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"multiple_entries_duplicate\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures, readonly_and_readwrite_storage_textures, readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"multiple_entries_different\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures, packed_4x8_integer_dot_product;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:requires:case=\"unknown\"",
    "result": "Error while parsing WGSL: :1:10 error: feature 'unknown' is not supported\nrequires unknown;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "requires unknown;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:wgsl_matches_api:feature=\"readonly_and_readwrite_storage_textures\"",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:wgsl_matches_api:feature=\"packed_4x8_integer_dot_product\"",
    "result": "OK",
    "src": "requires packed_4x8_integer_dot_product;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:wgsl_matches_api:feature=\"unrestricted_pointer_parameters\"",
    "result": "OK",
    "src": "requires unrestricted_pointer_parameters;"
  },
  {
    "name": "webgpu:shader,validation,parse,requires:wgsl_matches_api:feature=\"pointer_composite_access\"",
    "result": "OK",
    "src": "requires pointer_composite_access;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:module_scope_single:",
    "result": "OK",
    "src": ";"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:module_scope_multiple:",
    "result": "OK",
    "src": ";;;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_enable: (2)",
    "result": "Error while parsing WGSL: :1:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_enable:",
    "result": "Error while parsing WGSL: :1:11 error: expected ';' for enable directive\nenable f16\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "enable f16"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_requires: (2)",
    "result": "OK",
    "src": "requires readonly_and_readwrite_storage_textures;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_requires:",
    "result": "Error while parsing WGSL: :1:49 error: expected ';' for requires directive\nrequires readonly_and_readwrite_storage_textures\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "requires readonly_and_readwrite_storage_textures"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_diagnostic: (2)",
    "result": "OK",
    "src": "diagnostic(info, derivative_uniformity);"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_diagnostic:",
    "result": "Error while parsing WGSL: :1:40 error: expected ';' for diagnostic directive\ndiagnostic(info, derivative_uniformity)\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "diagnostic(info, derivative_uniformity)"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_struct_decl: (2)",
    "result": "OK",
    "src": "struct S { x : i32 };"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_struct_decl:",
    "result": "OK",
    "src": "struct S { x : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_member: (2)",
    "result": "OK",
    "src": "struct S { x : i32 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_member:",
    "result": "Error while parsing WGSL: :1:19 error: expected '}' for struct declaration\nstruct S { x : i32; }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "struct S { x : i32; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_func_decl: (2)",
    "result": "OK",
    "src": "fn f() {};"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_func_decl:",
    "result": "OK",
    "src": "fn f() {}"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_type_alias_decl: (2)",
    "result": "OK",
    "src": "alias T = i32;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_type_alias_decl:",
    "result": "Error while parsing WGSL: :1:14 error: expected ';' for type alias\nalias T = i32\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "alias T = i32"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_return: (2)",
    "result": "OK",
    "src": "fn f() { return; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_return:",
    "result": "Error while parsing WGSL: :1:17 error: expected ';' for return statement\nfn f() { return }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { return }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_call: (2)",
    "result": "OK",
    "src": "fn f() { workgroupBarrier(); }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_call:",
    "result": "Error while parsing WGSL: :1:29 error: expected ';' for function call\nfn f() { workgroupBarrier() }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { workgroupBarrier() }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_module_const_decl: (2)",
    "result": "OK",
    "src": "const v = 1;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_module_const_decl:",
    "result": "Error while parsing WGSL: :1:12 error: expected ';' for 'const' declaration\nconst v = 1\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "const v = 1"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_const_decl: (2)",
    "result": "OK",
    "src": "fn f() { const v = 1; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_const_decl:",
    "result": "Error while parsing WGSL: :1:22 error: expected ';' for variable declaration\nfn f() { const v = 1 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { const v = 1 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_module_var_decl: (2)",
    "result": "OK",
    "src": "var<private> v = 1;"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_module_var_decl:",
    "result": "Error while parsing WGSL: :1:19 error: expected ';' for variable declaration\nvar<private> v = 1\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "var<private> v = 1"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_var_decl: (2)",
    "result": "OK",
    "src": "fn f() { var v = 1; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_var_decl:",
    "result": "Error while parsing WGSL: :1:20 error: expected ';' for variable declaration\nfn f() { var v = 1 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { var v = 1 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_let_decl: (2)",
    "result": "OK",
    "src": "fn f() { let v = 1; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_let_decl:",
    "result": "Error while parsing WGSL: :1:20 error: expected ';' for variable declaration\nfn f() { let v = 1 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { let v = 1 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_discard: (2)",
    "result": "OK",
    "src": "fn f() { discard; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_discard:",
    "result": "Error while parsing WGSL: :1:18 error: expected ';' for discard statement\nfn f() { discard }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { discard }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_assignment: (2)",
    "result": "OK",
    "src": "fn f() { var v = 1; v = 2; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_assignment:",
    "result": "Error while parsing WGSL: :1:27 error: expected ';' for assignment statement\nfn f() { var v = 1; v = 2 }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { var v = 1; v = 2 }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_const_assert: (2)",
    "result": "OK",
    "src": "fn f() { const_assert(true); }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_fn_const_assert:",
    "result": "Error while parsing WGSL: :1:29 error: expected ';' for statement\nfn f() { const_assert(true) }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { const_assert(true) }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:function_body_single:",
    "result": "OK",
    "src": "fn f() { ; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:function_body_multiple:",
    "result": "OK",
    "src": "fn f() { ;;; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:compound_statement_single:",
    "result": "OK",
    "src": "fn f() { { ; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:compound_statement_multiple:",
    "result": "OK",
    "src": "fn f() { { ;;; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_compound_statement:",
    "result": "OK",
    "src": "fn f() { {} ; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_if:",
    "result": "OK",
    "src": "fn f() { if true {} ; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_if_else:",
    "result": "OK",
    "src": "fn f() { if true {} else {} ; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_switch:",
    "result": "OK",
    "src": "fn f() { switch 1 { default {} } ; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_case: (2)",
    "result": "Error while parsing WGSL: :1:30 error: expected '}' for switch statement\nfn f() { switch 1 { case 1 {}; default {} } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { switch 1 { case 1 {}; default {} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_case:",
    "result": "OK",
    "src": "fn f() { switch 1 { case 1 {} default {} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_case_break: (2)",
    "result": "Error while parsing WGSL: :1:36 error: expected ';' for break statement\nfn f() { switch 1 { case 1 { break } default {} } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { switch 1 { case 1 { break } default {} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_case_break:",
    "result": "OK",
    "src": "fn f() { switch 1 { case 1 { break; } default {} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_default_case: (2)",
    "result": "Error while parsing WGSL: :1:31 error: expected '}' for switch statement\nfn f() { switch 1 { default {}; } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { switch 1 { default {}; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_default_case:",
    "result": "OK",
    "src": "fn f() { switch 1 { default {} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_default_case_break: (2)",
    "result": "Error while parsing WGSL: :1:37 error: expected ';' for break statement\nfn f() { switch 1 { default { break } } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { switch 1 { default { break } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_default_case_break:",
    "result": "OK",
    "src": "fn f() { switch 1 { default { break; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_for:",
    "result": "OK",
    "src": "fn f() { for (; false;) {}; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_for_break: (2)",
    "result": "OK",
    "src": "fn f() { for (; false;) { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_for_break:",
    "result": "Error while parsing WGSL: :1:33 error: expected ';' for break statement\nfn f() { for (; false;) { break } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { for (; false;) { break } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop:",
    "result": "OK",
    "src": "fn f() { loop { break; }; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_break: (2)",
    "result": "OK",
    "src": "fn f() { loop { break; }; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_break:",
    "result": "Error while parsing WGSL: :1:23 error: expected ';' for break statement\nfn f() { loop { break }; }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { loop { break }; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_break_if: (2)",
    "result": "OK",
    "src": "fn f() { loop { continuing { break if true; } }; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_break_if:",
    "result": "Error while parsing WGSL: :1:44 error: expected ';' for `break-if` statement\nfn f() { loop { continuing { break if true } }; }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { loop { continuing { break if true } }; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_continue: (2)",
    "result": "OK",
    "src": "fn f() { loop { if true { continue; } { break; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_loop_continue:",
    "result": "Error while parsing WGSL: :1:36 error: expected ';' for continue statement\nfn f() { loop { if true { continue } { break; } } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { loop { if true { continue } { break; } } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_continuing: (2)",
    "result": "Error while parsing WGSL: :1:36 error: expected '}' for loop\nfn f() { loop { break; continuing{}; } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { loop { break; continuing{}; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_continuing:",
    "result": "OK",
    "src": "fn f() { loop { break; continuing{} } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_while:",
    "result": "OK",
    "src": "fn f() { while false {}; }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_while_break: (2)",
    "result": "OK",
    "src": "fn f() { while false { break; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_while_break:",
    "result": "Error while parsing WGSL: :1:30 error: expected ';' for break statement\nfn f() { while false { break } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { while false { break } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_while_continue: (2)",
    "result": "OK",
    "src": "fn f() { while false { continue; } }"
  },
  {
    "name": "webgpu:shader,validation,parse,semicolon:after_while_continue:",
    "result": "Error while parsing WGSL: :1:33 error: expected ';' for continue statement\nfn f() { while false { continue } }\n ^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "fn f() { while false { continue } }"
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:function_param:",
    "result": "OK",
    "src": "\nfn f(f: i32, i32: i32, t: i32) -> i32 { return i32; }\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (2)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = abs(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (3)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acos(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (4)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acosh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (5)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = all(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (6)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = any(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (7)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array<i32, 2>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (8)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (9)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = arrayLength(&placeholder.rt_arr);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (10)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asin(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (11)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asinh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (12)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (13)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atanh(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (14)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan2(1.2, 2.3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (15)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bool(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (16)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bitcast<f32>(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (17)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ceil(1.23);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (18)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = clamp(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (19)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cos(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (20)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cosh(2.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (21)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countLeadingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (22)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countOneBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (23)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countTrailingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (24)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (25)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = degrees(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (26)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = determinant(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (27)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = distance(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (28)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot(vec2(1, 2,), vec2(2, 3));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (29)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4U8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (30)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4I8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (31)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdx(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (32)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (33)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (34)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdy(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (35)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (36)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (37)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (38)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (39)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = extractBits(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (40)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = f32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (41)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (42)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstLeadingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (43)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstTrailingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (44)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = floor(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (45)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fma(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (46)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fract(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (47)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = frexp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (48)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidth(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (49)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (50)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (51)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = i32(2u);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (52)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = insertBits(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (53)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = inverseSqrt(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (54)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ldexp(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (55)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = length(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (56)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (57)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (58)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (59)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (60)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (61)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (62)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (63)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (64)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (65)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (66)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (67)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (68)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (69)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (70)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (71)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (72)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (73)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (74)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (75)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (76)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = max(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (77)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = min(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (78)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mix(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (79)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = modf(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (80)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = normalize(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (81)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16snorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (82)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16unorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (83)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16float(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (84)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8snorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (85)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8unorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (86)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (87)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (88)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (89)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (90)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pow(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (91)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = quantizeToF16(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (92)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = radians(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (93)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reflect(vec2(1, 2), vec2(3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (94)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = refract(vec2(1, 1), vec2(2, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (95)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reverseBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (96)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = round(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (97)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = saturate(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (98)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = select(1, 2, false);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (99)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sign(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (100)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sin(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (101)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sinh(3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (102)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = smoothstep(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (103)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sqrt(24);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (104)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = step(4, 5);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (105)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tan(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (106)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tanh(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (107)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = transpose(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (108)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = trunc(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (109)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = u32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (110)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16snorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (111)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16unorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (112)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16float(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (113)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8snorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (114)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8unorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (115)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xI8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (116)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xU8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (117)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2<f32>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (118)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (119)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3<f32>(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (120)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\" (121)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"none\"",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (2)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let abs' as call target\n _ = abs(1);\n ^^^\n\n:15:7 note: 'let abs' declared here\n let abs = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let abs = 4;\n  _ = abs(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (3)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let acos' as call target\n _ = acos(.2);\n ^^^^\n\n:15:7 note: 'let acos' declared here\n let acos = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let acos = 4;\n  _ = acos(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (4)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let acosh' as call target\n _ = acosh(1.2);\n ^^^^^\n\n:15:7 note: 'let acosh' declared here\n let acosh = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let acosh = 4;\n  _ = acosh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (5)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let all' as call target\n _ = all(true);\n ^^^\n\n:15:7 note: 'let all' declared here\n let all = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let all = 4;\n  _ = all(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (6)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let any' as call target\n _ = any(true);\n ^^^\n\n:15:7 note: 'let any' declared here\n let any = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let any = 4;\n  _ = any(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (7)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'array' does not take template arguments\n _ = array<i32, 2>(1, 2);\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let array' declared here\n let array = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let array = 4;\n  _ = array<i32, 2>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (8)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let array' as call target\n _ = array(1, 2);\n ^^^^^\n\n:15:7 note: 'let array' declared here\n let array = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let array = 4;\n  _ = array(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (9)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let arrayLength' as call target\n _ = arrayLength(&placeholder.rt_arr);\n ^^^^^^^^^^^\n\n:15:7 note: 'let arrayLength' declared here\n let arrayLength = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let arrayLength = 4;\n  _ = arrayLength(&placeholder.rt_arr);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (10)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let asin' as call target\n _ = asin(.2);\n ^^^^\n\n:15:7 note: 'let asin' declared here\n let asin = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let asin = 4;\n  _ = asin(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (11)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let asinh' as call target\n _ = asinh(1.2);\n ^^^^^\n\n:15:7 note: 'let asinh' declared here\n let asinh = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let asinh = 4;\n  _ = asinh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (12)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let atan' as call target\n _ = atan(1.2);\n ^^^^\n\n:15:7 note: 'let atan' declared here\n let atan = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let atan = 4;\n  _ = atan(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (13)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let atanh' as call target\n _ = atanh(.2);\n ^^^^^\n\n:15:7 note: 'let atanh' declared here\n let atanh = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let atanh = 4;\n  _ = atanh(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (14)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let atan2' as call target\n _ = atan2(1.2, 2.3);\n ^^^^^\n\n:15:7 note: 'let atan2' declared here\n let atan2 = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let atan2 = 4;\n  _ = atan2(1.2, 2.3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (15)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let bool' as call target\n _ = bool(1);\n ^^^^\n\n:15:7 note: 'let bool' declared here\n let bool = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let bool = 4;\n  _ = bool(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (16)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'bitcast' does not take template arguments\n _ = bitcast<f32>(1i);\n ^^^^^^^^^^^^\n\n:15:7 note: 'let bitcast' declared here\n let bitcast = 4;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let bitcast = 4;\n  _ = bitcast<f32>(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (17)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let ceil' as call target\n _ = ceil(1.23);\n ^^^^\n\n:15:7 note: 'let ceil' declared here\n let ceil = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let ceil = 4;\n  _ = ceil(1.23);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (18)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let clamp' as call target\n _ = clamp(1, 2, 3);\n ^^^^^\n\n:15:7 note: 'let clamp' declared here\n let clamp = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let clamp = 4;\n  _ = clamp(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (19)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let cos' as call target\n _ = cos(2);\n ^^^\n\n:15:7 note: 'let cos' declared here\n let cos = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let cos = 4;\n  _ = cos(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (20)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let cosh' as call target\n _ = cosh(2.2);\n ^^^^\n\n:15:7 note: 'let cosh' declared here\n let cosh = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let cosh = 4;\n  _ = cosh(2.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (21)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let countLeadingZeros' as call target\n _ = countLeadingZeros(1);\n ^^^^^^^^^^^^^^^^^\n\n:15:7 note: 'let countLeadingZeros' declared here\n let countLeadingZeros = 4;\n ^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let countLeadingZeros = 4;\n  _ = countLeadingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (22)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let countOneBits' as call target\n _ = countOneBits(1);\n ^^^^^^^^^^^^\n\n:15:7 note: 'let countOneBits' declared here\n let countOneBits = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let countOneBits = 4;\n  _ = countOneBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (23)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let countTrailingZeros' as call target\n _ = countTrailingZeros(1);\n ^^^^^^^^^^^^^^^^^^\n\n:15:7 note: 'let countTrailingZeros' declared here\n let countTrailingZeros = 4;\n ^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let countTrailingZeros = 4;\n  _ = countTrailingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (34)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let cross' as call target\n _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n ^^^^^\n\n:15:7 note: 'let cross' declared here\n let cross = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let cross = 4;\n  _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (25)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let degrees' as call target\n _ = degrees(1);\n ^^^^^^^\n\n:15:7 note: 'let degrees' declared here\n let degrees = 4;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let degrees = 4;\n  _ = degrees(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (26)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let determinant' as call target\n _ = determinant(mat2x2(1, 2, 3, 4));\n ^^^^^^^^^^^\n\n:15:7 note: 'let determinant' declared here\n let determinant = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let determinant = 4;\n  _ = determinant(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (27)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let distance' as call target\n _ = distance(1, 2);\n ^^^^^^^^\n\n:15:7 note: 'let distance' declared here\n let distance = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let distance = 4;\n  _ = distance(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (28)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dot' as call target\n _ = dot(vec2(1, 2,), vec2(2, 3));\n ^^^\n\n:15:7 note: 'let dot' declared here\n let dot = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dot = 4;\n  _ = dot(vec2(1, 2,), vec2(2, 3));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (29)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dot4U8Packed' as call target\n _ = dot4U8Packed(1, 2);\n ^^^^^^^^^^^^\n\n:15:7 note: 'let dot4U8Packed' declared here\n let dot4U8Packed = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dot4U8Packed = 4;\n  _ = dot4U8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (30)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dot4I8Packed' as call target\n _ = dot4I8Packed(1, 2);\n ^^^^^^^^^^^^\n\n:15:7 note: 'let dot4I8Packed' declared here\n let dot4I8Packed = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dot4I8Packed = 4;\n  _ = dot4I8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (31)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdx' as call target\n _ = dpdx(2);\n ^^^^\n\n:15:7 note: 'let dpdx' declared here\n let dpdx = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdx = 4;\n  _ = dpdx(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (32)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdxCoarse' as call target\n _ = dpdxCoarse(2);\n ^^^^^^^^^^\n\n:15:7 note: 'let dpdxCoarse' declared here\n let dpdxCoarse = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdxCoarse = 4;\n  _ = dpdxCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (33)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdxFine' as call target\n _ = dpdxFine(2);\n ^^^^^^^^\n\n:15:7 note: 'let dpdxFine' declared here\n let dpdxFine = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdxFine = 4;\n  _ = dpdxFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (34)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdy' as call target\n _ = dpdy(2);\n ^^^^\n\n:15:7 note: 'let dpdy' declared here\n let dpdy = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdy = 4;\n  _ = dpdy(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (35)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdyCoarse' as call target\n _ = dpdyCoarse(2);\n ^^^^^^^^^^\n\n:15:7 note: 'let dpdyCoarse' declared here\n let dpdyCoarse = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdyCoarse = 4;\n  _ = dpdyCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (36)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let dpdyFine' as call target\n _ = dpdyFine(2);\n ^^^^^^^^\n\n:15:7 note: 'let dpdyFine' declared here\n let dpdyFine = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let dpdyFine = 4;\n  _ = dpdyFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (37)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let exp' as call target\n _ = exp(1);\n ^^^\n\n:15:7 note: 'let exp' declared here\n let exp = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let exp = 4;\n  _ = exp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (38)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let exp2' as call target\n _ = exp2(2);\n ^^^^\n\n:15:7 note: 'let exp2' declared here\n let exp2 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let exp2 = 4;\n  _ = exp2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (39)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let extractBits' as call target\n _ = extractBits(1, 2, 3);\n ^^^^^^^^^^^\n\n:15:7 note: 'let extractBits' declared here\n let extractBits = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let extractBits = 4;\n  _ = extractBits(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (40)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let f32' as call target\n _ = f32(1i);\n ^^^\n\n:15:7 note: 'let f32' declared here\n let f32 = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let f32 = 4;\n  _ = f32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (41)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let faceForward' as call target\n _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n ^^^^^^^^^^^\n\n:15:7 note: 'let faceForward' declared here\n let faceForward = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let faceForward = 4;\n  _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (42)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let firstLeadingBit' as call target\n _ = firstLeadingBit(1);\n ^^^^^^^^^^^^^^^\n\n:15:7 note: 'let firstLeadingBit' declared here\n let firstLeadingBit = 4;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let firstLeadingBit = 4;\n  _ = firstLeadingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (43)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let firstTrailingBit' as call target\n _ = firstTrailingBit(1);\n ^^^^^^^^^^^^^^^^\n\n:15:7 note: 'let firstTrailingBit' declared here\n let firstTrailingBit = 4;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let firstTrailingBit = 4;\n  _ = firstTrailingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (44)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let floor' as call target\n _ = floor(1.2);\n ^^^^^\n\n:15:7 note: 'let floor' declared here\n let floor = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let floor = 4;\n  _ = floor(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (45)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let fma' as call target\n _ = fma(1, 2, 3);\n ^^^\n\n:15:7 note: 'let fma' declared here\n let fma = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let fma = 4;\n  _ = fma(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (46)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let fract' as call target\n _ = fract(1);\n ^^^^^\n\n:15:7 note: 'let fract' declared here\n let fract = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let fract = 4;\n  _ = fract(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (47)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let frexp' as call target\n _ = frexp(1);\n ^^^^^\n\n:15:7 note: 'let frexp' declared here\n let frexp = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let frexp = 4;\n  _ = frexp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (48)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let fwidth' as call target\n _ = fwidth(2);\n ^^^^^^\n\n:15:7 note: 'let fwidth' declared here\n let fwidth = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let fwidth = 4;\n  _ = fwidth(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (49)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let fwidthCoarse' as call target\n _ = fwidthCoarse(2);\n ^^^^^^^^^^^^\n\n:15:7 note: 'let fwidthCoarse' declared here\n let fwidthCoarse = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let fwidthCoarse = 4;\n  _ = fwidthCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (50)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let fwidthFine' as call target\n _ = fwidthFine(2);\n ^^^^^^^^^^\n\n:15:7 note: 'let fwidthFine' declared here\n let fwidthFine = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let fwidthFine = 4;\n  _ = fwidthFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (51)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let i32' as call target\n _ = i32(2u);\n ^^^\n\n:15:7 note: 'let i32' declared here\n let i32 = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let i32 = 4;\n  _ = i32(2u);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (52)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let insertBits' as call target\n _ = insertBits(1, 2, 3, 4);\n ^^^^^^^^^^\n\n:15:7 note: 'let insertBits' declared here\n let insertBits = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let insertBits = 4;\n  _ = insertBits(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (53)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let inverseSqrt' as call target\n _ = inverseSqrt(1);\n ^^^^^^^^^^^\n\n:15:7 note: 'let inverseSqrt' declared here\n let inverseSqrt = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let inverseSqrt = 4;\n  _ = inverseSqrt(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (54)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let ldexp' as call target\n _ = ldexp(1, 2);\n ^^^^^\n\n:15:7 note: 'let ldexp' declared here\n let ldexp = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let ldexp = 4;\n  _ = ldexp(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (55)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let length' as call target\n _ = length(1);\n ^^^^^^\n\n:15:7 note: 'let length' declared here\n let length = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let length = 4;\n  _ = length(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (56)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let log' as call target\n _ = log(2);\n ^^^\n\n:15:7 note: 'let log' declared here\n let log = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let log = 4;\n  _ = log(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (57)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let log2' as call target\n _ = log2(2);\n ^^^^\n\n:15:7 note: 'let log2' declared here\n let log2 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let log2 = 4;\n  _ = log2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (58)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x2' does not take template arguments\n _ = mat2x2<f32>(1, 2, 3, 4);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat2x2' declared here\n let mat2x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x2 = 4;\n  _ = mat2x2<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (59)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat2x2' as call target\n _ = mat2x2(1, 2, 3, 4);\n ^^^^^^\n\n:15:7 note: 'let mat2x2' declared here\n let mat2x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x2 = 4;\n  _ = mat2x2(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (60)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x3' does not take template arguments\n _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat2x3' declared here\n let mat2x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x3 = 4;\n  _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (61)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat2x3' as call target\n _ = mat2x3(1, 2, 3, 4, 5, 6);\n ^^^^^^\n\n:15:7 note: 'let mat2x3' declared here\n let mat2x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x3 = 4;\n  _ = mat2x3(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (62)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x4' does not take template arguments\n _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat2x4' declared here\n let mat2x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x4 = 4;\n  _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (63)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat2x4' as call target\n _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^\n\n:15:7 note: 'let mat2x4' declared here\n let mat2x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat2x4 = 4;\n  _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (64)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x2' does not take template arguments\n _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat3x2' declared here\n let mat3x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x2 = 4;\n  _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (65)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat3x2' as call target\n _ = mat3x2(1, 2, 3, 4, 5, 6);\n ^^^^^^\n\n:15:7 note: 'let mat3x2' declared here\n let mat3x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x2 = 4;\n  _ = mat3x2(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (66)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x3' does not take template arguments\n _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat3x3' declared here\n let mat3x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x3 = 4;\n  _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (67)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat3x3' as call target\n _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n ^^^^^^\n\n:15:7 note: 'let mat3x3' declared here\n let mat3x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x3 = 4;\n  _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (68)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x4' does not take template arguments\n _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat3x4' declared here\n let mat3x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x4 = 4;\n  _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (69)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat3x4' as call target\n _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^\n\n:15:7 note: 'let mat3x4' declared here\n let mat3x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat3x4 = 4;\n  _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (70)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x2' does not take template arguments\n _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat4x2' declared here\n let mat4x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x2 = 4;\n  _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (71)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat4x2' as call target\n _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^\n\n:15:7 note: 'let mat4x2' declared here\n let mat4x2 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x2 = 4;\n  _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (72)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x3' does not take template arguments\n _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat4x3' declared here\n let mat4x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x3 = 4;\n  _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (73)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat4x3' as call target\n _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^\n\n:15:7 note: 'let mat4x3' declared here\n let mat4x3 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x3 = 4;\n  _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (74)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x4' does not take template arguments\n _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n ^^^^^^^^^^^\n\n:15:7 note: 'let mat4x4' declared here\n let mat4x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x4 = 4;\n  _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (75)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mat4x4' as call target\n _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n ^^^^^^\n\n:15:7 note: 'let mat4x4' declared here\n let mat4x4 = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mat4x4 = 4;\n  _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (76)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let max' as call target\n _ = max(1, 2);\n ^^^\n\n:15:7 note: 'let max' declared here\n let max = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let max = 4;\n  _ = max(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (77)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let min' as call target\n _ = min(1, 2);\n ^^^\n\n:15:7 note: 'let min' declared here\n let min = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let min = 4;\n  _ = min(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (78)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let mix' as call target\n _ = mix(1, 2, 3);\n ^^^\n\n:15:7 note: 'let mix' declared here\n let mix = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let mix = 4;\n  _ = mix(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (79)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let modf' as call target\n _ = modf(1.2);\n ^^^^\n\n:15:7 note: 'let modf' declared here\n let modf = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let modf = 4;\n  _ = modf(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (80)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let normalize' as call target\n _ = normalize(vec2(1, 2));\n ^^^^^^^^^\n\n:15:7 note: 'let normalize' declared here\n let normalize = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let normalize = 4;\n  _ = normalize(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (81)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack2x16snorm' as call target\n _ = pack2x16snorm(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let pack2x16snorm' declared here\n let pack2x16snorm = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack2x16snorm = 4;\n  _ = pack2x16snorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (82)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack2x16unorm' as call target\n _ = pack2x16unorm(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let pack2x16unorm' declared here\n let pack2x16unorm = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack2x16unorm = 4;\n  _ = pack2x16unorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (83)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack2x16float' as call target\n _ = pack2x16float(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let pack2x16float' declared here\n let pack2x16float = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack2x16float = 4;\n  _ = pack2x16float(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (84)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4x8snorm' as call target\n _ = pack4x8snorm(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^\n\n:15:7 note: 'let pack4x8snorm' declared here\n let pack4x8snorm = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4x8snorm = 4;\n  _ = pack4x8snorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (85)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4x8unorm' as call target\n _ = pack4x8unorm(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^\n\n:15:7 note: 'let pack4x8unorm' declared here\n let pack4x8unorm = 4;\n ^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4x8unorm = 4;\n  _ = pack4x8unorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (86)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4xI8' as call target\n _ = pack4xI8(vec4(1, 2, 3, 4));\n ^^^^^^^^\n\n:15:7 note: 'let pack4xI8' declared here\n let pack4xI8 = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4xI8 = 4;\n  _ = pack4xI8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (87)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4xU8' as call target\n _ = pack4xU8(vec4(1, 2, 3, 4));\n ^^^^^^^^\n\n:15:7 note: 'let pack4xU8' declared here\n let pack4xU8 = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4xU8 = 4;\n  _ = pack4xU8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (88)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4xI8Clamp' as call target\n _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let pack4xI8Clamp' declared here\n let pack4xI8Clamp = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4xI8Clamp = 4;\n  _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (89)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pack4xU8Clamp' as call target\n _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let pack4xU8Clamp' declared here\n let pack4xU8Clamp = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pack4xU8Clamp = 4;\n  _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (90)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let pow' as call target\n _ = pow(1, 2);\n ^^^\n\n:15:7 note: 'let pow' declared here\n let pow = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let pow = 4;\n  _ = pow(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (91)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let quantizeToF16' as call target\n _ = quantizeToF16(1.2);\n ^^^^^^^^^^^^^\n\n:15:7 note: 'let quantizeToF16' declared here\n let quantizeToF16 = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let quantizeToF16 = 4;\n  _ = quantizeToF16(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (92)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let radians' as call target\n _ = radians(1.2);\n ^^^^^^^\n\n:15:7 note: 'let radians' declared here\n let radians = 4;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let radians = 4;\n  _ = radians(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (93)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let reflect' as call target\n _ = reflect(vec2(1, 2), vec2(3, 4));\n ^^^^^^^\n\n:15:7 note: 'let reflect' declared here\n let reflect = 4;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let reflect = 4;\n  _ = reflect(vec2(1, 2), vec2(3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (94)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let refract' as call target\n _ = refract(vec2(1, 1), vec2(2, 2), 3);\n ^^^^^^^\n\n:15:7 note: 'let refract' declared here\n let refract = 4;\n ^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let refract = 4;\n  _ = refract(vec2(1, 1), vec2(2, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (95)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let reverseBits' as call target\n _ = reverseBits(1);\n ^^^^^^^^^^^\n\n:15:7 note: 'let reverseBits' declared here\n let reverseBits = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let reverseBits = 4;\n  _ = reverseBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (96)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let round' as call target\n _ = round(1.2);\n ^^^^^\n\n:15:7 note: 'let round' declared here\n let round = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let round = 4;\n  _ = round(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (97)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let saturate' as call target\n _ = saturate(1);\n ^^^^^^^^\n\n:15:7 note: 'let saturate' declared here\n let saturate = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let saturate = 4;\n  _ = saturate(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (98)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let select' as call target\n _ = select(1, 2, false);\n ^^^^^^\n\n:15:7 note: 'let select' declared here\n let select = 4;\n ^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let select = 4;\n  _ = select(1, 2, false);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (99)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let sign' as call target\n _ = sign(1);\n ^^^^\n\n:15:7 note: 'let sign' declared here\n let sign = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let sign = 4;\n  _ = sign(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (100)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let sin' as call target\n _ = sin(2);\n ^^^\n\n:15:7 note: 'let sin' declared here\n let sin = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let sin = 4;\n  _ = sin(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (101)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let sinh' as call target\n _ = sinh(3);\n ^^^^\n\n:15:7 note: 'let sinh' declared here\n let sinh = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let sinh = 4;\n  _ = sinh(3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (102)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let smoothstep' as call target\n _ = smoothstep(1, 2, 3);\n ^^^^^^^^^^\n\n:15:7 note: 'let smoothstep' declared here\n let smoothstep = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let smoothstep = 4;\n  _ = smoothstep(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (103)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let sqrt' as call target\n _ = sqrt(24);\n ^^^^\n\n:15:7 note: 'let sqrt' declared here\n let sqrt = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let sqrt = 4;\n  _ = sqrt(24);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (104)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let step' as call target\n _ = step(4, 5);\n ^^^^\n\n:15:7 note: 'let step' declared here\n let step = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let step = 4;\n  _ = step(4, 5);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (105)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let tan' as call target\n _ = tan(2);\n ^^^\n\n:15:7 note: 'let tan' declared here\n let tan = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let tan = 4;\n  _ = tan(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (106)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let tanh' as call target\n _ = tanh(2);\n ^^^^\n\n:15:7 note: 'let tanh' declared here\n let tanh = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let tanh = 4;\n  _ = tanh(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (107)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let transpose' as call target\n _ = transpose(mat2x2(1, 2, 3, 4));\n ^^^^^^^^^\n\n:15:7 note: 'let transpose' declared here\n let transpose = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let transpose = 4;\n  _ = transpose(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (108)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let trunc' as call target\n _ = trunc(2);\n ^^^^^\n\n:15:7 note: 'let trunc' declared here\n let trunc = 4;\n ^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let trunc = 4;\n  _ = trunc(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (109)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let u32' as call target\n _ = u32(1i);\n ^^^\n\n:15:7 note: 'let u32' declared here\n let u32 = 4;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let u32 = 4;\n  _ = u32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (110)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack2x16snorm' as call target\n _ = unpack2x16snorm(2);\n ^^^^^^^^^^^^^^^\n\n:15:7 note: 'let unpack2x16snorm' declared here\n let unpack2x16snorm = 4;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack2x16snorm = 4;\n  _ = unpack2x16snorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (111)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack2x16unorm' as call target\n _ = unpack2x16unorm(2);\n ^^^^^^^^^^^^^^^\n\n:15:7 note: 'let unpack2x16unorm' declared here\n let unpack2x16unorm = 4;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack2x16unorm = 4;\n  _ = unpack2x16unorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (112)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack2x16float' as call target\n _ = unpack2x16float(2);\n ^^^^^^^^^^^^^^^\n\n:15:7 note: 'let unpack2x16float' declared here\n let unpack2x16float = 4;\n ^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack2x16float = 4;\n  _ = unpack2x16float(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (113)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack4x8snorm' as call target\n _ = unpack4x8snorm(4);\n ^^^^^^^^^^^^^^\n\n:15:7 note: 'let unpack4x8snorm' declared here\n let unpack4x8snorm = 4;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack4x8snorm = 4;\n  _ = unpack4x8snorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (114)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack4x8unorm' as call target\n _ = unpack4x8unorm(4);\n ^^^^^^^^^^^^^^\n\n:15:7 note: 'let unpack4x8unorm' declared here\n let unpack4x8unorm = 4;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack4x8unorm = 4;\n  _ = unpack4x8unorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (115)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack4xI8' as call target\n _ = unpack4xI8(4);\n ^^^^^^^^^^\n\n:15:7 note: 'let unpack4xI8' declared here\n let unpack4xI8 = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack4xI8 = 4;\n  _ = unpack4xI8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (116)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let unpack4xU8' as call target\n _ = unpack4xU8(4);\n ^^^^^^^^^^\n\n:15:7 note: 'let unpack4xU8' declared here\n let unpack4xU8 = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let unpack4xU8 = 4;\n  _ = unpack4xU8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (117)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec2' does not take template arguments\n _ = vec2<f32>(1, 2);\n ^^^^^^^^^\n\n:15:7 note: 'let vec2' declared here\n let vec2 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec2 = 4;\n  _ = vec2<f32>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (118)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let vec2' as call target\n _ = vec2(1, 2);\n ^^^^\n\n:15:7 note: 'let vec2' declared here\n let vec2 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec2 = 4;\n  _ = vec2(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (119)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec3' does not take template arguments\n _ = vec3<f32>(1, 2, 3);\n ^^^^^^^^^\n\n:15:7 note: 'let vec3' declared here\n let vec3 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec3 = 4;\n  _ = vec3<f32>(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (120)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let vec3' as call target\n _ = vec3(1, 2, 3);\n ^^^^\n\n:15:7 note: 'let vec3' declared here\n let vec3 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec3 = 4;\n  _ = vec3(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\" (121)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec4' does not take template arguments\n _ = vec4<f32>(1, 2, 3, 4);\n ^^^^^^^^^\n\n:15:7 note: 'let vec4' declared here\n let vec4 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec4 = 4;\n  _ = vec4<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"function\"",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'let vec4' as call target\n _ = vec4(1, 2, 3, 4);\n ^^^^\n\n:15:7 note: 'let vec4' declared here\n let vec4 = 4;\n ^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let vec4 = 4;\n  _ = vec4(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (2)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let abs = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = abs(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (3)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let acos = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acos(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (4)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let acosh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acosh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (5)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let all = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = all(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (6)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let any = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = any(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (7)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let array = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array<i32, 2>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (8)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let array = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (9)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let arrayLength = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = arrayLength(&placeholder.rt_arr);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (10)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let asin = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asin(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (11)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let asinh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asinh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (12)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let atan = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (13)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let atanh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atanh(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (14)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let atan2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan2(1.2, 2.3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (15)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let bool = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bool(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (16)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let bitcast = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bitcast<f32>(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (17)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let ceil = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ceil(1.23);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (18)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let clamp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = clamp(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (19)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let cos = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cos(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (20)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let cosh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cosh(2.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (21)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let countLeadingZeros = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countLeadingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (22)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let countOneBits = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countOneBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (23)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let countTrailingZeros = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countTrailingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (34)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let cross = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (25)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let degrees = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = degrees(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (26)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let determinant = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = determinant(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (27)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let distance = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = distance(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (28)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dot = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot(vec2(1, 2,), vec2(2, 3));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (29)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dot4U8Packed = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4U8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (30)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dot4I8Packed = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4I8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (31)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdx = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdx(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (32)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdxCoarse = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (33)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdxFine = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (34)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdy = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdy(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (35)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdyCoarse = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (36)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let dpdyFine = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (37)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let exp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (38)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let exp2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (39)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let extractBits = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = extractBits(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (40)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let f32 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = f32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (41)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let faceForward = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (42)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let firstLeadingBit = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstLeadingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (43)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let firstTrailingBit = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstTrailingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (44)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let floor = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = floor(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (45)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let fma = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fma(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (46)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let fract = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fract(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (47)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let frexp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = frexp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (48)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let fwidth = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidth(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (49)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let fwidthCoarse = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (50)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let fwidthFine = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (51)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let i32 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = i32(2u);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (52)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let insertBits = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = insertBits(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (53)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let inverseSqrt = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = inverseSqrt(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (54)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let ldexp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ldexp(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (55)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let length = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = length(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (56)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let log = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (57)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let log2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (58)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (59)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (60)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (61)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (62)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (63)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat2x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (64)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (65)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (66)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (67)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (68)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (69)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat3x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (70)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (71)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (72)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (73)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (74)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (75)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mat4x4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (76)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let max = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = max(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (77)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let min = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = min(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (78)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let mix = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mix(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (79)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let modf = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = modf(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (80)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let normalize = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = normalize(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (81)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack2x16snorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16snorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (82)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack2x16unorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16unorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (83)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack2x16float = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16float(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (84)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4x8snorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8snorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (85)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4x8unorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8unorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (86)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4xI8 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (87)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4xU8 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (88)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4xI8Clamp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (89)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pack4xU8Clamp = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (90)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let pow = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pow(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (91)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let quantizeToF16 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = quantizeToF16(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (92)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let radians = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = radians(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (93)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let reflect = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reflect(vec2(1, 2), vec2(3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (94)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let refract = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = refract(vec2(1, 1), vec2(2, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (95)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let reverseBits = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reverseBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (96)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let round = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = round(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (97)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let saturate = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = saturate(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (98)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let select = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = select(1, 2, false);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (99)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let sign = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sign(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (100)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let sin = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sin(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (101)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let sinh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sinh(3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (102)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let smoothstep = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = smoothstep(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (103)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let sqrt = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sqrt(24);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (104)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let step = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = step(4, 5);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (105)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let tan = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tan(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (106)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let tanh = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tanh(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (107)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let transpose = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = transpose(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (108)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let trunc = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = trunc(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (109)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let u32 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = u32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (110)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack2x16snorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16snorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (111)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack2x16unorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16unorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (112)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack2x16float = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16float(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (113)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack4x8snorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8snorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (114)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack4x8unorm = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8unorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (115)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack4xI8 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xI8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (116)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let unpack4xU8 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xU8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (117)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2<f32>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (118)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec2 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (119)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3<f32>(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (120)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec3 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\" (121)",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"sibling\"",
    "result": "OK",
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\n\n\nfn sibling() {\n  let vec4 = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var abs' as call target\n _ = abs(1);\n ^^^\n\n:7:1 note: 'var abs' declared here\nvar<private> abs : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> abs : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = abs(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var acos' as call target\n _ = acos(.2);\n ^^^^\n\n:7:1 note: 'var acos' declared here\nvar<private> acos : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> acos : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acos(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (4)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var acosh' as call target\n _ = acosh(1.2);\n ^^^^^\n\n:7:1 note: 'var acosh' declared here\nvar<private> acosh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> acosh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = acosh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (5)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var all' as call target\n _ = all(true);\n ^^^\n\n:7:1 note: 'var all' declared here\nvar<private> all : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> all : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = all(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (6)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var any' as call target\n _ = any(true);\n ^^^\n\n:7:1 note: 'var any' declared here\nvar<private> any : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> any : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = any(true);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (7)",
    "result": "Error while parsing WGSL: :3:11 error: variable 'array' does not take template arguments\n rt_arr: array<i32>,\n ^^^^^^^^^^\n\n:7:1 note: 'var array' declared here\nvar<private> array : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> array : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array<i32, 2>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (8)",
    "result": "Error while parsing WGSL: :3:11 error: variable 'array' does not take template arguments\n rt_arr: array<i32>,\n ^^^^^^^^^^\n\n:7:1 note: 'var array' declared here\nvar<private> array : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> array : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = array(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (9)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var arrayLength' as call target\n _ = arrayLength(&placeholder.rt_arr);\n ^^^^^^^^^^^\n\n:7:1 note: 'var arrayLength' declared here\nvar<private> arrayLength : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> arrayLength : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = arrayLength(&placeholder.rt_arr);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (10)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var asin' as call target\n _ = asin(.2);\n ^^^^\n\n:7:1 note: 'var asin' declared here\nvar<private> asin : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> asin : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asin(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (11)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var asinh' as call target\n _ = asinh(1.2);\n ^^^^^\n\n:7:1 note: 'var asinh' declared here\nvar<private> asinh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> asinh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = asinh(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (12)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var atan' as call target\n _ = atan(1.2);\n ^^^^\n\n:7:1 note: 'var atan' declared here\nvar<private> atan : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> atan : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (13)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var atanh' as call target\n _ = atanh(.2);\n ^^^^^\n\n:7:1 note: 'var atanh' declared here\nvar<private> atanh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> atanh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atanh(.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (14)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var atan2' as call target\n _ = atan2(1.2, 2.3);\n ^^^^^\n\n:7:1 note: 'var atan2' declared here\nvar<private> atan2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> atan2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = atan2(1.2, 2.3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (15)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var bool' as call target\n _ = bool(1);\n ^^^^\n\n:7:1 note: 'var bool' declared here\nvar<private> bool : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> bool : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bool(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (16)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'bitcast' does not take template arguments\n _ = bitcast<f32>(1i);\n ^^^^^^^^^^^^\n\n:7:1 note: 'var bitcast' declared here\nvar<private> bitcast : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> bitcast : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = bitcast<f32>(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (17)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var ceil' as call target\n _ = ceil(1.23);\n ^^^^\n\n:7:1 note: 'var ceil' declared here\nvar<private> ceil : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> ceil : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ceil(1.23);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (18)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var clamp' as call target\n _ = clamp(1, 2, 3);\n ^^^^^\n\n:7:1 note: 'var clamp' declared here\nvar<private> clamp : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> clamp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = clamp(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (19)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var cos' as call target\n _ = cos(2);\n ^^^\n\n:7:1 note: 'var cos' declared here\nvar<private> cos : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> cos : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cos(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (20)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var cosh' as call target\n _ = cosh(2.2);\n ^^^^\n\n:7:1 note: 'var cosh' declared here\nvar<private> cosh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> cosh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cosh(2.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (21)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var countLeadingZeros' as call target\n _ = countLeadingZeros(1);\n ^^^^^^^^^^^^^^^^^\n\n:7:1 note: 'var countLeadingZeros' declared here\nvar<private> countLeadingZeros : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> countLeadingZeros : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countLeadingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (22)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var countOneBits' as call target\n _ = countOneBits(1);\n ^^^^^^^^^^^^\n\n:7:1 note: 'var countOneBits' declared here\nvar<private> countOneBits : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> countOneBits : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countOneBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (23)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var countTrailingZeros' as call target\n _ = countTrailingZeros(1);\n ^^^^^^^^^^^^^^^^^^\n\n:7:1 note: 'var countTrailingZeros' declared here\nvar<private> countTrailingZeros : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> countTrailingZeros : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = countTrailingZeros(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (34)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var cross' as call target\n _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n ^^^^^\n\n:7:1 note: 'var cross' declared here\nvar<private> cross : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> cross : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = cross(vec3(1, 2, 3), vec3(4, 5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (25)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var degrees' as call target\n _ = degrees(1);\n ^^^^^^^\n\n:7:1 note: 'var degrees' declared here\nvar<private> degrees : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> degrees : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = degrees(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (26)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var determinant' as call target\n _ = determinant(mat2x2(1, 2, 3, 4));\n ^^^^^^^^^^^\n\n:7:1 note: 'var determinant' declared here\nvar<private> determinant : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> determinant : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = determinant(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (27)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var distance' as call target\n _ = distance(1, 2);\n ^^^^^^^^\n\n:7:1 note: 'var distance' declared here\nvar<private> distance : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> distance : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = distance(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (28)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dot' as call target\n _ = dot(vec2(1, 2,), vec2(2, 3));\n ^^^\n\n:7:1 note: 'var dot' declared here\nvar<private> dot : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dot : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot(vec2(1, 2,), vec2(2, 3));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (29)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dot4U8Packed' as call target\n _ = dot4U8Packed(1, 2);\n ^^^^^^^^^^^^\n\n:7:1 note: 'var dot4U8Packed' declared here\nvar<private> dot4U8Packed : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dot4U8Packed : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4U8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (30)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dot4I8Packed' as call target\n _ = dot4I8Packed(1, 2);\n ^^^^^^^^^^^^\n\n:7:1 note: 'var dot4I8Packed' declared here\nvar<private> dot4I8Packed : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dot4I8Packed : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dot4I8Packed(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (31)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdx' as call target\n _ = dpdx(2);\n ^^^^\n\n:7:1 note: 'var dpdx' declared here\nvar<private> dpdx : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdx : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdx(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (32)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdxCoarse' as call target\n _ = dpdxCoarse(2);\n ^^^^^^^^^^\n\n:7:1 note: 'var dpdxCoarse' declared here\nvar<private> dpdxCoarse : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdxCoarse : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (33)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdxFine' as call target\n _ = dpdxFine(2);\n ^^^^^^^^\n\n:7:1 note: 'var dpdxFine' declared here\nvar<private> dpdxFine : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdxFine : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdxFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (34)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdy' as call target\n _ = dpdy(2);\n ^^^^\n\n:7:1 note: 'var dpdy' declared here\nvar<private> dpdy : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdy : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdy(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (35)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdyCoarse' as call target\n _ = dpdyCoarse(2);\n ^^^^^^^^^^\n\n:7:1 note: 'var dpdyCoarse' declared here\nvar<private> dpdyCoarse : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdyCoarse : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (36)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var dpdyFine' as call target\n _ = dpdyFine(2);\n ^^^^^^^^\n\n:7:1 note: 'var dpdyFine' declared here\nvar<private> dpdyFine : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> dpdyFine : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = dpdyFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (37)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var exp' as call target\n _ = exp(1);\n ^^^\n\n:7:1 note: 'var exp' declared here\nvar<private> exp : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> exp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (38)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var exp2' as call target\n _ = exp2(2);\n ^^^^\n\n:7:1 note: 'var exp2' declared here\nvar<private> exp2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> exp2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = exp2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (39)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var extractBits' as call target\n _ = extractBits(1, 2, 3);\n ^^^^^^^^^^^\n\n:7:1 note: 'var extractBits' declared here\nvar<private> extractBits : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> extractBits : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = extractBits(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (40)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var f32' as call target\n _ = f32(1i);\n ^^^\n\n:7:1 note: 'var f32' declared here\nvar<private> f32 : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> f32 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = f32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (41)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var faceForward' as call target\n _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n ^^^^^^^^^^^\n\n:7:1 note: 'var faceForward' declared here\nvar<private> faceForward : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> faceForward : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = faceForward(vec2(1, 2), vec2(3, 4), vec2(5, 6));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (42)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var firstLeadingBit' as call target\n _ = firstLeadingBit(1);\n ^^^^^^^^^^^^^^^\n\n:7:1 note: 'var firstLeadingBit' declared here\nvar<private> firstLeadingBit : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> firstLeadingBit : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstLeadingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (43)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var firstTrailingBit' as call target\n _ = firstTrailingBit(1);\n ^^^^^^^^^^^^^^^^\n\n:7:1 note: 'var firstTrailingBit' declared here\nvar<private> firstTrailingBit : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> firstTrailingBit : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = firstTrailingBit(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (44)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var floor' as call target\n _ = floor(1.2);\n ^^^^^\n\n:7:1 note: 'var floor' declared here\nvar<private> floor : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> floor : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = floor(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (45)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var fma' as call target\n _ = fma(1, 2, 3);\n ^^^\n\n:7:1 note: 'var fma' declared here\nvar<private> fma : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> fma : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fma(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (46)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var fract' as call target\n _ = fract(1);\n ^^^^^\n\n:7:1 note: 'var fract' declared here\nvar<private> fract : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> fract : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fract(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (47)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var frexp' as call target\n _ = frexp(1);\n ^^^^^\n\n:7:1 note: 'var frexp' declared here\nvar<private> frexp : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> frexp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = frexp(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (48)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var fwidth' as call target\n _ = fwidth(2);\n ^^^^^^\n\n:7:1 note: 'var fwidth' declared here\nvar<private> fwidth : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> fwidth : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidth(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (49)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var fwidthCoarse' as call target\n _ = fwidthCoarse(2);\n ^^^^^^^^^^^^\n\n:7:1 note: 'var fwidthCoarse' declared here\nvar<private> fwidthCoarse : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> fwidthCoarse : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthCoarse(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (50)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var fwidthFine' as call target\n _ = fwidthFine(2);\n ^^^^^^^^^^\n\n:7:1 note: 'var fwidthFine' declared here\nvar<private> fwidthFine : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> fwidthFine : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = fwidthFine(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (51)",
    "result": "Error while parsing WGSL: :7:1 error: cyclic dependency found: 'i32' -> 'i32'\nvar<private> i32 : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n:7:20 note: var 'i32' references var 'i32' here\nvar<private> i32 : i32;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> i32 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = i32(2u);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (52)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var insertBits' as call target\n _ = insertBits(1, 2, 3, 4);\n ^^^^^^^^^^\n\n:7:1 note: 'var insertBits' declared here\nvar<private> insertBits : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> insertBits : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = insertBits(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (53)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var inverseSqrt' as call target\n _ = inverseSqrt(1);\n ^^^^^^^^^^^\n\n:7:1 note: 'var inverseSqrt' declared here\nvar<private> inverseSqrt : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> inverseSqrt : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = inverseSqrt(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (54)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var ldexp' as call target\n _ = ldexp(1, 2);\n ^^^^^\n\n:7:1 note: 'var ldexp' declared here\nvar<private> ldexp : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> ldexp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = ldexp(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (55)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var length' as call target\n _ = length(1);\n ^^^^^^\n\n:7:1 note: 'var length' declared here\nvar<private> length : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> length : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = length(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (56)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var log' as call target\n _ = log(2);\n ^^^\n\n:7:1 note: 'var log' declared here\nvar<private> log : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> log : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (57)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var log2' as call target\n _ = log2(2);\n ^^^^\n\n:7:1 note: 'var log2' declared here\nvar<private> log2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> log2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = log2(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (58)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x2' does not take template arguments\n _ = mat2x2<f32>(1, 2, 3, 4);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat2x2' declared here\nvar<private> mat2x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (59)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat2x2' as call target\n _ = mat2x2(1, 2, 3, 4);\n ^^^^^^\n\n:7:1 note: 'var mat2x2' declared here\nvar<private> mat2x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x2(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (60)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x3' does not take template arguments\n _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat2x3' declared here\nvar<private> mat2x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (61)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat2x3' as call target\n _ = mat2x3(1, 2, 3, 4, 5, 6);\n ^^^^^^\n\n:7:1 note: 'var mat2x3' declared here\nvar<private> mat2x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x3(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (62)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat2x4' does not take template arguments\n _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat2x4' declared here\nvar<private> mat2x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (63)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat2x4' as call target\n _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^\n\n:7:1 note: 'var mat2x4' declared here\nvar<private> mat2x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat2x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat2x4(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (64)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x2' does not take template arguments\n _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat3x2' declared here\nvar<private> mat3x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2<f32>(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (65)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat3x2' as call target\n _ = mat3x2(1, 2, 3, 4, 5, 6);\n ^^^^^^\n\n:7:1 note: 'var mat3x2' declared here\nvar<private> mat3x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x2(1, 2, 3, 4, 5, 6);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (66)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x3' does not take template arguments\n _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat3x3' declared here\nvar<private> mat3x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (67)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat3x3' as call target\n _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n ^^^^^^\n\n:7:1 note: 'var mat3x3' declared here\nvar<private> mat3x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x3(1, 2, 3, 4, 5, 6, 7, 8, 9);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (68)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat3x4' does not take template arguments\n _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat3x4' declared here\nvar<private> mat3x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (69)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat3x4' as call target\n _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^\n\n:7:1 note: 'var mat3x4' declared here\nvar<private> mat3x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat3x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat3x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (70)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x2' does not take template arguments\n _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat4x2' declared here\nvar<private> mat4x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2<f32>(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (71)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat4x2' as call target\n _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n ^^^^^^\n\n:7:1 note: 'var mat4x2' declared here\nvar<private> mat4x2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x2(1, 2, 3, 4, 5, 6, 7, 8);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (72)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x3' does not take template arguments\n _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat4x3' declared here\nvar<private> mat4x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (73)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat4x3' as call target\n _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n ^^^^^^\n\n:7:1 note: 'var mat4x3' declared here\nvar<private> mat4x3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (74)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'mat4x4' does not take template arguments\n _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n ^^^^^^^^^^^\n\n:7:1 note: 'var mat4x4' declared here\nvar<private> mat4x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4<f32>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (75)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mat4x4' as call target\n _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n ^^^^^^\n\n:7:1 note: 'var mat4x4' declared here\nvar<private> mat4x4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mat4x4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mat4x4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (76)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var max' as call target\n _ = max(1, 2);\n ^^^\n\n:7:1 note: 'var max' declared here\nvar<private> max : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> max : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = max(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (77)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var min' as call target\n _ = min(1, 2);\n ^^^\n\n:7:1 note: 'var min' declared here\nvar<private> min : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> min : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = min(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (78)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var mix' as call target\n _ = mix(1, 2, 3);\n ^^^\n\n:7:1 note: 'var mix' declared here\nvar<private> mix : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> mix : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = mix(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (79)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var modf' as call target\n _ = modf(1.2);\n ^^^^\n\n:7:1 note: 'var modf' declared here\nvar<private> modf : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> modf : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = modf(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (80)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var normalize' as call target\n _ = normalize(vec2(1, 2));\n ^^^^^^^^^\n\n:7:1 note: 'var normalize' declared here\nvar<private> normalize : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> normalize : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = normalize(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (81)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack2x16snorm' as call target\n _ = pack2x16snorm(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var pack2x16snorm' declared here\nvar<private> pack2x16snorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack2x16snorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16snorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (82)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack2x16unorm' as call target\n _ = pack2x16unorm(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var pack2x16unorm' declared here\nvar<private> pack2x16unorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack2x16unorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16unorm(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (83)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack2x16float' as call target\n _ = pack2x16float(vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var pack2x16float' declared here\nvar<private> pack2x16float : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack2x16float : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack2x16float(vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (84)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4x8snorm' as call target\n _ = pack4x8snorm(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^\n\n:7:1 note: 'var pack4x8snorm' declared here\nvar<private> pack4x8snorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4x8snorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8snorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (85)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4x8unorm' as call target\n _ = pack4x8unorm(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^\n\n:7:1 note: 'var pack4x8unorm' declared here\nvar<private> pack4x8unorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4x8unorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4x8unorm(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (86)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4xI8' as call target\n _ = pack4xI8(vec4(1, 2, 3, 4));\n ^^^^^^^^\n\n:7:1 note: 'var pack4xI8' declared here\nvar<private> pack4xI8 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4xI8 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (87)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4xU8' as call target\n _ = pack4xU8(vec4(1, 2, 3, 4));\n ^^^^^^^^\n\n:7:1 note: 'var pack4xU8' declared here\nvar<private> pack4xU8 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4xU8 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (88)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4xI8Clamp' as call target\n _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var pack4xI8Clamp' declared here\nvar<private> pack4xI8Clamp : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4xI8Clamp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xI8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (89)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pack4xU8Clamp' as call target\n _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var pack4xU8Clamp' declared here\nvar<private> pack4xU8Clamp : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pack4xU8Clamp : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pack4xU8Clamp(vec4(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (90)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var pow' as call target\n _ = pow(1, 2);\n ^^^\n\n:7:1 note: 'var pow' declared here\nvar<private> pow : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> pow : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = pow(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (91)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var quantizeToF16' as call target\n _ = quantizeToF16(1.2);\n ^^^^^^^^^^^^^\n\n:7:1 note: 'var quantizeToF16' declared here\nvar<private> quantizeToF16 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> quantizeToF16 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = quantizeToF16(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (92)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var radians' as call target\n _ = radians(1.2);\n ^^^^^^^\n\n:7:1 note: 'var radians' declared here\nvar<private> radians : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> radians : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = radians(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (93)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var reflect' as call target\n _ = reflect(vec2(1, 2), vec2(3, 4));\n ^^^^^^^\n\n:7:1 note: 'var reflect' declared here\nvar<private> reflect : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> reflect : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reflect(vec2(1, 2), vec2(3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (94)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var refract' as call target\n _ = refract(vec2(1, 1), vec2(2, 2), 3);\n ^^^^^^^\n\n:7:1 note: 'var refract' declared here\nvar<private> refract : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> refract : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = refract(vec2(1, 1), vec2(2, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (95)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var reverseBits' as call target\n _ = reverseBits(1);\n ^^^^^^^^^^^\n\n:7:1 note: 'var reverseBits' declared here\nvar<private> reverseBits : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> reverseBits : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = reverseBits(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (96)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var round' as call target\n _ = round(1.2);\n ^^^^^\n\n:7:1 note: 'var round' declared here\nvar<private> round : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> round : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = round(1.2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (97)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var saturate' as call target\n _ = saturate(1);\n ^^^^^^^^\n\n:7:1 note: 'var saturate' declared here\nvar<private> saturate : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> saturate : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = saturate(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (98)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var select' as call target\n _ = select(1, 2, false);\n ^^^^^^\n\n:7:1 note: 'var select' declared here\nvar<private> select : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> select : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = select(1, 2, false);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (99)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var sign' as call target\n _ = sign(1);\n ^^^^\n\n:7:1 note: 'var sign' declared here\nvar<private> sign : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> sign : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sign(1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (100)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var sin' as call target\n _ = sin(2);\n ^^^\n\n:7:1 note: 'var sin' declared here\nvar<private> sin : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> sin : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sin(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (101)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var sinh' as call target\n _ = sinh(3);\n ^^^^\n\n:7:1 note: 'var sinh' declared here\nvar<private> sinh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> sinh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sinh(3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (102)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var smoothstep' as call target\n _ = smoothstep(1, 2, 3);\n ^^^^^^^^^^\n\n:7:1 note: 'var smoothstep' declared here\nvar<private> smoothstep : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> smoothstep : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = smoothstep(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (103)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var sqrt' as call target\n _ = sqrt(24);\n ^^^^\n\n:7:1 note: 'var sqrt' declared here\nvar<private> sqrt : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> sqrt : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = sqrt(24);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (104)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var step' as call target\n _ = step(4, 5);\n ^^^^\n\n:7:1 note: 'var step' declared here\nvar<private> step : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> step : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = step(4, 5);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (105)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var tan' as call target\n _ = tan(2);\n ^^^\n\n:7:1 note: 'var tan' declared here\nvar<private> tan : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> tan : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tan(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (106)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var tanh' as call target\n _ = tanh(2);\n ^^^^\n\n:7:1 note: 'var tanh' declared here\nvar<private> tanh : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> tanh : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = tanh(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (107)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var transpose' as call target\n _ = transpose(mat2x2(1, 2, 3, 4));\n ^^^^^^^^^\n\n:7:1 note: 'var transpose' declared here\nvar<private> transpose : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> transpose : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = transpose(mat2x2(1, 2, 3, 4));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (108)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var trunc' as call target\n _ = trunc(2);\n ^^^^^\n\n:7:1 note: 'var trunc' declared here\nvar<private> trunc : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> trunc : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = trunc(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (109)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var u32' as call target\n _ = u32(1i);\n ^^^\n\n:7:1 note: 'var u32' declared here\nvar<private> u32 : i32;\n^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> u32 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = u32(1i);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (110)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack2x16snorm' as call target\n _ = unpack2x16snorm(2);\n ^^^^^^^^^^^^^^^\n\n:7:1 note: 'var unpack2x16snorm' declared here\nvar<private> unpack2x16snorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack2x16snorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16snorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (111)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack2x16unorm' as call target\n _ = unpack2x16unorm(2);\n ^^^^^^^^^^^^^^^\n\n:7:1 note: 'var unpack2x16unorm' declared here\nvar<private> unpack2x16unorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack2x16unorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16unorm(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (112)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack2x16float' as call target\n _ = unpack2x16float(2);\n ^^^^^^^^^^^^^^^\n\n:7:1 note: 'var unpack2x16float' declared here\nvar<private> unpack2x16float : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack2x16float : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack2x16float(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (113)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack4x8snorm' as call target\n _ = unpack4x8snorm(4);\n ^^^^^^^^^^^^^^\n\n:7:1 note: 'var unpack4x8snorm' declared here\nvar<private> unpack4x8snorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack4x8snorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8snorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (114)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack4x8unorm' as call target\n _ = unpack4x8unorm(4);\n ^^^^^^^^^^^^^^\n\n:7:1 note: 'var unpack4x8unorm' declared here\nvar<private> unpack4x8unorm : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack4x8unorm : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4x8unorm(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (115)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack4xI8' as call target\n _ = unpack4xI8(4);\n ^^^^^^^^^^\n\n:7:1 note: 'var unpack4xI8' declared here\nvar<private> unpack4xI8 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack4xI8 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xI8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (116)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var unpack4xU8' as call target\n _ = unpack4xU8(4);\n ^^^^^^^^^^\n\n:7:1 note: 'var unpack4xU8' declared here\nvar<private> unpack4xU8 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> unpack4xU8 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = unpack4xU8(4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (117)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec2' does not take template arguments\n _ = vec2<f32>(1, 2);\n ^^^^^^^^^\n\n:7:1 note: 'var vec2' declared here\nvar<private> vec2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2<f32>(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (118)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var vec2' as call target\n _ = vec2(1, 2);\n ^^^^\n\n:7:1 note: 'var vec2' declared here\nvar<private> vec2 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec2 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec2(1, 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (119)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec3' does not take template arguments\n _ = vec3<f32>(1, 2, 3);\n ^^^^^^^^^\n\n:7:1 note: 'var vec3' declared here\nvar<private> vec3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3<f32>(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (120)",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var vec3' as call target\n _ = vec3(1, 2, 3);\n ^^^^\n\n:7:1 note: 'var vec3' declared here\nvar<private> vec3 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec3 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec3(1, 2, 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\" (121)",
    "result": "Error while parsing WGSL: :16:7 error: variable 'vec4' does not take template arguments\n _ = vec4<f32>(1, 2, 3, 4);\n ^^^^^^^^^\n\n:7:1 note: 'var vec4' declared here\nvar<private> vec4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4<f32>(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin:inject=\"module\"",
    "result": "Error while parsing WGSL: :16:7 error: cannot use 'var vec4' as call target\n _ = vec4(1, 2, 3, 4);\n ^^^^\n\n:7:1 note: 'var vec4' declared here\nvar<private> vec4 : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nstruct Data {\n  rt_arr: array<i32>,\n}\n@group(0) @binding(0) var<storage> placeholder: Data;\n\nvar<private> vec4 : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = vec4(1, 2, 3, 4);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_f16:inject=\"none\"",
    "result": "Error while parsing WGSL: :2:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nenable f16;\n\n\n\nfn sibling() {\n  \n}\n\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  \n  _ = f16(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_f16:inject=\"function\"",
    "result": "Error while parsing WGSL: :2:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nenable f16;\n\n\n\nfn sibling() {\n  \n}\n\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  let f16 = 4;\n  _ = f16(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_f16:inject=\"sibling\"",
    "result": "Error while parsing WGSL: :2:8 error: extension 'f16' is not allowed in the current environment\nenable f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nenable f16;\n\n\n\nfn sibling() {\n  let f16 = 4;\n}\n\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  \n  _ = f16(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_f16:inject=\"module\"",
    "result": "Error while parsing WGSL: :4:1 error: cyclic dependency found: 'f16' -> 'f16'\nvar<private> f16 : f16;\n^^^^^^^^^^^^^^^^^^^^^^\n\n:4:20 note: var 'f16' references var 'f16' here\nvar<private> f16 : f16;\n ^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nenable f16;\n\nvar<private> f16 : f16;\n\nfn sibling() {\n  \n}\n\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  \n  _ = f16(2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (2)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_1d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (3)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_2d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (4)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_2d_array<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (5)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_3d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (6)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_cube<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (7)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_cube_array<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (8)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_multisampled_2d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (9)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_multisampled_2d;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (10)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_external;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (11)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (12)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_2d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (13)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_2d_array<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (14)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_3d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (15)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_2d;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (16)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_2d_array;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (17)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_cube;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (18)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_cube_array;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\" (19)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var s: sampler;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"none\"",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var s: sampler_comparison;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (2)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_1d<f32>;\n\nfn func() {\n  let texture_1d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (3)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_2d<f32>;\n\nfn func() {\n  let texture_2d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (4)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_2d_array<f32>;\n\nfn func() {\n  let texture_2d_array = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (5)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_3d<f32>;\n\nfn func() {\n  let texture_3d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (6)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_cube<f32>;\n\nfn func() {\n  let texture_cube = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (7)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_cube_array<f32>;\n\nfn func() {\n  let texture_cube_array = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (8)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_multisampled_2d<f32>;\n\nfn func() {\n  let texture_multisampled_2d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (9)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_multisampled_2d;\n\nfn func() {\n  let texture_depth_multisampled_2d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (10)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_external;\n\nfn func() {\n  let texture_external = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (11)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, read_write>;\n\nfn func() {\n  let texture_storage_1d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (12)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_2d<rgba8unorm, read_write>;\n\nfn func() {\n  let texture_storage_2d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (13)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_2d_array<rgba8unorm, read_write>;\n\nfn func() {\n  let texture_storage_2d_array = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (14)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_storage_3d<rgba8unorm, read_write>;\n\nfn func() {\n  let texture_storage_3d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (15)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_2d;\n\nfn func() {\n  let texture_depth_2d = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (16)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_2d_array;\n\nfn func() {\n  let texture_depth_2d_array = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (17)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_cube;\n\nfn func() {\n  let texture_depth_cube = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (18)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var t: texture_depth_cube_array;\n\nfn func() {\n  let texture_depth_cube_array = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\" (19)",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var s: sampler;\n\nfn func() {\n  let sampler = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"function\"",
    "result": "OK",
    "src": "\n\n@group(0) @binding(0) var s: sampler_comparison;\n\nfn func() {\n  let sampler_comparison = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_1d' does not take template arguments\n@group(0) @binding(0) var t: texture_1d<f32>;\n ^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_1d' declared here\nvar<private> texture_1d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_1d : f32;\n@group(0) @binding(0) var t: texture_1d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_2d' does not take template arguments\n@group(0) @binding(0) var t: texture_2d<f32>;\n ^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_2d' declared here\nvar<private> texture_2d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_2d : f32;\n@group(0) @binding(0) var t: texture_2d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (4)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_2d_array' does not take template arguments\n@group(0) @binding(0) var t: texture_2d_array<f32>;\n ^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_2d_array' declared here\nvar<private> texture_2d_array : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_2d_array : f32;\n@group(0) @binding(0) var t: texture_2d_array<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (5)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_3d' does not take template arguments\n@group(0) @binding(0) var t: texture_3d<f32>;\n ^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_3d' declared here\nvar<private> texture_3d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_3d : f32;\n@group(0) @binding(0) var t: texture_3d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (6)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_cube' does not take template arguments\n@group(0) @binding(0) var t: texture_cube<f32>;\n ^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_cube' declared here\nvar<private> texture_cube : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_cube : f32;\n@group(0) @binding(0) var t: texture_cube<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (7)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_cube_array' does not take template arguments\n@group(0) @binding(0) var t: texture_cube_array<f32>;\n ^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_cube_array' declared here\nvar<private> texture_cube_array : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_cube_array : f32;\n@group(0) @binding(0) var t: texture_cube_array<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (8)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_multisampled_2d' does not take template arguments\n@group(0) @binding(0) var t: texture_multisampled_2d<f32>;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_multisampled_2d' declared here\nvar<private> texture_multisampled_2d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_multisampled_2d : f32;\n@group(0) @binding(0) var t: texture_multisampled_2d<f32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (9)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_depth_multisampled_2d' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_depth_multisampled_2d;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_depth_multisampled_2d' declared here\nvar<private> texture_depth_multisampled_2d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_depth_multisampled_2d : f32;\n@group(0) @binding(0) var t: texture_depth_multisampled_2d;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (10)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_external' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_external;\n ^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_external' declared here\nvar<private> texture_external : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_external : f32;\n@group(0) @binding(0) var t: texture_external;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (11)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_storage_1d' does not take template arguments\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, read_write>;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_storage_1d' declared here\nvar<private> texture_storage_1d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_storage_1d : f32;\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (12)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_storage_2d' does not take template arguments\n@group(0) @binding(0) var t: texture_storage_2d<rgba8unorm, read_write>;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_storage_2d' declared here\nvar<private> texture_storage_2d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_storage_2d : f32;\n@group(0) @binding(0) var t: texture_storage_2d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (13)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_storage_2d_array' does not take template arguments\n@group(0) @binding(0) var t: texture_storage_2d_array<rgba8unorm, read_write>;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_storage_2d_array' declared here\nvar<private> texture_storage_2d_array : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_storage_2d_array : f32;\n@group(0) @binding(0) var t: texture_storage_2d_array<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (14)",
    "result": "Error while parsing WGSL: :3:30 error: variable 'texture_storage_3d' does not take template arguments\n@group(0) @binding(0) var t: texture_storage_3d<rgba8unorm, read_write>;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_storage_3d' declared here\nvar<private> texture_storage_3d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_storage_3d : f32;\n@group(0) @binding(0) var t: texture_storage_3d<rgba8unorm, read_write>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (15)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_depth_2d' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_depth_2d;\n ^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_depth_2d' declared here\nvar<private> texture_depth_2d : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_depth_2d : f32;\n@group(0) @binding(0) var t: texture_depth_2d;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (16)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_depth_2d_array' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_depth_2d_array;\n ^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_depth_2d_array' declared here\nvar<private> texture_depth_2d_array : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_depth_2d_array : f32;\n@group(0) @binding(0) var t: texture_depth_2d_array;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (17)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_depth_cube' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_depth_cube;\n ^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_depth_cube' declared here\nvar<private> texture_depth_cube : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_depth_cube : f32;\n@group(0) @binding(0) var t: texture_depth_cube;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (18)",
    "result": "Error while parsing WGSL: :3:30 error: 'var texture_depth_cube_array' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_depth_cube_array;\n ^^^^^^^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var texture_depth_cube_array' declared here\nvar<private> texture_depth_cube_array : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> texture_depth_cube_array : f32;\n@group(0) @binding(0) var t: texture_depth_cube_array;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\" (19)",
    "result": "Error while parsing WGSL: :3:30 error: 'var sampler' cannot be referenced at module-scope\n@group(0) @binding(0) var s: sampler;\n ^^^^^^^\n\n:2:1 note: 'var sampler' declared here\nvar<private> sampler : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> sampler : f32;\n@group(0) @binding(0) var s: sampler;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_handle_type:inject=\"module\"",
    "result": "Error while parsing WGSL: :3:30 error: 'var sampler_comparison' cannot be referenced at module-scope\n@group(0) @binding(0) var s: sampler_comparison;\n ^^^^^^^^^^^^^^^^^^\n\n:2:1 note: 'var sampler_comparison' declared here\nvar<private> sampler_comparison : f32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> sampler_comparison : f32;\n@group(0) @binding(0) var s: sampler_comparison;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (2)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureDimensions(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (3)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGather(1, t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (4)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (5)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureLoad(t_2d, vec2(1, 2), 1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (6)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLayers(t_2d_array);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (7)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLevels(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (8)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumSamples(t_2d_ms);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (9)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSample(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (10)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (11)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (12)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (13)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\" (14)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"none\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (2)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureDimensions' as call target\n _ = textureDimensions(t_2d);\n ^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureDimensions' declared here\n let textureDimensions = 4;\n ^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureDimensions = 4;\n  _ = textureDimensions(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (3)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureGather' as call target\n _ = textureGather(1, t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:18:7 note: 'let textureGather' declared here\n let textureGather = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureGather = 4;\n  _ = textureGather(1, t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (4)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureGatherCompare' as call target\n _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n ^^^^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureGatherCompare' declared here\n let textureGatherCompare = 4;\n ^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureGatherCompare = 4;\n  _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (5)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureLoad' as call target\n _ = textureLoad(t_2d, vec2(1, 2), 1);\n ^^^^^^^^^^^\n\n:18:7 note: 'let textureLoad' declared here\n let textureLoad = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureLoad = 4;\n  _ = textureLoad(t_2d, vec2(1, 2), 1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (6)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureNumLayers' as call target\n _ = textureNumLayers(t_2d_array);\n ^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureNumLayers' declared here\n let textureNumLayers = 4;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureNumLayers = 4;\n  _ = textureNumLayers(t_2d_array);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (7)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureNumLevels' as call target\n _ = textureNumLevels(t_2d);\n ^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureNumLevels' declared here\n let textureNumLevels = 4;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureNumLevels = 4;\n  _ = textureNumLevels(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (8)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureNumSamples' as call target\n _ = textureNumSamples(t_2d_ms);\n ^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureNumSamples' declared here\n let textureNumSamples = 4;\n ^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureNumSamples = 4;\n  _ = textureNumSamples(t_2d_ms);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (9)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSample' as call target\n _ = textureSample(t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSample' declared here\n let textureSample = 4;\n ^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSample = 4;\n  _ = textureSample(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (10)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleBias' as call target\n _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n ^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleBias' declared here\n let textureSampleBias = 4;\n ^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleBias = 4;\n  _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (11)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleCompare' as call target\n _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n ^^^^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleCompare' declared here\n let textureSampleCompare = 4;\n ^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleCompare = 4;\n  _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (12)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleCompareLevel' as call target\n _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleCompareLevel' declared here\n let textureSampleCompareLevel = 4;\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleCompareLevel = 4;\n  _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (13)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleGrad' as call target\n _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n ^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleGrad' declared here\n let textureSampleGrad = 4;\n ^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleGrad = 4;\n  _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\" (14)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleLevel' as call target\n _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n ^^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleLevel' declared here\n let textureSampleLevel = 4;\n ^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleLevel = 4;\n  _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"function\"",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'let textureSampleBaseClampToEdge' as call target\n _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:18:7 note: 'let textureSampleBaseClampToEdge' declared here\n let textureSampleBaseClampToEdge = 4;\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  let textureSampleBaseClampToEdge = 4;\n  _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (2)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureDimensions = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureDimensions(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (3)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureGather = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGather(1, t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (4)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureGatherCompare = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (5)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureLoad = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureLoad(t_2d, vec2(1, 2), 1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (6)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureNumLayers = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLayers(t_2d_array);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (7)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureNumLevels = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLevels(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (8)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureNumSamples = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumSamples(t_2d_ms);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (9)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSample = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSample(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (10)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleBias = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (11)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleCompare = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (12)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleCompareLevel = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (13)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleGrad = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\" (14)",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleLevel = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"sibling\"",
    "result": "OK",
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\n\n\nfn sibling() {\n  let textureSampleBaseClampToEdge = 4;\n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureDimensions' as call target\n _ = textureDimensions(t_2d);\n ^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureDimensions' declared here\nvar<private> textureDimensions : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureDimensions : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureDimensions(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureGather' as call target\n _ = textureGather(1, t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:10:1 note: 'var textureGather' declared here\nvar<private> textureGather : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureGather : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGather(1, t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (4)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureGatherCompare' as call target\n _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n ^^^^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureGatherCompare' declared here\nvar<private> textureGatherCompare : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureGatherCompare : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureGatherCompare(t_2d_depth, sc, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (5)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureLoad' as call target\n _ = textureLoad(t_2d, vec2(1, 2), 1);\n ^^^^^^^^^^^\n\n:10:1 note: 'var textureLoad' declared here\nvar<private> textureLoad : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureLoad : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureLoad(t_2d, vec2(1, 2), 1);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (6)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureNumLayers' as call target\n _ = textureNumLayers(t_2d_array);\n ^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureNumLayers' declared here\nvar<private> textureNumLayers : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureNumLayers : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLayers(t_2d_array);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (7)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureNumLevels' as call target\n _ = textureNumLevels(t_2d);\n ^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureNumLevels' declared here\nvar<private> textureNumLevels : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureNumLevels : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumLevels(t_2d);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (8)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureNumSamples' as call target\n _ = textureNumSamples(t_2d_ms);\n ^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureNumSamples' declared here\nvar<private> textureNumSamples : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureNumSamples : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureNumSamples(t_2d_ms);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (9)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSample' as call target\n _ = textureSample(t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSample' declared here\nvar<private> textureSample : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSample : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSample(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (10)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleBias' as call target\n _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n ^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleBias' declared here\nvar<private> textureSampleBias : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleBias : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBias(t_2d, s, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (11)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleCompare' as call target\n _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n ^^^^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleCompare' declared here\nvar<private> textureSampleCompare : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleCompare : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompare(t_2d_depth, sc, vec2(1, 2), 2);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (12)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleCompareLevel' as call target\n _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleCompareLevel' declared here\nvar<private> textureSampleCompareLevel : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleCompareLevel : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleCompareLevel(t_2d_depth, sc, vec2(1, 2), 3, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (13)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleGrad' as call target\n _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n ^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleGrad' declared here\nvar<private> textureSampleGrad : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleGrad : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleGrad(t_2d, s, vec2(1, 2), vec2(1, 2), vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\" (14)",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleLevel' as call target\n _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n ^^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleLevel' declared here\nvar<private> textureSampleLevel : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleLevel : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleLevel(t_2d, s, vec2(1, 2), 3);\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_texture:inject=\"module\"",
    "result": "Error while parsing WGSL: :19:7 error: cannot use 'var textureSampleBaseClampToEdge' as call target\n _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:10:1 note: 'var textureSampleBaseClampToEdge' declared here\nvar<private> textureSampleBaseClampToEdge : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\n@group(0) @binding(0) var t_2d: texture_2d<f32>;\n@group(0) @binding(1) var t_2d_depth: texture_depth_2d;\n@group(0) @binding(2) var t_2d_array: texture_2d_array<f32>;\n@group(0) @binding(3) var t_2d_ms: texture_multisampled_2d<f32>;\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var sc: sampler_comparison;\n\nvar<private> textureSampleBaseClampToEdge : i32;\n\nfn sibling() {\n  \n}\n\n@fragment\nfn main() -> @location(0) vec4f {\n  \n  _ = textureSampleBaseClampToEdge(t_2d, s, vec2(1, 2));\n  return vec4f(1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic_type:inject=\"none\"",
    "result": "OK",
    "src": "\n\n\nvar<workgroup> val: atomic<i32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic_type:inject=\"function\"",
    "result": "OK",
    "src": "\n\n\nvar<workgroup> val: atomic<i32>;\n\nfn func() {\n  let atomic = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic_type:inject=\"module\"",
    "result": "Error while parsing WGSL: :4:21 error: variable 'atomic' does not take template arguments\nvar<workgroup> val: atomic<i32>;\n ^^^^^^^^^^^\n\n:2:1 note: 'var atomic' declared here\nvar<private> atomic: i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> atomic: i32;\n\nvar<workgroup> val: atomic<i32>;\n\nfn func() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (2)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicLoad(&a);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (3)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  atomicStore(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (4)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAdd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (5)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicSub(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (6)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMax(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (7)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMin(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (8)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAnd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\" (9)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicOr(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"none\"",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicXor(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (2)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicLoad' as call target\n _ = atomicLoad(&a);\n ^^^^^^^^^^\n\n:12:7 note: 'let atomicLoad' declared here\n let atomicLoad = 4;\n ^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicLoad = 4;\n  _ = atomicLoad(&a);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (3)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'let atomicStore' as call target\n atomicStore(&a, 1);\n ^^^^^^^^^^^\n\n:12:7 note: 'let atomicStore' declared here\n let atomicStore = 4;\n ^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicStore = 4;\n  atomicStore(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (4)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicAdd' as call target\n _ = atomicAdd(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicAdd' declared here\n let atomicAdd = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicAdd = 4;\n  _ = atomicAdd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (5)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicSub' as call target\n _ = atomicSub(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicSub' declared here\n let atomicSub = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicSub = 4;\n  _ = atomicSub(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (6)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicMax' as call target\n _ = atomicMax(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicMax' declared here\n let atomicMax = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicMax = 4;\n  _ = atomicMax(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (7)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicMin' as call target\n _ = atomicMin(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicMin' declared here\n let atomicMin = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicMin = 4;\n  _ = atomicMin(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (8)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicAnd' as call target\n _ = atomicAnd(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicAnd' declared here\n let atomicAnd = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicAnd = 4;\n  _ = atomicAnd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\" (9)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicOr' as call target\n _ = atomicOr(&a, 1);\n ^^^^^^^^\n\n:12:7 note: 'let atomicOr' declared here\n let atomicOr = 4;\n ^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicOr = 4;\n  _ = atomicOr(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"function\"",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let atomicXor' as call target\n _ = atomicXor(&a, 1);\n ^^^^^^^^^\n\n:12:7 note: 'let atomicXor' declared here\n let atomicXor = 4;\n ^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let atomicXor = 4;\n  _ = atomicXor(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (2)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicLoad = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicLoad(&a);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (3)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicStore = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  atomicStore(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (4)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicAdd = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAdd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (5)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicSub = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicSub(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (6)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicMax = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMax(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (7)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicMin = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMin(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (8)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicAnd = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAnd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\" (9)",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicOr = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicOr(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"sibling\"",
    "result": "OK",
    "src": "\nvar<workgroup> a: atomic<i32>;\n\n\n\nfn sibling() {\n  let atomicXor = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicXor(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicLoad' as call target\n _ = atomicLoad(&a);\n ^^^^^^^^^^\n\n:4:1 note: 'var atomicLoad' declared here\nvar<private> atomicLoad : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicLoad : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicLoad(&a);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'var atomicStore' as call target\n atomicStore(&a, 1);\n ^^^^^^^^^^^\n\n:4:1 note: 'var atomicStore' declared here\nvar<private> atomicStore : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicStore : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  atomicStore(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (4)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicAdd' as call target\n _ = atomicAdd(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicAdd' declared here\nvar<private> atomicAdd : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicAdd : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAdd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (5)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicSub' as call target\n _ = atomicSub(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicSub' declared here\nvar<private> atomicSub : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicSub : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicSub(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (6)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicMax' as call target\n _ = atomicMax(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicMax' declared here\nvar<private> atomicMax : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicMax : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMax(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (7)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicMin' as call target\n _ = atomicMin(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicMin' declared here\nvar<private> atomicMin : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicMin : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicMin(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (8)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicAnd' as call target\n _ = atomicAnd(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicAnd' declared here\nvar<private> atomicAnd : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicAnd : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicAnd(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\" (9)",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicOr' as call target\n _ = atomicOr(&a, 1);\n ^^^^^^^^\n\n:4:1 note: 'var atomicOr' declared here\nvar<private> atomicOr : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicOr : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicOr(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_atomic:inject=\"module\"",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var atomicXor' as call target\n _ = atomicXor(&a, 1);\n ^^^^^^^^^\n\n:4:1 note: 'var atomicXor' declared here\nvar<private> atomicXor : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> a: atomic<i32>;\n\nvar<private> atomicXor : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = atomicXor(&a, 1);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"none\" (2)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  storageBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"none\" (3)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  textureBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"none\" (4)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  workgroupBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"none\"",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = workgroupUniformLoad(&u);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"function\" (2)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'let storageBarrier' as call target\n storageBarrier();\n ^^^^^^^^^^^^^^\n\n:12:7 note: 'let storageBarrier' declared here\n let storageBarrier = 4;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let storageBarrier = 4;\n  storageBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"function\" (3)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'let textureBarrier' as call target\n textureBarrier();\n ^^^^^^^^^^^^^^\n\n:12:7 note: 'let textureBarrier' declared here\n let textureBarrier = 4;\n ^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let textureBarrier = 4;\n  textureBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"function\" (4)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'let workgroupBarrier' as call target\n workgroupBarrier();\n ^^^^^^^^^^^^^^^^\n\n:12:7 note: 'let workgroupBarrier' declared here\n let workgroupBarrier = 4;\n ^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let workgroupBarrier = 4;\n  workgroupBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"function\"",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'let workgroupUniformLoad' as call target\n _ = workgroupUniformLoad(&u);\n ^^^^^^^^^^^^^^^^^^^^\n\n:12:7 note: 'let workgroupUniformLoad' declared here\n let workgroupUniformLoad = 4;\n ^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  let workgroupUniformLoad = 4;\n  _ = workgroupUniformLoad(&u);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"sibling\" (2)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  let storageBarrier = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  storageBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"sibling\" (3)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  let textureBarrier = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  textureBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"sibling\" (4)",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  let workgroupBarrier = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  workgroupBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"sibling\"",
    "result": "OK",
    "src": "\nvar<workgroup> u: u32;\n\n\n\nfn sibling() {\n  let workgroupUniformLoad = 4;\n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = workgroupUniformLoad(&u);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'var storageBarrier' as call target\n storageBarrier();\n ^^^^^^^^^^^^^^\n\n:4:1 note: 'var storageBarrier' declared here\nvar<private> storageBarrier : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\nvar<private> storageBarrier : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  storageBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'var textureBarrier' as call target\n textureBarrier();\n ^^^^^^^^^^^^^^\n\n:4:1 note: 'var textureBarrier' declared here\nvar<private> textureBarrier : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\nvar<private> textureBarrier : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  textureBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"module\" (4)",
    "result": "Error while parsing WGSL: :13:3 error: cannot use 'var workgroupBarrier' as call target\n workgroupBarrier();\n ^^^^^^^^^^^^^^^^\n\n:4:1 note: 'var workgroupBarrier' declared here\nvar<private> workgroupBarrier : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\nvar<private> workgroupBarrier : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  workgroupBarrier();\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_builtin_barriers:inject=\"module\"",
    "result": "Error while parsing WGSL: :13:7 error: cannot use 'var workgroupUniformLoad' as call target\n _ = workgroupUniformLoad(&u);\n ^^^^^^^^^^^^^^^^^^^^\n\n:4:1 note: 'var workgroupUniformLoad' declared here\nvar<private> workgroupUniformLoad : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<workgroup> u: u32;\n\nvar<private> workgroupUniformLoad : i32;\n\nfn sibling() {\n  \n}\n\n@compute @workgroup_size(1)\nfn main() {\n  \n  _ = workgroupUniformLoad(&u);\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"none\" (2)",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var<storage, read> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"none\" (3)",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var<storage, read_write> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"none\"",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, write>;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"function\" (2)",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var<storage, read> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  let read = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"function\" (3)",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var<storage, read_write> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  let read_write = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"function\"",
    "result": "OK",
    "src": "\n\n\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, write>;\n\n@compute @workgroup_size(1)\nfn main() {\n  let write = 4;\n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"module\" (2)",
    "result": "Error while parsing WGSL: :4:36 error: 'var read' cannot be referenced at module-scope\n@group(0) @binding(0) var<storage, read> a: i32;\n ^^^^\n\n:2:1 note: 'var read' declared here\nvar<private> read : i32;\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> read : i32;\n\n@group(0) @binding(0) var<storage, read> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"module\" (3)",
    "result": "Error while parsing WGSL: :4:36 error: 'var read_write' cannot be referenced at module-scope\n@group(0) @binding(0) var<storage, read_write> a: i32;\n ^^^^^^^^^^\n\n:2:1 note: 'var read_write' declared here\nvar<private> read_write : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> read_write : i32;\n\n@group(0) @binding(0) var<storage, read_write> a: i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,shadow_builtins:shadow_hides_access_mode:inject=\"module\"",
    "result": "Error while parsing WGSL: :4:61 error: 'var write' cannot be referenced at module-scope\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, write>;\n ^^^^^\n\n:2:1 note: 'var write' declared here\nvar<private> write : i32;\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "\nvar<private> write : i32;\n\n@group(0) @binding(0) var t: texture_storage_1d<rgba8unorm, write>;\n\n@compute @workgroup_size(1)\nfn main() {\n  \n}\n    "
  },
  {
    "name": "webgpu:shader,validation,parse,source:empty: (2)",
    "result": "OK",
    "src": "\n    @fragment\n    fn main() -> @location(0) vec4<f32> {\n      return vec4<f32>(.4, .2, .3, .1);\n    }"
  },
  {
    "name": "webgpu:shader,validation,parse,source:empty:",
    "result": "OK",
    "src": ""
  },
  {
    "name": "webgpu:shader,validation,parse,source:invalid_source:",
    "result": "Error while parsing WGSL: :1:1 error: unexpected token\ninvalid_source\n^^^^^^^^^^^^^^\n\n\n - While validating [ShaderModuleDescriptor]\n - While calling [Device].CreateShaderModule([ShaderModuleDescriptor]).\n",
    "fails": true,
    "src": "invalid_source"
  }
]